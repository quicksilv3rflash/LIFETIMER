
lifetimer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000007dc  00000870  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800108  00800108  00000878  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  000008a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011af  00000000  00000000  00000980  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001ff  00000000  00000000  00001b2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003cc  00000000  00000000  00001d2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001fc  00000000  00000000  000020fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002db  00000000  00000000  000022f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003a6  00000000  00000000  000025d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00002979  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 bb 02 	jmp	0x576	; 0x576 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ed       	ldi	r30, 0xDC	; 220
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 30       	cpi	r26, 0x0B	; 11
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 78 03 	call	0x6f0	; 0x6f0 <main>
  9e:	0c 94 ec 03 	jmp	0x7d8	; 0x7d8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SPIMasterInit>:

//SPI init
void SPIMasterInit(void)
{
	//set MOSI, SCK and SS as output
	DDRB |= (1<<PB3)|(1<<PB5)|(1<<PB2);
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	8c 62       	ori	r24, 0x2C	; 44
  aa:	84 b9       	out	0x04, r24	; 4
	//set SS to high
	PORTB |= (1<<PB2);
  ac:	2a 9a       	sbi	0x05, 2	; 5
	//enable master SPI at clock rate Fck/16
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
  ae:	81 e5       	ldi	r24, 0x51	; 81
  b0:	8c bd       	out	0x2c, r24	; 44
  b2:	08 95       	ret

000000b4 <SPIMasterSend>:

//master send function
void SPIMasterSend(uint8_t data)
{
	//select slave
	PORTB &= ~(1<<PB2);
  b4:	2a 98       	cbi	0x05, 2	; 5
	//send data
	SPDR=data;
  b6:	8e bd       	out	0x2e, r24	; 46
	//wait for transmition complete
	while (!(SPSR &(1<<SPIF)));
  b8:	0d b4       	in	r0, 0x2d	; 45
  ba:	07 fe       	sbrs	r0, 7
  bc:	fd cf       	rjmp	.-6      	; 0xb8 <SPIMasterSend+0x4>
	//SS to high
	PORTB |= (1<<PB2);
  be:	2a 9a       	sbi	0x05, 2	; 5
  c0:	08 95       	ret

000000c2 <send_command>:
}

//send_command(uint8_t); send COMMAND to the screen
void send_command(uint8_t data){
PORTB &= 0xFE; // pull PORTB0 low to indicate command
  c2:	28 98       	cbi	0x05, 0	; 5
SPIMasterSend(data);
  c4:	0e 94 5a 00 	call	0xb4	; 0xb4 <SPIMasterSend>
PORTB |= 0x01; // pull PORTB0 high to indicate data
  c8:	28 9a       	sbi	0x05, 0	; 5
  ca:	08 95       	ret

000000cc <send_data>:
}


//send_data(uint8_t); send DATA to the screen
void send_data(uint8_t data){
PORTB |= 0x01; // pull PORTB0 high to indicate data
  cc:	28 9a       	sbi	0x05, 0	; 5
SPIMasterSend(data);
  ce:	0e 94 5a 00 	call	0xb4	; 0xb4 <SPIMasterSend>
PORTB &= 0xFE; // pull PORTB0 low to indicate command	
  d2:	28 98       	cbi	0x05, 0	; 5
  d4:	08 95       	ret

000000d6 <draw_zero>:


//below are draw functions. all start with a space.

void draw_zero(void){
	send_data(0x00);
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
  dc:	8e e3       	ldi	r24, 0x3E	; 62
  de:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
  e2:	82 e2       	ldi	r24, 0x22	; 34
  e4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
  e8:	8e e3       	ldi	r24, 0x3E	; 62
  ea:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
  ee:	08 95       	ret

000000f0 <draw_one>:
}

void draw_one(void){
	send_data(0x00);
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
 102:	8e e3       	ldi	r24, 0x3E	; 62
 104:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
 108:	08 95       	ret

0000010a <draw_two>:
}

void draw_two(void){
	send_data(0x00);
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3A);
 110:	8a e3       	ldi	r24, 0x3A	; 58
 112:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
 116:	8a e2       	ldi	r24, 0x2A	; 42
 118:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2E);
 11c:	8e e2       	ldi	r24, 0x2E	; 46
 11e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
 122:	08 95       	ret

00000124 <draw_three>:
}

void draw_three(void){
	send_data(0x00);
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
 12a:	8a e2       	ldi	r24, 0x2A	; 42
 12c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
 130:	8a e2       	ldi	r24, 0x2A	; 42
 132:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
 136:	8e e3       	ldi	r24, 0x3E	; 62
 138:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
 13c:	08 95       	ret

0000013e <draw_four>:
}

void draw_four(void){
	send_data(0x00);
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0E);
 144:	8e e0       	ldi	r24, 0x0E	; 14
 146:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
 14a:	88 e0       	ldi	r24, 0x08	; 8
 14c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
 150:	8e e3       	ldi	r24, 0x3E	; 62
 152:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
 156:	08 95       	ret

00000158 <draw_five>:
}

void draw_five(void){
	send_data(0x00);
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2E);
 15e:	8e e2       	ldi	r24, 0x2E	; 46
 160:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
 164:	8a e2       	ldi	r24, 0x2A	; 42
 166:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3A);
 16a:	8a e3       	ldi	r24, 0x3A	; 58
 16c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
 170:	08 95       	ret

00000172 <draw_six>:
}

void draw_six(void){
	send_data(0x00);
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
 178:	8e e3       	ldi	r24, 0x3E	; 62
 17a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
 17e:	8a e2       	ldi	r24, 0x2A	; 42
 180:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3A);
 184:	8a e3       	ldi	r24, 0x3A	; 58
 186:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
 18a:	08 95       	ret

0000018c <draw_seven>:
}

void draw_seven(void){
	send_data(0x00);
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
 198:	82 e0       	ldi	r24, 0x02	; 2
 19a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
 19e:	8e e3       	ldi	r24, 0x3E	; 62
 1a0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
 1a4:	08 95       	ret

000001a6 <draw_eight>:
}

void draw_eight(void){
	send_data(0x00);
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
 1ac:	8e e3       	ldi	r24, 0x3E	; 62
 1ae:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
 1b2:	8a e2       	ldi	r24, 0x2A	; 42
 1b4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
 1b8:	8e e3       	ldi	r24, 0x3E	; 62
 1ba:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
 1be:	08 95       	ret

000001c0 <draw_nine>:
}

void draw_nine(void){
	send_data(0x00);
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0E);
 1c6:	8e e0       	ldi	r24, 0x0E	; 14
 1c8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0A);
 1cc:	8a e0       	ldi	r24, 0x0A	; 10
 1ce:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
 1d2:	8e e3       	ldi	r24, 0x3E	; 62
 1d4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
 1d8:	08 95       	ret

000001da <draw_period>:
}

void draw_period(void){
	send_data(0x00);
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x20);
 1e0:	80 e2       	ldi	r24, 0x20	; 32
 1e2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
 1e6:	08 95       	ret

000001e8 <draw_percent>:
}

//draw_percent(void); draws a percent symbol on the screen
void draw_percent(void){
	send_data(0x00);
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
 1ee:	8e e3       	ldi	r24, 0x3E	; 62
 1f0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
 1f4:	82 e2       	ldi	r24, 0x22	; 34
 1f6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x42);
 200:	82 e4       	ldi	r24, 0x42	; 66
 202:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x25);
 206:	85 e2       	ldi	r24, 0x25	; 37
 208:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x12);
 20c:	82 e1       	ldi	r24, 0x12	; 18
 20e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
 212:	88 e0       	ldi	r24, 0x08	; 8
 214:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x24);
 218:	84 e2       	ldi	r24, 0x24	; 36
 21a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x52);
 21e:	82 e5       	ldi	r24, 0x52	; 82
 220:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x21);
 224:	81 e2       	ldi	r24, 0x21	; 33
 226:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
 230:	82 e2       	ldi	r24, 0x22	; 34
 232:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
 236:	8e e3       	ldi	r24, 0x3E	; 62
 238:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
 23c:	08 95       	ret

0000023e <draw_timeisrunningout>:
}

//fills one line with the message "TIME IS RUNNING OUT"
void draw_timeisrunningout(void){
	//time
	send_data(0x02);
 23e:	82 e0       	ldi	r24, 0x02	; 2
 240:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
 244:	8e e3       	ldi	r24, 0x3E	; 62
 246:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
 24a:	82 e0       	ldi	r24, 0x02	; 2
 24c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
 256:	8e e3       	ldi	r24, 0x3E	; 62
 258:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
 262:	8e e3       	ldi	r24, 0x3E	; 62
 264:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
 268:	84 e0       	ldi	r24, 0x04	; 4
 26a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
 26e:	88 e0       	ldi	r24, 0x08	; 8
 270:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
 274:	84 e0       	ldi	r24, 0x04	; 4
 276:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
 27a:	8e e3       	ldi	r24, 0x3E	; 62
 27c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
 286:	8e e3       	ldi	r24, 0x3E	; 62
 288:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
 28c:	8a e2       	ldi	r24, 0x2A	; 42
 28e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	
	//is
	send_data(0x3E);
 29e:	8e e3       	ldi	r24, 0x3E	; 62
 2a0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2C);
 2aa:	8c e2       	ldi	r24, 0x2C	; 44
 2ac:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
 2b0:	8a e2       	ldi	r24, 0x2A	; 42
 2b2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x1A);
 2b6:	8a e1       	ldi	r24, 0x1A	; 26
 2b8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	
	//running
	send_data(0x3E);
 2c8:	8e e3       	ldi	r24, 0x3E	; 62
 2ca:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x1A);
 2ce:	8a e1       	ldi	r24, 0x1A	; 26
 2d0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2E);
 2d4:	8e e2       	ldi	r24, 0x2E	; 46
 2d6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
 2e0:	8e e3       	ldi	r24, 0x3E	; 62
 2e2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x20);
 2e6:	80 e2       	ldi	r24, 0x20	; 32
 2e8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
 2ec:	8e e3       	ldi	r24, 0x3E	; 62
 2ee:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
 2f8:	8e e3       	ldi	r24, 0x3E	; 62
 2fa:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
 2fe:	84 e0       	ldi	r24, 0x04	; 4
 300:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
 304:	88 e0       	ldi	r24, 0x08	; 8
 306:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
 30a:	8e e3       	ldi	r24, 0x3E	; 62
 30c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
 316:	8e e3       	ldi	r24, 0x3E	; 62
 318:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
 31c:	84 e0       	ldi	r24, 0x04	; 4
 31e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
 322:	88 e0       	ldi	r24, 0x08	; 8
 324:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
 328:	8e e3       	ldi	r24, 0x3E	; 62
 32a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
 334:	8e e3       	ldi	r24, 0x3E	; 62
 336:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
 340:	8e e3       	ldi	r24, 0x3E	; 62
 342:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
 346:	84 e0       	ldi	r24, 0x04	; 4
 348:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
 34c:	88 e0       	ldi	r24, 0x08	; 8
 34e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
 352:	8e e3       	ldi	r24, 0x3E	; 62
 354:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
 35e:	8e e3       	ldi	r24, 0x3E	; 62
 360:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
 364:	82 e2       	ldi	r24, 0x22	; 34
 366:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3A);
 36a:	8a e3       	ldi	r24, 0x3A	; 58
 36c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		//out
	send_data(0x00);
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
 37c:	8e e3       	ldi	r24, 0x3E	; 62
 37e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
 382:	82 e2       	ldi	r24, 0x22	; 34
 384:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
 388:	8e e3       	ldi	r24, 0x3E	; 62
 38a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
 394:	8e e3       	ldi	r24, 0x3E	; 62
 396:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x20);
 39a:	80 e2       	ldi	r24, 0x20	; 32
 39c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
 3a0:	8e e3       	ldi	r24, 0x3E	; 62
 3a2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
 3ac:	82 e0       	ldi	r24, 0x02	; 2
 3ae:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
 3b2:	8e e3       	ldi	r24, 0x3E	; 62
 3b4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
 3b8:	82 e0       	ldi	r24, 0x02	; 2
 3ba:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
 3be:	08 95       	ret

000003c0 <draw_digit>:
}

//draw digit selects the correct draw function for the given digit
void draw_digit(uint8_t digit){
	if(digit == 0){
 3c0:	81 11       	cpse	r24, r1
 3c2:	03 c0       	rjmp	.+6      	; 0x3ca <draw_digit+0xa>
		draw_zero();
 3c4:	0e 94 6b 00 	call	0xd6	; 0xd6 <draw_zero>
 3c8:	08 95       	ret
		}else if(digit == 1){
 3ca:	81 30       	cpi	r24, 0x01	; 1
 3cc:	19 f4       	brne	.+6      	; 0x3d4 <draw_digit+0x14>
		draw_one();
 3ce:	0e 94 78 00 	call	0xf0	; 0xf0 <draw_one>
 3d2:	08 95       	ret
		}else if(digit == 2){
 3d4:	82 30       	cpi	r24, 0x02	; 2
 3d6:	19 f4       	brne	.+6      	; 0x3de <draw_digit+0x1e>
		draw_two();
 3d8:	0e 94 85 00 	call	0x10a	; 0x10a <draw_two>
 3dc:	08 95       	ret
		}else if(digit == 3){
 3de:	83 30       	cpi	r24, 0x03	; 3
 3e0:	19 f4       	brne	.+6      	; 0x3e8 <draw_digit+0x28>
		draw_three();
 3e2:	0e 94 92 00 	call	0x124	; 0x124 <draw_three>
 3e6:	08 95       	ret
		}else if(digit == 4){
 3e8:	84 30       	cpi	r24, 0x04	; 4
 3ea:	19 f4       	brne	.+6      	; 0x3f2 <draw_digit+0x32>
		draw_four();
 3ec:	0e 94 9f 00 	call	0x13e	; 0x13e <draw_four>
 3f0:	08 95       	ret
		}else if(digit == 5){
 3f2:	85 30       	cpi	r24, 0x05	; 5
 3f4:	19 f4       	brne	.+6      	; 0x3fc <draw_digit+0x3c>
		draw_five();
 3f6:	0e 94 ac 00 	call	0x158	; 0x158 <draw_five>
 3fa:	08 95       	ret
		}else if(digit == 6){
 3fc:	86 30       	cpi	r24, 0x06	; 6
 3fe:	19 f4       	brne	.+6      	; 0x406 <draw_digit+0x46>
		draw_six();
 400:	0e 94 b9 00 	call	0x172	; 0x172 <draw_six>
 404:	08 95       	ret
		}else if(digit == 7){
 406:	87 30       	cpi	r24, 0x07	; 7
 408:	19 f4       	brne	.+6      	; 0x410 <draw_digit+0x50>
		draw_seven();
 40a:	0e 94 c6 00 	call	0x18c	; 0x18c <draw_seven>
 40e:	08 95       	ret
		}else if(digit == 8){
 410:	88 30       	cpi	r24, 0x08	; 8
 412:	19 f4       	brne	.+6      	; 0x41a <draw_digit+0x5a>
		draw_eight();
 414:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <draw_eight>
 418:	08 95       	ret
		}else if(digit == 9){
 41a:	89 30       	cpi	r24, 0x09	; 9
 41c:	11 f4       	brne	.+4      	; 0x422 <draw_digit+0x62>
		draw_nine();
 41e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <draw_nine>
 422:	08 95       	ret

00000424 <displaytimeunit>:
	}
}

//void displaytimeunit(uint8_t timeunit); displays time unit
void displaytimeunit(uint8_t timeunit){
 424:	cf 93       	push	r28
uint8_t timeunit_now = timeunit; //stores volatile into timeunit_now which will be manipulated for display
draw_digit((timeunit_now - (timeunit_now % 10))/10);
 426:	cd ec       	ldi	r28, 0xCD	; 205
 428:	8c 9f       	mul	r24, r28
 42a:	c1 2d       	mov	r28, r1
 42c:	11 24       	eor	r1, r1
 42e:	c6 95       	lsr	r28
 430:	c6 95       	lsr	r28
 432:	c6 95       	lsr	r28
 434:	cc 0f       	add	r28, r28
 436:	9c 2f       	mov	r25, r28
 438:	99 0f       	add	r25, r25
 43a:	99 0f       	add	r25, r25
 43c:	c9 0f       	add	r28, r25
 43e:	98 2f       	mov	r25, r24
 440:	9c 1b       	sub	r25, r28
 442:	c9 2f       	mov	r28, r25
 444:	28 2f       	mov	r18, r24
 446:	30 e0       	ldi	r19, 0x00	; 0
 448:	c9 01       	movw	r24, r18
 44a:	8c 1b       	sub	r24, r28
 44c:	91 09       	sbc	r25, r1
 44e:	6a e0       	ldi	r22, 0x0A	; 10
 450:	70 e0       	ldi	r23, 0x00	; 0
 452:	0e 94 c4 03 	call	0x788	; 0x788 <__divmodhi4>
 456:	86 2f       	mov	r24, r22
 458:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <draw_digit>
draw_digit(timeunit_now % 10);
 45c:	8c 2f       	mov	r24, r28
 45e:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <draw_digit>
}
 462:	cf 91       	pop	r28
 464:	08 95       	ret

00000466 <refresh_screen>:
	
	
//void refresh_screen(void); refreshes the screen
void refresh_screen(void){
 466:	cf 93       	push	r28
 468:	df 93       	push	r29
 46a:	d1 e0       	ldi	r29, 0x01	; 1
 46c:	c0 e0       	ldi	r28, 0x00	; 0
 46e:	02 c0       	rjmp	.+4      	; 0x474 <refresh_screen+0xe>
 470:	cf 5f       	subi	r28, 0xFF	; 255
 472:	df 5f       	subi	r29, 0xFF	; 255
	uint8_t j=0;
	for(j=0;j<6;j++){
		send_command(0xB0 | j); //set page address (0xb0 | address)
 474:	8c 2f       	mov	r24, r28
 476:	80 6b       	ori	r24, 0xB0	; 176
 478:	0e 94 61 00 	call	0xc2	; 0xc2 <send_command>
		
		uint8_t add = 0x00; //column address
		send_command((0x10|(add>>4))+0x02); //set column address part one
 47c:	82 e1       	ldi	r24, 0x12	; 18
 47e:	0e 94 61 00 	call	0xc2	; 0xc2 <send_command>
		send_command((0x0f&add));//set column address part two
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	0e 94 61 00 	call	0xc2	; 0xc2 <send_command>
		uint8_t i=0;
		for(i=0;i<64;i++){
			send_data(screenmemory[i+64*j]);
		}
		*/
		if(j == 0){
 488:	c1 11       	cpse	r28, r1
 48a:	31 c0       	rjmp	.+98     	; 0x4ee <refresh_screen+0x88>
			displaytimeunit(AB);
 48c:	80 91 06 01 	lds	r24, 0x0106
 490:	0e 94 12 02 	call	0x424	; 0x424 <displaytimeunit>
			draw_period();
 494:	0e 94 ed 00 	call	0x1da	; 0x1da <draw_period>
			displaytimeunit(CD);
 498:	80 91 05 01 	lds	r24, 0x0105
 49c:	0e 94 12 02 	call	0x424	; 0x424 <displaytimeunit>
			displaytimeunit(EF);
 4a0:	80 91 04 01 	lds	r24, 0x0104
 4a4:	0e 94 12 02 	call	0x424	; 0x424 <displaytimeunit>
			displaytimeunit(GH);
 4a8:	80 91 03 01 	lds	r24, 0x0103
 4ac:	0e 94 12 02 	call	0x424	; 0x424 <displaytimeunit>
			displaytimeunit(IJ);	
 4b0:	80 91 02 01 	lds	r24, 0x0102
 4b4:	0e 94 12 02 	call	0x424	; 0x424 <displaytimeunit>
			
			for(uint8_t i=0;i<2;i++){
				send_data(0x00);
 4b8:	80 e0       	ldi	r24, 0x00	; 0
 4ba:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
				send_data(0x00);
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
				send_data(0x00);
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
				send_data(0x00);
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			displaytimeunit(EF);
			displaytimeunit(GH);
			displaytimeunit(IJ);	
			
			for(uint8_t i=0;i<2;i++){
				send_data(0x00);
 4d0:	80 e0       	ldi	r24, 0x00	; 0
 4d2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
				send_data(0x00);
 4d6:	80 e0       	ldi	r24, 0x00	; 0
 4d8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
				send_data(0x00);
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
				send_data(0x00);
 4e2:	80 e0       	ldi	r24, 0x00	; 0
 4e4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			}
			draw_percent();
 4e8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <draw_percent>
 4ec:	3e c0       	rjmp	.+124    	; 0x56a <refresh_screen+0x104>
		}
		if(j==1){
 4ee:	c1 30       	cpi	r28, 0x01	; 1
 4f0:	19 f4       	brne	.+6      	; 0x4f8 <refresh_screen+0x92>
			draw_timeisrunningout();
 4f2:	0e 94 1f 01 	call	0x23e	; 0x23e <draw_timeisrunningout>
 4f6:	39 c0       	rjmp	.+114    	; 0x56a <refresh_screen+0x104>
		}
		if(j==2){
 4f8:	c2 30       	cpi	r28, 0x02	; 2
 4fa:	b9 f5       	brne	.+110    	; 0x56a <refresh_screen+0x104>
			displaytimeunit(hours);
 4fc:	80 91 00 01 	lds	r24, 0x0100
 500:	0e 94 12 02 	call	0x424	; 0x424 <displaytimeunit>
			send_data(0x00);
 504:	80 e0       	ldi	r24, 0x00	; 0
 506:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			send_data(0x22);
 50a:	82 e2       	ldi	r24, 0x22	; 34
 50c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			send_data(0x00);
 510:	80 e0       	ldi	r24, 0x00	; 0
 512:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			displaytimeunit(minutes);
 516:	80 91 01 01 	lds	r24, 0x0101
 51a:	0e 94 12 02 	call	0x424	; 0x424 <displaytimeunit>
			send_data(0x00);
 51e:	80 e0       	ldi	r24, 0x00	; 0
 520:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			send_data(0x22);
 524:	82 e2       	ldi	r24, 0x22	; 34
 526:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			send_data(0x00);
 52a:	80 e0       	ldi	r24, 0x00	; 0
 52c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			displaytimeunit(seconds);	
 530:	80 91 08 01 	lds	r24, 0x0108
 534:	0e 94 12 02 	call	0x424	; 0x424 <displaytimeunit>
			send_data(0x00);
 538:	80 e0       	ldi	r24, 0x00	; 0
 53a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			send_data(0x00);
 53e:	80 e0       	ldi	r24, 0x00	; 0
 540:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			send_data(0x00);
 544:	80 e0       	ldi	r24, 0x00	; 0
 546:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			send_data(0x00);
 54a:	80 e0       	ldi	r24, 0x00	; 0
 54c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			send_data(0x00);
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			send_data(0x00);
 556:	80 e0       	ldi	r24, 0x00	; 0
 558:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			send_data(0x00);
 55c:	80 e0       	ldi	r24, 0x00	; 0
 55e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			send_data(0x00);
 562:	80 e0       	ldi	r24, 0x00	; 0
 564:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
 568:	83 cf       	rjmp	.-250    	; 0x470 <refresh_screen+0xa>
	
	
//void refresh_screen(void); refreshes the screen
void refresh_screen(void){
	uint8_t j=0;
	for(j=0;j<6;j++){
 56a:	d6 30       	cpi	r29, 0x06	; 6
 56c:	08 f4       	brcc	.+2      	; 0x570 <refresh_screen+0x10a>
 56e:	80 cf       	rjmp	.-256    	; 0x470 <refresh_screen+0xa>
			send_data(0x00);
			send_data(0x00);
			send_data(0x00);
		}		
	}
}
 570:	df 91       	pop	r29
 572:	cf 91       	pop	r28
 574:	08 95       	ret

00000576 <__vector_5>:

//INTERRUPT SERVICE ROUTINE FOR PIN CHANGE (BUTTON PRESS)
ISR(PCINT2_vect) {
 576:	1f 92       	push	r1
 578:	0f 92       	push	r0
 57a:	0f b6       	in	r0, 0x3f	; 63
 57c:	0f 92       	push	r0
 57e:	11 24       	eor	r1, r1
	
	number_of_frames_displayed = 0;
 580:	10 92 0a 01 	sts	0x010A, r1
	//resetting this variable to zero causes the screen to be turned on for a bit while it's re-incremented
}
 584:	0f 90       	pop	r0
 586:	0f be       	out	0x3f, r0	; 63
 588:	0f 90       	pop	r0
 58a:	1f 90       	pop	r1
 58c:	18 95       	reti

0000058e <RTCInit>:

//Timer2 init according to datasheet
void RTCInit(void){
	//Disable timer2 interrupts
	TIMSK2  = 0;
 58e:	10 92 70 00 	sts	0x0070, r1
	//Enable asynchronous mode
	ASSR  = (1<<AS2);
 592:	80 e2       	ldi	r24, 0x20	; 32
 594:	80 93 b6 00 	sts	0x00B6, r24
	//set initial counter value
	TCNT2=0;
 598:	10 92 b2 00 	sts	0x00B2, r1
	//set prescaler 32 (update every 1/4 second)
	TCCR2B |= (1<<CS21)|(1<<CS00);
 59c:	e1 eb       	ldi	r30, 0xB1	; 177
 59e:	f0 e0       	ldi	r31, 0x00	; 0
 5a0:	80 81       	ld	r24, Z
 5a2:	83 60       	ori	r24, 0x03	; 3
 5a4:	80 83       	st	Z, r24
	//wait for registers update
	while (ASSR & ((1<<TCN2UB)|(1<<TCR2BUB)));
 5a6:	e6 eb       	ldi	r30, 0xB6	; 182
 5a8:	f0 e0       	ldi	r31, 0x00	; 0
 5aa:	80 81       	ld	r24, Z
 5ac:	81 71       	andi	r24, 0x11	; 17
 5ae:	e9 f7       	brne	.-6      	; 0x5aa <RTCInit+0x1c>
	//clear interrupt flags
	TIFR2  = (1<<TOV2);
 5b0:	81 e0       	ldi	r24, 0x01	; 1
 5b2:	87 bb       	out	0x17, r24	; 23
	//enable TOV2 interrupt
	TIMSK2  = (1<<TOIE2);
 5b4:	80 93 70 00 	sts	0x0070, r24
 5b8:	08 95       	ret

000005ba <__vector_9>:
}

//Overflow ISR
ISR(TIMER2_OVF_vect){
 5ba:	1f 92       	push	r1
 5bc:	0f 92       	push	r0
 5be:	0f b6       	in	r0, 0x3f	; 63
 5c0:	0f 92       	push	r0
 5c2:	11 24       	eor	r1, r1
 5c4:	2f 93       	push	r18
 5c6:	3f 93       	push	r19
 5c8:	4f 93       	push	r20
 5ca:	5f 93       	push	r21
 5cc:	6f 93       	push	r22
 5ce:	7f 93       	push	r23
 5d0:	8f 93       	push	r24
 5d2:	9f 93       	push	r25
 5d4:	af 93       	push	r26
 5d6:	bf 93       	push	r27
 5d8:	ef 93       	push	r30
 5da:	ff 93       	push	r31
	uint8_t frames_until_turnoff = 35;
	
	if(number_of_frames_displayed == 0){
 5dc:	80 91 0a 01 	lds	r24, 0x010A
 5e0:	81 11       	cpse	r24, r1
 5e2:	03 c0       	rjmp	.+6      	; 0x5ea <__vector_9+0x30>
		send_command(0xAF); //turn the display on
 5e4:	8f ea       	ldi	r24, 0xAF	; 175
 5e6:	0e 94 61 00 	call	0xc2	; 0xc2 <send_command>
	}	
	if(number_of_frames_displayed < frames_until_turnoff){
 5ea:	80 91 0a 01 	lds	r24, 0x010A
 5ee:	83 32       	cpi	r24, 0x23	; 35
 5f0:	40 f4       	brcc	.+16     	; 0x602 <__vector_9+0x48>
		refresh_screen();
 5f2:	0e 94 33 02 	call	0x466	; 0x466 <refresh_screen>
		number_of_frames_displayed++;
 5f6:	80 91 0a 01 	lds	r24, 0x010A
 5fa:	8f 5f       	subi	r24, 0xFF	; 255
 5fc:	80 93 0a 01 	sts	0x010A, r24
 600:	07 c0       	rjmp	.+14     	; 0x610 <__vector_9+0x56>
	}else if(number_of_frames_displayed >= frames_until_turnoff){
 602:	80 91 0a 01 	lds	r24, 0x010A
 606:	83 32       	cpi	r24, 0x23	; 35
 608:	18 f0       	brcs	.+6      	; 0x610 <__vector_9+0x56>
		send_command(0xAE); //display off command
 60a:	8e ea       	ldi	r24, 0xAE	; 174
 60c:	0e 94 61 00 	call	0xc2	; 0xc2 <send_command>
	}
	
	IJ--;
 610:	80 91 02 01 	lds	r24, 0x0102
 614:	81 50       	subi	r24, 0x01	; 1
 616:	80 93 02 01 	sts	0x0102, r24
	if(IJ == 0){
 61a:	80 91 02 01 	lds	r24, 0x0102
 61e:	81 11       	cpse	r24, r1
 620:	2c c0       	rjmp	.+88     	; 0x67a <__vector_9+0xc0>
		IJ = 99;
 622:	83 e6       	ldi	r24, 0x63	; 99
 624:	80 93 02 01 	sts	0x0102, r24
		GH--;
 628:	80 91 03 01 	lds	r24, 0x0103
 62c:	81 50       	subi	r24, 0x01	; 1
 62e:	80 93 03 01 	sts	0x0103, r24
		if(GH == 0){
 632:	80 91 03 01 	lds	r24, 0x0103
 636:	81 11       	cpse	r24, r1
 638:	20 c0       	rjmp	.+64     	; 0x67a <__vector_9+0xc0>
			GH = 99;
 63a:	83 e6       	ldi	r24, 0x63	; 99
 63c:	80 93 03 01 	sts	0x0103, r24
			EF--;
 640:	80 91 04 01 	lds	r24, 0x0104
 644:	81 50       	subi	r24, 0x01	; 1
 646:	80 93 04 01 	sts	0x0104, r24
			if(EF == 0){
 64a:	80 91 04 01 	lds	r24, 0x0104
 64e:	81 11       	cpse	r24, r1
 650:	14 c0       	rjmp	.+40     	; 0x67a <__vector_9+0xc0>
				EF = 99;
 652:	83 e6       	ldi	r24, 0x63	; 99
 654:	80 93 04 01 	sts	0x0104, r24
				CD--;
 658:	80 91 05 01 	lds	r24, 0x0105
 65c:	81 50       	subi	r24, 0x01	; 1
 65e:	80 93 05 01 	sts	0x0105, r24
				if(CD == 0){
 662:	80 91 05 01 	lds	r24, 0x0105
 666:	81 11       	cpse	r24, r1
 668:	08 c0       	rjmp	.+16     	; 0x67a <__vector_9+0xc0>
					CD = 99;
 66a:	83 e6       	ldi	r24, 0x63	; 99
 66c:	80 93 05 01 	sts	0x0105, r24
					AB--;
 670:	80 91 06 01 	lds	r24, 0x0106
 674:	81 50       	subi	r24, 0x01	; 1
 676:	80 93 06 01 	sts	0x0106, r24
			}
		}
	}
	
	
	num_overflows++;
 67a:	80 91 09 01 	lds	r24, 0x0109
 67e:	8f 5f       	subi	r24, 0xFF	; 255
 680:	80 93 09 01 	sts	0x0109, r24
	if(num_overflows % 4 == 0){
 684:	80 91 09 01 	lds	r24, 0x0109
 688:	83 70       	andi	r24, 0x03	; 3
 68a:	09 f5       	brne	.+66     	; 0x6ce <__vector_9+0x114>
		seconds++;
 68c:	80 91 08 01 	lds	r24, 0x0108
 690:	8f 5f       	subi	r24, 0xFF	; 255
 692:	80 93 08 01 	sts	0x0108, r24
		if(seconds == 60){
 696:	80 91 08 01 	lds	r24, 0x0108
 69a:	8c 33       	cpi	r24, 0x3C	; 60
 69c:	c1 f4       	brne	.+48     	; 0x6ce <__vector_9+0x114>
			seconds = 0;
 69e:	10 92 08 01 	sts	0x0108, r1
			minutes++;
 6a2:	80 91 01 01 	lds	r24, 0x0101
 6a6:	8f 5f       	subi	r24, 0xFF	; 255
 6a8:	80 93 01 01 	sts	0x0101, r24
			if(minutes == 60){
 6ac:	80 91 01 01 	lds	r24, 0x0101
 6b0:	8c 33       	cpi	r24, 0x3C	; 60
 6b2:	69 f4       	brne	.+26     	; 0x6ce <__vector_9+0x114>
				minutes = 0;
 6b4:	10 92 01 01 	sts	0x0101, r1
				hours++;
 6b8:	80 91 00 01 	lds	r24, 0x0100
 6bc:	8f 5f       	subi	r24, 0xFF	; 255
 6be:	80 93 00 01 	sts	0x0100, r24
				if(hours == 24){
 6c2:	80 91 00 01 	lds	r24, 0x0100
 6c6:	88 31       	cpi	r24, 0x18	; 24
 6c8:	11 f4       	brne	.+4      	; 0x6ce <__vector_9+0x114>
					hours = 0;
 6ca:	10 92 00 01 	sts	0x0100, r1
				}
			}
		}
	}
}
 6ce:	ff 91       	pop	r31
 6d0:	ef 91       	pop	r30
 6d2:	bf 91       	pop	r27
 6d4:	af 91       	pop	r26
 6d6:	9f 91       	pop	r25
 6d8:	8f 91       	pop	r24
 6da:	7f 91       	pop	r23
 6dc:	6f 91       	pop	r22
 6de:	5f 91       	pop	r21
 6e0:	4f 91       	pop	r20
 6e2:	3f 91       	pop	r19
 6e4:	2f 91       	pop	r18
 6e6:	0f 90       	pop	r0
 6e8:	0f be       	out	0x3f, r0	; 63
 6ea:	0f 90       	pop	r0
 6ec:	1f 90       	pop	r1
 6ee:	18 95       	reti

000006f0 <main>:

int main(void){
	DDRB = 0x2F; //Set D/C, RST#, CS#, MOSI, SCK as Output
 6f0:	8f e2       	ldi	r24, 0x2F	; 47
 6f2:	84 b9       	out	0x04, r24	; 4
	DDRD = 0x00; //PIND3=BUTTON_A, PIND2=BUTTON_B, PIND3=BUTTIONC
 6f4:	1a b8       	out	0x0a, r1	; 10
	
	RTCInit();
 6f6:	0e 94 c7 02 	call	0x58e	; 0x58e <RTCInit>
	// Turn interrupts on.
	sei();
 6fa:	78 94       	sei
	
	//set sleep mode to minimum power while allowing interrupt
	set_sleep_mode(SLEEP_MODE_PWR_SAVE);
 6fc:	83 b7       	in	r24, 0x33	; 51
 6fe:	81 7f       	andi	r24, 0xF1	; 241
 700:	86 60       	ori	r24, 0x06	; 6
 702:	83 bf       	out	0x33, r24	; 51
	PCICR |= _BV(PCIE2); //PIN CHANGE INTERRUPT CONTROL REGISTER (PIN BLOC PCINT16-23)
 704:	e8 e6       	ldi	r30, 0x68	; 104
 706:	f0 e0       	ldi	r31, 0x00	; 0
 708:	80 81       	ld	r24, Z
 70a:	84 60       	ori	r24, 0x04	; 4
 70c:	80 83       	st	Z, r24
	PCMSK2 |= _BV(PCINT18); //PIN CHANGE interrupt MASK activate pin for BUTTON_B
 70e:	ed e6       	ldi	r30, 0x6D	; 109
 710:	f0 e0       	ldi	r31, 0x00	; 0
 712:	80 81       	ld	r24, Z
 714:	84 60       	ori	r24, 0x04	; 4
 716:	80 83       	st	Z, r24
	
	//initialize master SPI
	SPIMasterInit();
 718:	0e 94 53 00 	call	0xa6	; 0xa6 <SPIMasterInit>

	// Display reset routine (before initialization)
	PORTB |= 0x02;	// Initially set RST HIGH
 71c:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 71e:	81 ee       	ldi	r24, 0xE1	; 225
 720:	94 e0       	ldi	r25, 0x04	; 4
 722:	01 97       	sbiw	r24, 0x01	; 1
 724:	f1 f7       	brne	.-4      	; 0x722 <main+0x32>
 726:	00 c0       	rjmp	.+0      	; 0x728 <main+0x38>
 728:	00 00       	nop
	_delay_ms(5);	// VDD (3.3V) goes high at start, lets just chill for 5 ms
	PORTB &= 0xFC;	// Bring RST low, reset the display
 72a:	85 b1       	in	r24, 0x05	; 5
 72c:	8c 7f       	andi	r24, 0xFC	; 252
 72e:	85 b9       	out	0x05, r24	; 5
 730:	83 ec       	ldi	r24, 0xC3	; 195
 732:	99 e0       	ldi	r25, 0x09	; 9
 734:	01 97       	sbiw	r24, 0x01	; 1
 736:	f1 f7       	brne	.-4      	; 0x734 <main+0x44>
 738:	00 c0       	rjmp	.+0      	; 0x73a <main+0x4a>
 73a:	00 00       	nop
	_delay_ms(10);	// wait 10ms
	PORTB |= 0x02;	// Set RST HIGH, bring out of reset
 73c:	29 9a       	sbi	0x05, 1	; 5
	
	
	// Display initialization routine (after reset)
	send_command(0x8D); //set charge pump
 73e:	8d e8       	ldi	r24, 0x8D	; 141
 740:	0e 94 61 00 	call	0xc2	; 0xc2 <send_command>
	send_command(0x14); //to some setting that's default in the sparkfun arduino library
 744:	84 e1       	ldi	r24, 0x14	; 20
 746:	0e 94 61 00 	call	0xc2	; 0xc2 <send_command>
	
	send_command(0xAF); //turn the display on
 74a:	8f ea       	ldi	r24, 0xAF	; 175
 74c:	0e 94 61 00 	call	0xc2	; 0xc2 <send_command>
	
	send_command(0xB0); // sets to memory page 0 (0xB0 | desired page number)
 750:	80 eb       	ldi	r24, 0xB0	; 176
 752:	0e 94 61 00 	call	0xc2	; 0xc2 <send_command>
	
	uint8_t j=0;
	for(j=0;j<6;j++){
 756:	d0 e0       	ldi	r29, 0x00	; 0
	send_command(0xB0 | j);
	uint8_t i=0;
	for(i=0;i<128;i++){
 758:	10 e0       	ldi	r17, 0x00	; 0
	
	send_command(0xB0); // sets to memory page 0 (0xB0 | desired page number)
	
	uint8_t j=0;
	for(j=0;j<6;j++){
	send_command(0xB0 | j);
 75a:	8d 2f       	mov	r24, r29
 75c:	80 6b       	ori	r24, 0xB0	; 176
 75e:	0e 94 61 00 	call	0xc2	; 0xc2 <send_command>
	uint8_t i=0;
	for(i=0;i<128;i++){
 762:	c1 2f       	mov	r28, r17
	send_data(i%16);
 764:	8c 2f       	mov	r24, r28
 766:	8f 70       	andi	r24, 0x0F	; 15
 768:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	
	uint8_t j=0;
	for(j=0;j<6;j++){
	send_command(0xB0 | j);
	uint8_t i=0;
	for(i=0;i<128;i++){
 76c:	cf 5f       	subi	r28, 0xFF	; 255
 76e:	c0 38       	cpi	r28, 0x80	; 128
 770:	c9 f7       	brne	.-14     	; 0x764 <main+0x74>
	send_command(0xAF); //turn the display on
	
	send_command(0xB0); // sets to memory page 0 (0xB0 | desired page number)
	
	uint8_t j=0;
	for(j=0;j<6;j++){
 772:	df 5f       	subi	r29, 0xFF	; 255
 774:	d6 30       	cpi	r29, 0x06	; 6
 776:	89 f7       	brne	.-30     	; 0x75a <main+0x6a>
	while(1){




		sleep_mode();
 778:	83 b7       	in	r24, 0x33	; 51
 77a:	81 60       	ori	r24, 0x01	; 1
 77c:	83 bf       	out	0x33, r24	; 51
 77e:	88 95       	sleep
 780:	83 b7       	in	r24, 0x33	; 51
 782:	8e 7f       	andi	r24, 0xFE	; 254
 784:	83 bf       	out	0x33, r24	; 51
 786:	f8 cf       	rjmp	.-16     	; 0x778 <main+0x88>

00000788 <__divmodhi4>:
 788:	97 fb       	bst	r25, 7
 78a:	07 2e       	mov	r0, r23
 78c:	16 f4       	brtc	.+4      	; 0x792 <__divmodhi4+0xa>
 78e:	00 94       	com	r0
 790:	07 d0       	rcall	.+14     	; 0x7a0 <__divmodhi4_neg1>
 792:	77 fd       	sbrc	r23, 7
 794:	09 d0       	rcall	.+18     	; 0x7a8 <__divmodhi4_neg2>
 796:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <__udivmodhi4>
 79a:	07 fc       	sbrc	r0, 7
 79c:	05 d0       	rcall	.+10     	; 0x7a8 <__divmodhi4_neg2>
 79e:	3e f4       	brtc	.+14     	; 0x7ae <__divmodhi4_exit>

000007a0 <__divmodhi4_neg1>:
 7a0:	90 95       	com	r25
 7a2:	81 95       	neg	r24
 7a4:	9f 4f       	sbci	r25, 0xFF	; 255
 7a6:	08 95       	ret

000007a8 <__divmodhi4_neg2>:
 7a8:	70 95       	com	r23
 7aa:	61 95       	neg	r22
 7ac:	7f 4f       	sbci	r23, 0xFF	; 255

000007ae <__divmodhi4_exit>:
 7ae:	08 95       	ret

000007b0 <__udivmodhi4>:
 7b0:	aa 1b       	sub	r26, r26
 7b2:	bb 1b       	sub	r27, r27
 7b4:	51 e1       	ldi	r21, 0x11	; 17
 7b6:	07 c0       	rjmp	.+14     	; 0x7c6 <__udivmodhi4_ep>

000007b8 <__udivmodhi4_loop>:
 7b8:	aa 1f       	adc	r26, r26
 7ba:	bb 1f       	adc	r27, r27
 7bc:	a6 17       	cp	r26, r22
 7be:	b7 07       	cpc	r27, r23
 7c0:	10 f0       	brcs	.+4      	; 0x7c6 <__udivmodhi4_ep>
 7c2:	a6 1b       	sub	r26, r22
 7c4:	b7 0b       	sbc	r27, r23

000007c6 <__udivmodhi4_ep>:
 7c6:	88 1f       	adc	r24, r24
 7c8:	99 1f       	adc	r25, r25
 7ca:	5a 95       	dec	r21
 7cc:	a9 f7       	brne	.-22     	; 0x7b8 <__udivmodhi4_loop>
 7ce:	80 95       	com	r24
 7d0:	90 95       	com	r25
 7d2:	bc 01       	movw	r22, r24
 7d4:	cd 01       	movw	r24, r26
 7d6:	08 95       	ret

000007d8 <_exit>:
 7d8:	f8 94       	cli

000007da <__stop_program>:
 7da:	ff cf       	rjmp	.-2      	; 0x7da <__stop_program>
