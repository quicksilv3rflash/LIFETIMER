
lifetimer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800100  00002f96  0000302a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002f96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  00800208  00800208  00003132  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003132  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000220  00000000  00000000  00003162  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000070cd  00000000  00000000  00003382  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000023a  00000000  00000000  0000a44f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e81  00000000  00000000  0000a689  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000059c  00000000  00000000  0000b50c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000065f  00000000  00000000  0000baa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000016b9  00000000  00000000  0000c107  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000210  00000000  00000000  0000d7c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 99 15 	jmp	0x2b32	; 0x2b32 <__vector_5>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 bb 15 	jmp	0x2b76	; 0x2b76 <__vector_9>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 e9       	ldi	r30, 0x96	; 150
      7c:	ff e2       	ldi	r31, 0x2F	; 47
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 30       	cpi	r26, 0x08	; 8
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	a8 e0       	ldi	r26, 0x08	; 8
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a7 32       	cpi	r26, 0x27	; 39
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 18 17 	call	0x2e30	; 0x2e30 <main>
      9e:	0c 94 c9 17 	jmp	0x2f92	; 0x2f92 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SPIMasterInit>:

//SPI init
void SPIMasterInit(void)
{
	//set MOSI, SCK and SS as output
	DDRB |= (1<<PB3)|(1<<PB5)|(1<<PB2);
      a6:	84 b1       	in	r24, 0x04	; 4
      a8:	8c 62       	ori	r24, 0x2C	; 44
      aa:	84 b9       	out	0x04, r24	; 4
	//set SS to high
	PORTB |= (1<<PB2);
      ac:	2a 9a       	sbi	0x05, 2	; 5
	//enable master SPI at clock rate Fck/16
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
      ae:	81 e5       	ldi	r24, 0x51	; 81
      b0:	8c bd       	out	0x2c, r24	; 44
      b2:	08 95       	ret

000000b4 <SPIMasterSend>:

//master send function
void SPIMasterSend(uint8_t data)
{
	//select slave
	PORTB &= ~(1<<PB2);
      b4:	2a 98       	cbi	0x05, 2	; 5
	//send data
	SPDR=data;
      b6:	8e bd       	out	0x2e, r24	; 46
	//wait for transmition complete
	while (!(SPSR &(1<<SPIF)));
      b8:	0d b4       	in	r0, 0x2d	; 45
      ba:	07 fe       	sbrs	r0, 7
      bc:	fd cf       	rjmp	.-6      	; 0xb8 <SPIMasterSend+0x4>
	//SS to high
	PORTB |= (1<<PB2);
      be:	2a 9a       	sbi	0x05, 2	; 5
      c0:	08 95       	ret

000000c2 <send_command>:
}

//send_command(uint8_t); send COMMAND to the screen
void send_command(uint8_t data){
PORTB &= 0xFE; // pull PORTB0 low to indicate command
      c2:	28 98       	cbi	0x05, 0	; 5
SPIMasterSend(data);
      c4:	0e 94 5a 00 	call	0xb4	; 0xb4 <SPIMasterSend>
PORTB |= 0x01; // pull PORTB0 high to indicate data
      c8:	28 9a       	sbi	0x05, 0	; 5
      ca:	08 95       	ret

000000cc <send_data>:
}


//send_data(uint8_t); send DATA to the screen
void send_data(uint8_t data){
PORTB |= 0x01; // pull PORTB0 high to indicate data
      cc:	28 9a       	sbi	0x05, 0	; 5
SPIMasterSend(data);
      ce:	0e 94 5a 00 	call	0xb4	; 0xb4 <SPIMasterSend>
PORTB &= 0xFE; // pull PORTB0 low to indicate command	
      d2:	28 98       	cbi	0x05, 0	; 5
      d4:	08 95       	ret

000000d6 <draw_zero>:


//below are draw functions. all start with a space.

void draw_zero(void){
	send_data(0x00);
      d6:	80 e0       	ldi	r24, 0x00	; 0
      d8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
      dc:	8e e3       	ldi	r24, 0x3E	; 62
      de:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
      e2:	82 e2       	ldi	r24, 0x22	; 34
      e4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
      e8:	8e e3       	ldi	r24, 0x3E	; 62
      ea:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
      ee:	08 95       	ret

000000f0 <draw_one>:
}

void draw_one(void){
	send_data(0x00);
      f0:	80 e0       	ldi	r24, 0x00	; 0
      f2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
      f6:	80 e0       	ldi	r24, 0x00	; 0
      f8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
      fc:	80 e0       	ldi	r24, 0x00	; 0
      fe:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     102:	8e e3       	ldi	r24, 0x3E	; 62
     104:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     108:	08 95       	ret

0000010a <draw_two>:
}

void draw_two(void){
	send_data(0x00);
     10a:	80 e0       	ldi	r24, 0x00	; 0
     10c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3A);
     110:	8a e3       	ldi	r24, 0x3A	; 58
     112:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
     116:	8a e2       	ldi	r24, 0x2A	; 42
     118:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2E);
     11c:	8e e2       	ldi	r24, 0x2E	; 46
     11e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     122:	08 95       	ret

00000124 <draw_three>:
}

void draw_three(void){
	send_data(0x00);
     124:	80 e0       	ldi	r24, 0x00	; 0
     126:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
     12a:	8a e2       	ldi	r24, 0x2A	; 42
     12c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
     130:	8a e2       	ldi	r24, 0x2A	; 42
     132:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     136:	8e e3       	ldi	r24, 0x3E	; 62
     138:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     13c:	08 95       	ret

0000013e <draw_four>:
}

void draw_four(void){
	send_data(0x00);
     13e:	80 e0       	ldi	r24, 0x00	; 0
     140:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0E);
     144:	8e e0       	ldi	r24, 0x0E	; 14
     146:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
     14a:	88 e0       	ldi	r24, 0x08	; 8
     14c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     150:	8e e3       	ldi	r24, 0x3E	; 62
     152:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     156:	08 95       	ret

00000158 <draw_five>:
}

void draw_five(void){
	send_data(0x00);
     158:	80 e0       	ldi	r24, 0x00	; 0
     15a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2E);
     15e:	8e e2       	ldi	r24, 0x2E	; 46
     160:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
     164:	8a e2       	ldi	r24, 0x2A	; 42
     166:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3A);
     16a:	8a e3       	ldi	r24, 0x3A	; 58
     16c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     170:	08 95       	ret

00000172 <draw_six>:
}

void draw_six(void){
	send_data(0x00);
     172:	80 e0       	ldi	r24, 0x00	; 0
     174:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     178:	8e e3       	ldi	r24, 0x3E	; 62
     17a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
     17e:	8a e2       	ldi	r24, 0x2A	; 42
     180:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3A);
     184:	8a e3       	ldi	r24, 0x3A	; 58
     186:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     18a:	08 95       	ret

0000018c <draw_seven>:
}

void draw_seven(void){
	send_data(0x00);
     18c:	80 e0       	ldi	r24, 0x00	; 0
     18e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
     192:	82 e0       	ldi	r24, 0x02	; 2
     194:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
     198:	82 e0       	ldi	r24, 0x02	; 2
     19a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     19e:	8e e3       	ldi	r24, 0x3E	; 62
     1a0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     1a4:	08 95       	ret

000001a6 <draw_eight>:
}

void draw_eight(void){
	send_data(0x00);
     1a6:	80 e0       	ldi	r24, 0x00	; 0
     1a8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     1ac:	8e e3       	ldi	r24, 0x3E	; 62
     1ae:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
     1b2:	8a e2       	ldi	r24, 0x2A	; 42
     1b4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     1b8:	8e e3       	ldi	r24, 0x3E	; 62
     1ba:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     1be:	08 95       	ret

000001c0 <draw_nine>:
}

void draw_nine(void){
	send_data(0x00);
     1c0:	80 e0       	ldi	r24, 0x00	; 0
     1c2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0E);
     1c6:	8e e0       	ldi	r24, 0x0E	; 14
     1c8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0A);
     1cc:	8a e0       	ldi	r24, 0x0A	; 10
     1ce:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     1d2:	8e e3       	ldi	r24, 0x3E	; 62
     1d4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     1d8:	08 95       	ret

000001da <draw_period>:
}

void draw_period(void){
	send_data(0x00);
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x20);
     1e0:	80 e2       	ldi	r24, 0x20	; 32
     1e2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     1e6:	08 95       	ret

000001e8 <draw_percent>:
}

//draw_percent(void); draws a percent symbol on the screen
void draw_percent(void){
	send_data(0x00);
     1e8:	80 e0       	ldi	r24, 0x00	; 0
     1ea:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     1ee:	8e e3       	ldi	r24, 0x3E	; 62
     1f0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
     1f4:	82 e2       	ldi	r24, 0x22	; 34
     1f6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     1fa:	80 e0       	ldi	r24, 0x00	; 0
     1fc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x42);
     200:	82 e4       	ldi	r24, 0x42	; 66
     202:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x25);
     206:	85 e2       	ldi	r24, 0x25	; 37
     208:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x12);
     20c:	82 e1       	ldi	r24, 0x12	; 18
     20e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
     212:	88 e0       	ldi	r24, 0x08	; 8
     214:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x24);
     218:	84 e2       	ldi	r24, 0x24	; 36
     21a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x52);
     21e:	82 e5       	ldi	r24, 0x52	; 82
     220:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x21);
     224:	81 e2       	ldi	r24, 0x21	; 33
     226:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
     230:	82 e2       	ldi	r24, 0x22	; 34
     232:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     236:	8e e3       	ldi	r24, 0x3E	; 62
     238:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     23c:	08 95       	ret

0000023e <draw_top_zero>:
}

//the draw_top_x and draw_bottom_x commands are for big digits spanning two lines. digits start with 3 spaces and are 9 pixels wide.
void draw_top_zero(void){
	send_data(0x00);
     23e:	80 e0       	ldi	r24, 0x00	; 0
     240:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     244:	80 e0       	ldi	r24, 0x00	; 0
     246:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     24a:	80 e0       	ldi	r24, 0x00	; 0
     24c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFE);
     250:	8e ef       	ldi	r24, 0xFE	; 254
     252:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFE);
     256:	8e ef       	ldi	r24, 0xFE	; 254
     258:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFE);
     25c:	8e ef       	ldi	r24, 0xFE	; 254
     25e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0E);
     262:	8e e0       	ldi	r24, 0x0E	; 14
     264:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0E);
     268:	8e e0       	ldi	r24, 0x0E	; 14
     26a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0E);
     26e:	8e e0       	ldi	r24, 0x0E	; 14
     270:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFE);
     274:	8e ef       	ldi	r24, 0xFE	; 254
     276:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFE);
     27a:	8e ef       	ldi	r24, 0xFE	; 254
     27c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFE);
     280:	8e ef       	ldi	r24, 0xFE	; 254
     282:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     286:	08 95       	ret

00000288 <draw_top_one>:
}
void draw_top_one(void){
	send_data(0x00);
     288:	80 e0       	ldi	r24, 0x00	; 0
     28a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     29a:	80 e0       	ldi	r24, 0x00	; 0
     29c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     2a0:	80 e0       	ldi	r24, 0x00	; 0
     2a2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     2ac:	80 e0       	ldi	r24, 0x00	; 0
     2ae:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     2b2:	80 e0       	ldi	r24, 0x00	; 0
     2b4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     2b8:	80 e0       	ldi	r24, 0x00	; 0
     2ba:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFE);
     2be:	8e ef       	ldi	r24, 0xFE	; 254
     2c0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFE);
     2c4:	8e ef       	ldi	r24, 0xFE	; 254
     2c6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFE);
     2ca:	8e ef       	ldi	r24, 0xFE	; 254
     2cc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     2d0:	08 95       	ret

000002d2 <draw_top_two>:
}
void draw_top_two(void){
	send_data(0x00);
     2d2:	80 e0       	ldi	r24, 0x00	; 0
     2d4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x8E);
     2e4:	8e e8       	ldi	r24, 0x8E	; 142
     2e6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x8E);
     2ea:	8e e8       	ldi	r24, 0x8E	; 142
     2ec:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x8E);
     2f0:	8e e8       	ldi	r24, 0x8E	; 142
     2f2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x8E);
     2f6:	8e e8       	ldi	r24, 0x8E	; 142
     2f8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x8E);
     2fc:	8e e8       	ldi	r24, 0x8E	; 142
     2fe:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x8E);
     302:	8e e8       	ldi	r24, 0x8E	; 142
     304:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFE);
     308:	8e ef       	ldi	r24, 0xFE	; 254
     30a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFE);
     30e:	8e ef       	ldi	r24, 0xFE	; 254
     310:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFE);
     314:	8e ef       	ldi	r24, 0xFE	; 254
     316:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     31a:	08 95       	ret

0000031c <draw_top_three>:
}
void draw_top_three(void){
	send_data(0x00);
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     322:	80 e0       	ldi	r24, 0x00	; 0
     324:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x8E);
     32e:	8e e8       	ldi	r24, 0x8E	; 142
     330:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x8E);
     334:	8e e8       	ldi	r24, 0x8E	; 142
     336:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x8E);
     33a:	8e e8       	ldi	r24, 0x8E	; 142
     33c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x8E);
     340:	8e e8       	ldi	r24, 0x8E	; 142
     342:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x8E);
     346:	8e e8       	ldi	r24, 0x8E	; 142
     348:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x8E);
     34c:	8e e8       	ldi	r24, 0x8E	; 142
     34e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFE);
     352:	8e ef       	ldi	r24, 0xFE	; 254
     354:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFE);
     358:	8e ef       	ldi	r24, 0xFE	; 254
     35a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFE);
     35e:	8e ef       	ldi	r24, 0xFE	; 254
     360:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     364:	08 95       	ret

00000366 <draw_top_four>:
}
void draw_top_four(void){
	send_data(0x00);
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFE);
     378:	8e ef       	ldi	r24, 0xFE	; 254
     37a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFE);
     37e:	8e ef       	ldi	r24, 0xFE	; 254
     380:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFE);
     384:	8e ef       	ldi	r24, 0xFE	; 254
     386:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x80);
     38a:	80 e8       	ldi	r24, 0x80	; 128
     38c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x80);
     390:	80 e8       	ldi	r24, 0x80	; 128
     392:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x80);
     396:	80 e8       	ldi	r24, 0x80	; 128
     398:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFE);
     39c:	8e ef       	ldi	r24, 0xFE	; 254
     39e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFE);
     3a2:	8e ef       	ldi	r24, 0xFE	; 254
     3a4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFE);
     3a8:	8e ef       	ldi	r24, 0xFE	; 254
     3aa:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     3ae:	08 95       	ret

000003b0 <draw_top_five>:
}
void draw_top_five(void){
	send_data(0x00);
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     3b6:	80 e0       	ldi	r24, 0x00	; 0
     3b8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     3bc:	80 e0       	ldi	r24, 0x00	; 0
     3be:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFE);
     3c2:	8e ef       	ldi	r24, 0xFE	; 254
     3c4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFE);
     3c8:	8e ef       	ldi	r24, 0xFE	; 254
     3ca:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFE);
     3ce:	8e ef       	ldi	r24, 0xFE	; 254
     3d0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x8E);
     3d4:	8e e8       	ldi	r24, 0x8E	; 142
     3d6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x8E);
     3da:	8e e8       	ldi	r24, 0x8E	; 142
     3dc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x8E);
     3e0:	8e e8       	ldi	r24, 0x8E	; 142
     3e2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x8E);
     3e6:	8e e8       	ldi	r24, 0x8E	; 142
     3e8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x8E);
     3ec:	8e e8       	ldi	r24, 0x8E	; 142
     3ee:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x8E);
     3f2:	8e e8       	ldi	r24, 0x8E	; 142
     3f4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     3f8:	08 95       	ret

000003fa <draw_top_six>:
}
void draw_top_six(void){
	send_data(0x00);
     3fa:	80 e0       	ldi	r24, 0x00	; 0
     3fc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     406:	80 e0       	ldi	r24, 0x00	; 0
     408:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFE);
     40c:	8e ef       	ldi	r24, 0xFE	; 254
     40e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFE);
     412:	8e ef       	ldi	r24, 0xFE	; 254
     414:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFE);
     418:	8e ef       	ldi	r24, 0xFE	; 254
     41a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x8E);
     41e:	8e e8       	ldi	r24, 0x8E	; 142
     420:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x8E);
     424:	8e e8       	ldi	r24, 0x8E	; 142
     426:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x8E);
     42a:	8e e8       	ldi	r24, 0x8E	; 142
     42c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x8E);
     430:	8e e8       	ldi	r24, 0x8E	; 142
     432:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x8E);
     436:	8e e8       	ldi	r24, 0x8E	; 142
     438:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x8E);
     43c:	8e e8       	ldi	r24, 0x8E	; 142
     43e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     442:	08 95       	ret

00000444 <draw_top_seven>:
}
void draw_top_seven(void){
	send_data(0x00);
     444:	80 e0       	ldi	r24, 0x00	; 0
     446:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0E);
     456:	8e e0       	ldi	r24, 0x0E	; 14
     458:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0E);
     45c:	8e e0       	ldi	r24, 0x0E	; 14
     45e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0E);
     462:	8e e0       	ldi	r24, 0x0E	; 14
     464:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0E);
     468:	8e e0       	ldi	r24, 0x0E	; 14
     46a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0E);
     46e:	8e e0       	ldi	r24, 0x0E	; 14
     470:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0E);
     474:	8e e0       	ldi	r24, 0x0E	; 14
     476:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFE);
     47a:	8e ef       	ldi	r24, 0xFE	; 254
     47c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFE);
     480:	8e ef       	ldi	r24, 0xFE	; 254
     482:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFE);
     486:	8e ef       	ldi	r24, 0xFE	; 254
     488:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     48c:	08 95       	ret

0000048e <draw_top_eight>:
}
void draw_top_eight(void){
	send_data(0x00);
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFE);
     4a0:	8e ef       	ldi	r24, 0xFE	; 254
     4a2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFE);
     4a6:	8e ef       	ldi	r24, 0xFE	; 254
     4a8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFE);
     4ac:	8e ef       	ldi	r24, 0xFE	; 254
     4ae:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x8E);
     4b2:	8e e8       	ldi	r24, 0x8E	; 142
     4b4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x8E);
     4b8:	8e e8       	ldi	r24, 0x8E	; 142
     4ba:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x8E);
     4be:	8e e8       	ldi	r24, 0x8E	; 142
     4c0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFE);
     4c4:	8e ef       	ldi	r24, 0xFE	; 254
     4c6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFE);
     4ca:	8e ef       	ldi	r24, 0xFE	; 254
     4cc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFE);
     4d0:	8e ef       	ldi	r24, 0xFE	; 254
     4d2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     4d6:	08 95       	ret

000004d8 <draw_top_nine>:
}
void draw_top_nine(void){
	send_data(0x00);
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     4e4:	80 e0       	ldi	r24, 0x00	; 0
     4e6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFE);
     4ea:	8e ef       	ldi	r24, 0xFE	; 254
     4ec:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFE);
     4f0:	8e ef       	ldi	r24, 0xFE	; 254
     4f2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFE);
     4f6:	8e ef       	ldi	r24, 0xFE	; 254
     4f8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x8E);
     4fc:	8e e8       	ldi	r24, 0x8E	; 142
     4fe:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x8E);
     502:	8e e8       	ldi	r24, 0x8E	; 142
     504:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x8E);
     508:	8e e8       	ldi	r24, 0x8E	; 142
     50a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFE);
     50e:	8e ef       	ldi	r24, 0xFE	; 254
     510:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFE);
     514:	8e ef       	ldi	r24, 0xFE	; 254
     516:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFE);
     51a:	8e ef       	ldi	r24, 0xFE	; 254
     51c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     520:	08 95       	ret

00000522 <draw_bottom_zero>:
}
	
	
void draw_bottom_zero(void){
	send_data(0x00);
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     528:	80 e0       	ldi	r24, 0x00	; 0
     52a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFF);
     534:	8f ef       	ldi	r24, 0xFF	; 255
     536:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFF);
     53a:	8f ef       	ldi	r24, 0xFF	; 255
     53c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFF);
     540:	8f ef       	ldi	r24, 0xFF	; 255
     542:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xE0);
     546:	80 ee       	ldi	r24, 0xE0	; 224
     548:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xE0);
     54c:	80 ee       	ldi	r24, 0xE0	; 224
     54e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xE0);
     552:	80 ee       	ldi	r24, 0xE0	; 224
     554:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFF);
     558:	8f ef       	ldi	r24, 0xFF	; 255
     55a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFF);
     55e:	8f ef       	ldi	r24, 0xFF	; 255
     560:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFF);
     564:	8f ef       	ldi	r24, 0xFF	; 255
     566:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     56a:	08 95       	ret

0000056c <draw_bottom_one>:
}
void draw_bottom_one(void){
	send_data(0x00);
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFF);
     5a2:	8f ef       	ldi	r24, 0xFF	; 255
     5a4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFF);
     5a8:	8f ef       	ldi	r24, 0xFF	; 255
     5aa:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFF);
     5ae:	8f ef       	ldi	r24, 0xFF	; 255
     5b0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     5b4:	08 95       	ret

000005b6 <draw_bottom_two>:
}
void draw_bottom_two(void){
	send_data(0x00);
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     5c2:	80 e0       	ldi	r24, 0x00	; 0
     5c4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFF);
     5c8:	8f ef       	ldi	r24, 0xFF	; 255
     5ca:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFF);
     5ce:	8f ef       	ldi	r24, 0xFF	; 255
     5d0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFF);
     5d4:	8f ef       	ldi	r24, 0xFF	; 255
     5d6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xE3);
     5da:	83 ee       	ldi	r24, 0xE3	; 227
     5dc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xE3);
     5e0:	83 ee       	ldi	r24, 0xE3	; 227
     5e2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xE3);
     5e6:	83 ee       	ldi	r24, 0xE3	; 227
     5e8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xE3);
     5ec:	83 ee       	ldi	r24, 0xE3	; 227
     5ee:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xE3);
     5f2:	83 ee       	ldi	r24, 0xE3	; 227
     5f4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xE3);
     5f8:	83 ee       	ldi	r24, 0xE3	; 227
     5fa:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     5fe:	08 95       	ret

00000600 <draw_bottom_three>:
}
void draw_bottom_three(void){
	send_data(0x00);
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     60c:	80 e0       	ldi	r24, 0x00	; 0
     60e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xE3);
     612:	83 ee       	ldi	r24, 0xE3	; 227
     614:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xE3);
     618:	83 ee       	ldi	r24, 0xE3	; 227
     61a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xE3);
     61e:	83 ee       	ldi	r24, 0xE3	; 227
     620:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xE3);
     624:	83 ee       	ldi	r24, 0xE3	; 227
     626:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xE3);
     62a:	83 ee       	ldi	r24, 0xE3	; 227
     62c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xE3);
     630:	83 ee       	ldi	r24, 0xE3	; 227
     632:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFF);
     636:	8f ef       	ldi	r24, 0xFF	; 255
     638:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFF);
     63c:	8f ef       	ldi	r24, 0xFF	; 255
     63e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFF);
     642:	8f ef       	ldi	r24, 0xFF	; 255
     644:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     648:	08 95       	ret

0000064a <draw_bottom_four>:
}
void draw_bottom_four(void){
	send_data(0x00);
     64a:	80 e0       	ldi	r24, 0x00	; 0
     64c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x03);
     65c:	83 e0       	ldi	r24, 0x03	; 3
     65e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x03);
     662:	83 e0       	ldi	r24, 0x03	; 3
     664:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x03);
     668:	83 e0       	ldi	r24, 0x03	; 3
     66a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x03);
     66e:	83 e0       	ldi	r24, 0x03	; 3
     670:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x03);
     674:	83 e0       	ldi	r24, 0x03	; 3
     676:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x03);
     67a:	83 e0       	ldi	r24, 0x03	; 3
     67c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFF);
     680:	8f ef       	ldi	r24, 0xFF	; 255
     682:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFF);
     686:	8f ef       	ldi	r24, 0xFF	; 255
     688:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFF);
     68c:	8f ef       	ldi	r24, 0xFF	; 255
     68e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     692:	08 95       	ret

00000694 <draw_bottom_five>:
}
void draw_bottom_five(void){
	send_data(0x00);
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xE3);
     6a6:	83 ee       	ldi	r24, 0xE3	; 227
     6a8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xE3);
     6ac:	83 ee       	ldi	r24, 0xE3	; 227
     6ae:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xE3);
     6b2:	83 ee       	ldi	r24, 0xE3	; 227
     6b4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xE3);
     6b8:	83 ee       	ldi	r24, 0xE3	; 227
     6ba:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xE3);
     6be:	83 ee       	ldi	r24, 0xE3	; 227
     6c0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xE3);
     6c4:	83 ee       	ldi	r24, 0xE3	; 227
     6c6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFF);
     6ca:	8f ef       	ldi	r24, 0xFF	; 255
     6cc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFF);
     6d0:	8f ef       	ldi	r24, 0xFF	; 255
     6d2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFF);
     6d6:	8f ef       	ldi	r24, 0xFF	; 255
     6d8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     6dc:	08 95       	ret

000006de <draw_bottom_six>:
}
void draw_bottom_six(void){
	send_data(0x00);
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFF);
     6f0:	8f ef       	ldi	r24, 0xFF	; 255
     6f2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFF);
     6f6:	8f ef       	ldi	r24, 0xFF	; 255
     6f8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFF);
     6fc:	8f ef       	ldi	r24, 0xFF	; 255
     6fe:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xE3);
     702:	83 ee       	ldi	r24, 0xE3	; 227
     704:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xE3);
     708:	83 ee       	ldi	r24, 0xE3	; 227
     70a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xE3);
     70e:	83 ee       	ldi	r24, 0xE3	; 227
     710:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFF);
     714:	8f ef       	ldi	r24, 0xFF	; 255
     716:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFF);
     71a:	8f ef       	ldi	r24, 0xFF	; 255
     71c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFF);
     720:	8f ef       	ldi	r24, 0xFF	; 255
     722:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     726:	08 95       	ret

00000728 <draw_bottom_seven>:
}
void draw_bottom_seven(void){
	send_data(0x00);
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     72e:	80 e0       	ldi	r24, 0x00	; 0
     730:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     73a:	80 e0       	ldi	r24, 0x00	; 0
     73c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     740:	80 e0       	ldi	r24, 0x00	; 0
     742:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFF);
     75e:	8f ef       	ldi	r24, 0xFF	; 255
     760:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFF);
     764:	8f ef       	ldi	r24, 0xFF	; 255
     766:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFF);
     76a:	8f ef       	ldi	r24, 0xFF	; 255
     76c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     770:	08 95       	ret

00000772 <draw_bottom_eight>:
}
void draw_bottom_eight(void){
	send_data(0x00);
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFF);
     784:	8f ef       	ldi	r24, 0xFF	; 255
     786:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFF);
     78a:	8f ef       	ldi	r24, 0xFF	; 255
     78c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFF);
     790:	8f ef       	ldi	r24, 0xFF	; 255
     792:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xE3);
     796:	83 ee       	ldi	r24, 0xE3	; 227
     798:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xE3);
     79c:	83 ee       	ldi	r24, 0xE3	; 227
     79e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xE3);
     7a2:	83 ee       	ldi	r24, 0xE3	; 227
     7a4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFF);
     7a8:	8f ef       	ldi	r24, 0xFF	; 255
     7aa:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFF);
     7ae:	8f ef       	ldi	r24, 0xFF	; 255
     7b0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFF);
     7b4:	8f ef       	ldi	r24, 0xFF	; 255
     7b6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     7ba:	08 95       	ret

000007bc <draw_bottom_nine>:
}
void draw_bottom_nine(void){
	send_data(0x00);
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x03);
     7ce:	83 e0       	ldi	r24, 0x03	; 3
     7d0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x03);
     7d4:	83 e0       	ldi	r24, 0x03	; 3
     7d6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x03);
     7da:	83 e0       	ldi	r24, 0x03	; 3
     7dc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x03);
     7e0:	83 e0       	ldi	r24, 0x03	; 3
     7e2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x03);
     7e6:	83 e0       	ldi	r24, 0x03	; 3
     7e8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x03);
     7ec:	83 e0       	ldi	r24, 0x03	; 3
     7ee:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFF);
     7f2:	8f ef       	ldi	r24, 0xFF	; 255
     7f4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFF);
     7f8:	8f ef       	ldi	r24, 0xFF	; 255
     7fa:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0xFF);
     7fe:	8f ef       	ldi	r24, 0xFF	; 255
     800:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     804:	08 95       	ret

00000806 <draw_newordersfrom>:
	
	

//fills one line with them message "NEW ORDERS FROM"
void draw_newordersfrom(void){
	send_data(0x00);
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     812:	80 e0       	ldi	r24, 0x00	; 0
     814:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	
	//new
	send_data(0x3E);
     818:	8e e3       	ldi	r24, 0x3E	; 62
     81a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
     81e:	84 e0       	ldi	r24, 0x04	; 4
     820:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
     824:	88 e0       	ldi	r24, 0x08	; 8
     826:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     82a:	8e e3       	ldi	r24, 0x3E	; 62
     82c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     830:	80 e0       	ldi	r24, 0x00	; 0
     832:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     836:	8e e3       	ldi	r24, 0x3E	; 62
     838:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
     83c:	8a e2       	ldi	r24, 0x2A	; 42
     83e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     848:	8e e3       	ldi	r24, 0x3E	; 62
     84a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x10);
     84e:	80 e1       	ldi	r24, 0x10	; 16
     850:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
     854:	88 e0       	ldi	r24, 0x08	; 8
     856:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x10);
     85a:	80 e1       	ldi	r24, 0x10	; 16
     85c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     860:	8e e3       	ldi	r24, 0x3E	; 62
     862:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     866:	80 e0       	ldi	r24, 0x00	; 0
     868:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	//orders
	send_data(0x3E);
     878:	8e e3       	ldi	r24, 0x3E	; 62
     87a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
     87e:	82 e2       	ldi	r24, 0x22	; 34
     880:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     884:	8e e3       	ldi	r24, 0x3E	; 62
     886:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     890:	8e e3       	ldi	r24, 0x3E	; 62
     892:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x1A);
     896:	8a e1       	ldi	r24, 0x1A	; 26
     898:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2E);
     89c:	8e e2       	ldi	r24, 0x2E	; 46
     89e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     8a8:	8e e3       	ldi	r24, 0x3E	; 62
     8aa:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
     8ae:	82 e2       	ldi	r24, 0x22	; 34
     8b0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x1C);
     8b4:	8c e1       	ldi	r24, 0x1C	; 28
     8b6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     8c0:	8e e3       	ldi	r24, 0x3E	; 62
     8c2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
     8c6:	8a e2       	ldi	r24, 0x2A	; 42
     8c8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     8d2:	8e e3       	ldi	r24, 0x3E	; 62
     8d4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x1A);
     8d8:	8a e1       	ldi	r24, 0x1A	; 26
     8da:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2E);
     8de:	8e e2       	ldi	r24, 0x2E	; 46
     8e0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2C);
     8ea:	8c e2       	ldi	r24, 0x2C	; 44
     8ec:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
     8f0:	8a e2       	ldi	r24, 0x2A	; 42
     8f2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x1A);
     8f6:	8a e1       	ldi	r24, 0x1A	; 26
     8f8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	
	//from
	send_data(0x3E);
     90e:	8e e3       	ldi	r24, 0x3E	; 62
     910:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0A);
     914:	8a e0       	ldi	r24, 0x0A	; 10
     916:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0A);
     91a:	8a e0       	ldi	r24, 0x0A	; 10
     91c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     926:	8e e3       	ldi	r24, 0x3E	; 62
     928:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x1A);
     92c:	8a e1       	ldi	r24, 0x1A	; 26
     92e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2E);
     932:	8e e2       	ldi	r24, 0x2E	; 46
     934:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     93e:	8e e3       	ldi	r24, 0x3E	; 62
     940:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
     944:	82 e2       	ldi	r24, 0x22	; 34
     946:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     94a:	8e e3       	ldi	r24, 0x3E	; 62
     94c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     956:	8e e3       	ldi	r24, 0x3E	; 62
     958:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
     95c:	84 e0       	ldi	r24, 0x04	; 4
     95e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
     962:	88 e0       	ldi	r24, 0x08	; 8
     964:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
     968:	84 e0       	ldi	r24, 0x04	; 4
     96a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     96e:	8e e3       	ldi	r24, 0x3E	; 62
     970:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     986:	08 95       	ret

00000988 <draw_machineempire>:
		
}

//fills one line with the message "MACHINE EMPIRE"
void draw_machineempire(void){
	send_data(0x00);
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     9a0:	80 e0       	ldi	r24, 0x00	; 0
     9a2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	//machine
	send_data(0x3E);
     9ac:	8e e3       	ldi	r24, 0x3E	; 62
     9ae:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
     9b2:	84 e0       	ldi	r24, 0x04	; 4
     9b4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
     9b8:	88 e0       	ldi	r24, 0x08	; 8
     9ba:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
     9be:	84 e0       	ldi	r24, 0x04	; 4
     9c0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     9c4:	8e e3       	ldi	r24, 0x3E	; 62
     9c6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     9d0:	8e e3       	ldi	r24, 0x3E	; 62
     9d2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0A);
     9d6:	8a e0       	ldi	r24, 0x0A	; 10
     9d8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     9dc:	8e e3       	ldi	r24, 0x3E	; 62
     9de:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     9e8:	8e e3       	ldi	r24, 0x3E	; 62
     9ea:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
     9ee:	82 e2       	ldi	r24, 0x22	; 34
     9f0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     9fa:	8e e3       	ldi	r24, 0x3E	; 62
     9fc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
     a00:	88 e0       	ldi	r24, 0x08	; 8
     a02:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     a06:	8e e3       	ldi	r24, 0x3E	; 62
     a08:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     a12:	8e e3       	ldi	r24, 0x3E	; 62
     a14:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     a1e:	8e e3       	ldi	r24, 0x3E	; 62
     a20:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
     a24:	84 e0       	ldi	r24, 0x04	; 4
     a26:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
     a2a:	88 e0       	ldi	r24, 0x08	; 8
     a2c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     a30:	8e e3       	ldi	r24, 0x3E	; 62
     a32:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     a3c:	8e e3       	ldi	r24, 0x3E	; 62
     a3e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
     a42:	8a e2       	ldi	r24, 0x2A	; 42
     a44:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	
	
	//empire
	send_data(0x3E);
     a66:	8e e3       	ldi	r24, 0x3E	; 62
     a68:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
     a6c:	8a e2       	ldi	r24, 0x2A	; 42
     a6e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     a78:	8e e3       	ldi	r24, 0x3E	; 62
     a7a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
     a7e:	84 e0       	ldi	r24, 0x04	; 4
     a80:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
     a84:	88 e0       	ldi	r24, 0x08	; 8
     a86:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
     a8a:	84 e0       	ldi	r24, 0x04	; 4
     a8c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     a90:	8e e3       	ldi	r24, 0x3E	; 62
     a92:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     a9c:	8e e3       	ldi	r24, 0x3E	; 62
     a9e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0A);
     aa2:	8a e0       	ldi	r24, 0x0A	; 10
     aa4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0E);
     aa8:	8e e0       	ldi	r24, 0x0E	; 14
     aaa:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     ab4:	8e e3       	ldi	r24, 0x3E	; 62
     ab6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     ac0:	8e e3       	ldi	r24, 0x3E	; 62
     ac2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x1A);
     ac6:	8a e1       	ldi	r24, 0x1A	; 26
     ac8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2E);
     acc:	8e e2       	ldi	r24, 0x2E	; 46
     ace:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     ad8:	8e e3       	ldi	r24, 0x3E	; 62
     ada:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
     ade:	8a e2       	ldi	r24, 0x2A	; 42
     ae0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     b08:	08 95       	ret

00000b0a <draw_highcommand>:
	
}

//fills one line with the message "HIGH COMMAND"
void draw_highcommand(void){
	send_data(0x00);
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     b2e:	80 e0       	ldi	r24, 0x00	; 0
     b30:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	//high
	send_data(0x3E);
     b3a:	8e e3       	ldi	r24, 0x3E	; 62
     b3c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
     b40:	88 e0       	ldi	r24, 0x08	; 8
     b42:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     b46:	8e e3       	ldi	r24, 0x3E	; 62
     b48:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     b52:	8e e3       	ldi	r24, 0x3E	; 62
     b54:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     b5e:	8e e3       	ldi	r24, 0x3E	; 62
     b60:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
     b64:	82 e2       	ldi	r24, 0x22	; 34
     b66:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3A);
     b6a:	8a e3       	ldi	r24, 0x3A	; 58
     b6c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     b76:	8e e3       	ldi	r24, 0x3E	; 62
     b78:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
     b7c:	88 e0       	ldi	r24, 0x08	; 8
     b7e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     b82:	8e e3       	ldi	r24, 0x3E	; 62
     b84:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     b9a:	80 e0       	ldi	r24, 0x00	; 0
     b9c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	//command
	send_data(0x3E);
     ba6:	8e e3       	ldi	r24, 0x3E	; 62
     ba8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
     bac:	82 e2       	ldi	r24, 0x22	; 34
     bae:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     bb8:	8e e3       	ldi	r24, 0x3E	; 62
     bba:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
     bbe:	82 e2       	ldi	r24, 0x22	; 34
     bc0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     bc4:	8e e3       	ldi	r24, 0x3E	; 62
     bc6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     bd0:	8e e3       	ldi	r24, 0x3E	; 62
     bd2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
     bd6:	84 e0       	ldi	r24, 0x04	; 4
     bd8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
     bdc:	88 e0       	ldi	r24, 0x08	; 8
     bde:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     be8:	8e e3       	ldi	r24, 0x3E	; 62
     bea:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     bf4:	8e e3       	ldi	r24, 0x3E	; 62
     bf6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
     bfa:	84 e0       	ldi	r24, 0x04	; 4
     bfc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
     c00:	88 e0       	ldi	r24, 0x08	; 8
     c02:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
     c06:	84 e0       	ldi	r24, 0x04	; 4
     c08:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     c0c:	8e e3       	ldi	r24, 0x3E	; 62
     c0e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     c18:	8e e3       	ldi	r24, 0x3E	; 62
     c1a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0A);
     c1e:	8a e0       	ldi	r24, 0x0A	; 10
     c20:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     c24:	8e e3       	ldi	r24, 0x3E	; 62
     c26:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     c30:	8e e3       	ldi	r24, 0x3E	; 62
     c32:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
     c36:	84 e0       	ldi	r24, 0x04	; 4
     c38:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
     c3c:	88 e0       	ldi	r24, 0x08	; 8
     c3e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     c42:	8e e3       	ldi	r24, 0x3E	; 62
     c44:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     c4e:	8e e3       	ldi	r24, 0x3E	; 62
     c50:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
     c54:	82 e2       	ldi	r24, 0x22	; 34
     c56:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x1C);
     c5a:	8c e1       	ldi	r24, 0x1C	; 28
     c5c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     c6c:	80 e0       	ldi	r24, 0x00	; 0
     c6e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     c8a:	08 95       	ret

00000c8c <draw_timeisrunningout>:
		
}
//fills one line with the message "TIME IS RUNNING OUT"
void draw_timeisrunningout(void){
	//time
	send_data(0x02);
     c8c:	82 e0       	ldi	r24, 0x02	; 2
     c8e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     c92:	8e e3       	ldi	r24, 0x3E	; 62
     c94:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
     c98:	82 e0       	ldi	r24, 0x02	; 2
     c9a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     ca4:	8e e3       	ldi	r24, 0x3E	; 62
     ca6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     cb0:	8e e3       	ldi	r24, 0x3E	; 62
     cb2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
     cb6:	84 e0       	ldi	r24, 0x04	; 4
     cb8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
     cbc:	88 e0       	ldi	r24, 0x08	; 8
     cbe:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
     cc2:	84 e0       	ldi	r24, 0x04	; 4
     cc4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     cc8:	8e e3       	ldi	r24, 0x3E	; 62
     cca:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     cd4:	8e e3       	ldi	r24, 0x3E	; 62
     cd6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
     cda:	8a e2       	ldi	r24, 0x2A	; 42
     cdc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	
	//is
	send_data(0x3E);
     cec:	8e e3       	ldi	r24, 0x3E	; 62
     cee:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2C);
     cf8:	8c e2       	ldi	r24, 0x2C	; 44
     cfa:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
     cfe:	8a e2       	ldi	r24, 0x2A	; 42
     d00:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x1A);
     d04:	8a e1       	ldi	r24, 0x1A	; 26
     d06:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	
	//running
	send_data(0x3E);
     d16:	8e e3       	ldi	r24, 0x3E	; 62
     d18:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x1A);
     d1c:	8a e1       	ldi	r24, 0x1A	; 26
     d1e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2E);
     d22:	8e e2       	ldi	r24, 0x2E	; 46
     d24:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     d2e:	8e e3       	ldi	r24, 0x3E	; 62
     d30:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x20);
     d34:	80 e2       	ldi	r24, 0x20	; 32
     d36:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     d3a:	8e e3       	ldi	r24, 0x3E	; 62
     d3c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     d46:	8e e3       	ldi	r24, 0x3E	; 62
     d48:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
     d4c:	84 e0       	ldi	r24, 0x04	; 4
     d4e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
     d52:	88 e0       	ldi	r24, 0x08	; 8
     d54:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     d58:	8e e3       	ldi	r24, 0x3E	; 62
     d5a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     d64:	8e e3       	ldi	r24, 0x3E	; 62
     d66:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
     d6a:	84 e0       	ldi	r24, 0x04	; 4
     d6c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
     d70:	88 e0       	ldi	r24, 0x08	; 8
     d72:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     d76:	8e e3       	ldi	r24, 0x3E	; 62
     d78:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     d7c:	80 e0       	ldi	r24, 0x00	; 0
     d7e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     d82:	8e e3       	ldi	r24, 0x3E	; 62
     d84:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     d8e:	8e e3       	ldi	r24, 0x3E	; 62
     d90:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
     d94:	84 e0       	ldi	r24, 0x04	; 4
     d96:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
     d9a:	88 e0       	ldi	r24, 0x08	; 8
     d9c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     da0:	8e e3       	ldi	r24, 0x3E	; 62
     da2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     dac:	8e e3       	ldi	r24, 0x3E	; 62
     dae:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
     db2:	82 e2       	ldi	r24, 0x22	; 34
     db4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3A);
     db8:	8a e3       	ldi	r24, 0x3A	; 58
     dba:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		//out
	send_data(0x00);
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     dca:	8e e3       	ldi	r24, 0x3E	; 62
     dcc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
     dd0:	82 e2       	ldi	r24, 0x22	; 34
     dd2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     dd6:	8e e3       	ldi	r24, 0x3E	; 62
     dd8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     de2:	8e e3       	ldi	r24, 0x3E	; 62
     de4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x20);
     de8:	80 e2       	ldi	r24, 0x20	; 32
     dea:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     dee:	8e e3       	ldi	r24, 0x3E	; 62
     df0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
     dfa:	82 e0       	ldi	r24, 0x02	; 2
     dfc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     e00:	8e e3       	ldi	r24, 0x3E	; 62
     e02:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
     e06:	82 e0       	ldi	r24, 0x02	; 2
     e08:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     e0c:	08 95       	ret

00000e0e <draw_digit>:
}

//draw digit selects the correct draw function for the given digit
void draw_digit(uint8_t digit){
	if(digit == 0){
     e0e:	81 11       	cpse	r24, r1
     e10:	03 c0       	rjmp	.+6      	; 0xe18 <draw_digit+0xa>
		draw_zero();
     e12:	0e 94 6b 00 	call	0xd6	; 0xd6 <draw_zero>
     e16:	08 95       	ret
		}else if(digit == 1){
     e18:	81 30       	cpi	r24, 0x01	; 1
     e1a:	19 f4       	brne	.+6      	; 0xe22 <draw_digit+0x14>
		draw_one();
     e1c:	0e 94 78 00 	call	0xf0	; 0xf0 <draw_one>
     e20:	08 95       	ret
		}else if(digit == 2){
     e22:	82 30       	cpi	r24, 0x02	; 2
     e24:	19 f4       	brne	.+6      	; 0xe2c <draw_digit+0x1e>
		draw_two();
     e26:	0e 94 85 00 	call	0x10a	; 0x10a <draw_two>
     e2a:	08 95       	ret
		}else if(digit == 3){
     e2c:	83 30       	cpi	r24, 0x03	; 3
     e2e:	19 f4       	brne	.+6      	; 0xe36 <draw_digit+0x28>
		draw_three();
     e30:	0e 94 92 00 	call	0x124	; 0x124 <draw_three>
     e34:	08 95       	ret
		}else if(digit == 4){
     e36:	84 30       	cpi	r24, 0x04	; 4
     e38:	19 f4       	brne	.+6      	; 0xe40 <draw_digit+0x32>
		draw_four();
     e3a:	0e 94 9f 00 	call	0x13e	; 0x13e <draw_four>
     e3e:	08 95       	ret
		}else if(digit == 5){
     e40:	85 30       	cpi	r24, 0x05	; 5
     e42:	19 f4       	brne	.+6      	; 0xe4a <draw_digit+0x3c>
		draw_five();
     e44:	0e 94 ac 00 	call	0x158	; 0x158 <draw_five>
     e48:	08 95       	ret
		}else if(digit == 6){
     e4a:	86 30       	cpi	r24, 0x06	; 6
     e4c:	19 f4       	brne	.+6      	; 0xe54 <draw_digit+0x46>
		draw_six();
     e4e:	0e 94 b9 00 	call	0x172	; 0x172 <draw_six>
     e52:	08 95       	ret
		}else if(digit == 7){
     e54:	87 30       	cpi	r24, 0x07	; 7
     e56:	19 f4       	brne	.+6      	; 0xe5e <draw_digit+0x50>
		draw_seven();
     e58:	0e 94 c6 00 	call	0x18c	; 0x18c <draw_seven>
     e5c:	08 95       	ret
		}else if(digit == 8){
     e5e:	88 30       	cpi	r24, 0x08	; 8
     e60:	19 f4       	brne	.+6      	; 0xe68 <draw_digit+0x5a>
		draw_eight();
     e62:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <draw_eight>
     e66:	08 95       	ret
		}else if(digit == 9){
     e68:	89 30       	cpi	r24, 0x09	; 9
     e6a:	11 f4       	brne	.+4      	; 0xe70 <draw_digit+0x62>
		draw_nine();
     e6c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <draw_nine>
     e70:	08 95       	ret

00000e72 <draw_top_digit>:
	}
}

void draw_top_digit(uint8_t digit){
	if(digit == 0){
     e72:	81 11       	cpse	r24, r1
     e74:	03 c0       	rjmp	.+6      	; 0xe7c <draw_top_digit+0xa>
		draw_top_zero();
     e76:	0e 94 1f 01 	call	0x23e	; 0x23e <draw_top_zero>
     e7a:	08 95       	ret
		}else if(digit == 1){
     e7c:	81 30       	cpi	r24, 0x01	; 1
     e7e:	19 f4       	brne	.+6      	; 0xe86 <draw_top_digit+0x14>
		draw_top_one();
     e80:	0e 94 44 01 	call	0x288	; 0x288 <draw_top_one>
     e84:	08 95       	ret
		}else if(digit == 2){
     e86:	82 30       	cpi	r24, 0x02	; 2
     e88:	19 f4       	brne	.+6      	; 0xe90 <draw_top_digit+0x1e>
		draw_top_two();
     e8a:	0e 94 69 01 	call	0x2d2	; 0x2d2 <draw_top_two>
     e8e:	08 95       	ret
		}else if(digit == 3){
     e90:	83 30       	cpi	r24, 0x03	; 3
     e92:	19 f4       	brne	.+6      	; 0xe9a <draw_top_digit+0x28>
		draw_top_three();
     e94:	0e 94 8e 01 	call	0x31c	; 0x31c <draw_top_three>
     e98:	08 95       	ret
		}else if(digit == 4){
     e9a:	84 30       	cpi	r24, 0x04	; 4
     e9c:	19 f4       	brne	.+6      	; 0xea4 <draw_top_digit+0x32>
		draw_top_four();
     e9e:	0e 94 b3 01 	call	0x366	; 0x366 <draw_top_four>
     ea2:	08 95       	ret
		}else if(digit == 5){
     ea4:	85 30       	cpi	r24, 0x05	; 5
     ea6:	19 f4       	brne	.+6      	; 0xeae <draw_top_digit+0x3c>
		draw_top_five();
     ea8:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <draw_top_five>
     eac:	08 95       	ret
		}else if(digit == 6){
     eae:	86 30       	cpi	r24, 0x06	; 6
     eb0:	19 f4       	brne	.+6      	; 0xeb8 <draw_top_digit+0x46>
		draw_top_six();
     eb2:	0e 94 fd 01 	call	0x3fa	; 0x3fa <draw_top_six>
     eb6:	08 95       	ret
		}else if(digit == 7){
     eb8:	87 30       	cpi	r24, 0x07	; 7
     eba:	19 f4       	brne	.+6      	; 0xec2 <draw_top_digit+0x50>
		draw_top_seven();
     ebc:	0e 94 22 02 	call	0x444	; 0x444 <draw_top_seven>
     ec0:	08 95       	ret
		}else if(digit == 8){
     ec2:	88 30       	cpi	r24, 0x08	; 8
     ec4:	19 f4       	brne	.+6      	; 0xecc <draw_top_digit+0x5a>
		draw_top_eight();
     ec6:	0e 94 47 02 	call	0x48e	; 0x48e <draw_top_eight>
     eca:	08 95       	ret
		}else if(digit == 9){
     ecc:	89 30       	cpi	r24, 0x09	; 9
     ece:	11 f4       	brne	.+4      	; 0xed4 <draw_top_digit+0x62>
		draw_top_nine();
     ed0:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <draw_top_nine>
     ed4:	08 95       	ret

00000ed6 <draw_bottom_digit>:
	}
}

void draw_bottom_digit(uint8_t digit){
	if(digit == 0){
     ed6:	81 11       	cpse	r24, r1
     ed8:	03 c0       	rjmp	.+6      	; 0xee0 <draw_bottom_digit+0xa>
		draw_bottom_zero();
     eda:	0e 94 91 02 	call	0x522	; 0x522 <draw_bottom_zero>
     ede:	08 95       	ret
		}else if(digit == 1){
     ee0:	81 30       	cpi	r24, 0x01	; 1
     ee2:	19 f4       	brne	.+6      	; 0xeea <draw_bottom_digit+0x14>
		draw_bottom_one();
     ee4:	0e 94 b6 02 	call	0x56c	; 0x56c <draw_bottom_one>
     ee8:	08 95       	ret
		}else if(digit == 2){
     eea:	82 30       	cpi	r24, 0x02	; 2
     eec:	19 f4       	brne	.+6      	; 0xef4 <draw_bottom_digit+0x1e>
		draw_bottom_two();
     eee:	0e 94 db 02 	call	0x5b6	; 0x5b6 <draw_bottom_two>
     ef2:	08 95       	ret
		}else if(digit == 3){
     ef4:	83 30       	cpi	r24, 0x03	; 3
     ef6:	19 f4       	brne	.+6      	; 0xefe <draw_bottom_digit+0x28>
		draw_bottom_three();
     ef8:	0e 94 00 03 	call	0x600	; 0x600 <draw_bottom_three>
     efc:	08 95       	ret
		}else if(digit == 4){
     efe:	84 30       	cpi	r24, 0x04	; 4
     f00:	19 f4       	brne	.+6      	; 0xf08 <draw_bottom_digit+0x32>
		draw_bottom_four();
     f02:	0e 94 25 03 	call	0x64a	; 0x64a <draw_bottom_four>
     f06:	08 95       	ret
		}else if(digit == 5){
     f08:	85 30       	cpi	r24, 0x05	; 5
     f0a:	19 f4       	brne	.+6      	; 0xf12 <draw_bottom_digit+0x3c>
		draw_bottom_five();
     f0c:	0e 94 4a 03 	call	0x694	; 0x694 <draw_bottom_five>
     f10:	08 95       	ret
		}else if(digit == 6){
     f12:	86 30       	cpi	r24, 0x06	; 6
     f14:	19 f4       	brne	.+6      	; 0xf1c <draw_bottom_digit+0x46>
		draw_bottom_six();
     f16:	0e 94 6f 03 	call	0x6de	; 0x6de <draw_bottom_six>
     f1a:	08 95       	ret
		}else if(digit == 7){
     f1c:	87 30       	cpi	r24, 0x07	; 7
     f1e:	19 f4       	brne	.+6      	; 0xf26 <draw_bottom_digit+0x50>
		draw_bottom_seven();
     f20:	0e 94 94 03 	call	0x728	; 0x728 <draw_bottom_seven>
     f24:	08 95       	ret
		}else if(digit == 8){
     f26:	88 30       	cpi	r24, 0x08	; 8
     f28:	19 f4       	brne	.+6      	; 0xf30 <draw_bottom_digit+0x5a>
		draw_bottom_eight();
     f2a:	0e 94 b9 03 	call	0x772	; 0x772 <draw_bottom_eight>
     f2e:	08 95       	ret
		}else if(digit == 9){
     f30:	89 30       	cpi	r24, 0x09	; 9
     f32:	11 f4       	brne	.+4      	; 0xf38 <draw_bottom_digit+0x62>
		draw_bottom_nine();
     f34:	0e 94 de 03 	call	0x7bc	; 0x7bc <draw_bottom_nine>
     f38:	08 95       	ret

00000f3a <displaytimeunit>:
	}
}

//void displaytimeunit(uint8_t timeunit); displays time unit
void displaytimeunit(uint8_t timeunit){
     f3a:	cf 93       	push	r28
uint8_t timeunit_now = timeunit; //stores volatile into timeunit_now which will be manipulated for display
draw_digit((timeunit_now - (timeunit_now % 10))/10);
     f3c:	cd ec       	ldi	r28, 0xCD	; 205
     f3e:	8c 9f       	mul	r24, r28
     f40:	c1 2d       	mov	r28, r1
     f42:	11 24       	eor	r1, r1
     f44:	c6 95       	lsr	r28
     f46:	c6 95       	lsr	r28
     f48:	c6 95       	lsr	r28
     f4a:	cc 0f       	add	r28, r28
     f4c:	9c 2f       	mov	r25, r28
     f4e:	99 0f       	add	r25, r25
     f50:	99 0f       	add	r25, r25
     f52:	c9 0f       	add	r28, r25
     f54:	98 2f       	mov	r25, r24
     f56:	9c 1b       	sub	r25, r28
     f58:	c9 2f       	mov	r28, r25
     f5a:	28 2f       	mov	r18, r24
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	c9 01       	movw	r24, r18
     f60:	8c 1b       	sub	r24, r28
     f62:	91 09       	sbc	r25, r1
     f64:	6a e0       	ldi	r22, 0x0A	; 10
     f66:	70 e0       	ldi	r23, 0x00	; 0
     f68:	0e 94 7f 17 	call	0x2efe	; 0x2efe <__divmodhi4>
     f6c:	86 2f       	mov	r24, r22
     f6e:	0e 94 07 07 	call	0xe0e	; 0xe0e <draw_digit>
draw_digit(timeunit_now % 10);
     f72:	8c 2f       	mov	r24, r28
     f74:	0e 94 07 07 	call	0xe0e	; 0xe0e <draw_digit>
}
     f78:	cf 91       	pop	r28
     f7a:	08 95       	ret

00000f7c <display_top_timeunit>:

void display_top_timeunit(uint8_t timeunit){
     f7c:	cf 93       	push	r28
	uint8_t timeunit_now = timeunit; //stores volatile into timeunit_now which will be manipulated for display
	draw_top_digit((timeunit_now - (timeunit_now % 10))/10);
     f7e:	cd ec       	ldi	r28, 0xCD	; 205
     f80:	8c 9f       	mul	r24, r28
     f82:	c1 2d       	mov	r28, r1
     f84:	11 24       	eor	r1, r1
     f86:	c6 95       	lsr	r28
     f88:	c6 95       	lsr	r28
     f8a:	c6 95       	lsr	r28
     f8c:	cc 0f       	add	r28, r28
     f8e:	9c 2f       	mov	r25, r28
     f90:	99 0f       	add	r25, r25
     f92:	99 0f       	add	r25, r25
     f94:	c9 0f       	add	r28, r25
     f96:	98 2f       	mov	r25, r24
     f98:	9c 1b       	sub	r25, r28
     f9a:	c9 2f       	mov	r28, r25
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	c9 01       	movw	r24, r18
     fa2:	8c 1b       	sub	r24, r28
     fa4:	91 09       	sbc	r25, r1
     fa6:	6a e0       	ldi	r22, 0x0A	; 10
     fa8:	70 e0       	ldi	r23, 0x00	; 0
     faa:	0e 94 7f 17 	call	0x2efe	; 0x2efe <__divmodhi4>
     fae:	86 2f       	mov	r24, r22
     fb0:	0e 94 39 07 	call	0xe72	; 0xe72 <draw_top_digit>
	draw_top_digit(timeunit_now % 10);
     fb4:	8c 2f       	mov	r24, r28
     fb6:	0e 94 39 07 	call	0xe72	; 0xe72 <draw_top_digit>
}
     fba:	cf 91       	pop	r28
     fbc:	08 95       	ret

00000fbe <display_bottom_timeunit>:

void display_bottom_timeunit(uint8_t timeunit){
     fbe:	cf 93       	push	r28
	uint8_t timeunit_now = timeunit; //stores volatile into timeunit_now which will be manipulated for display
	draw_bottom_digit((timeunit_now - (timeunit_now % 10))/10);
     fc0:	cd ec       	ldi	r28, 0xCD	; 205
     fc2:	8c 9f       	mul	r24, r28
     fc4:	c1 2d       	mov	r28, r1
     fc6:	11 24       	eor	r1, r1
     fc8:	c6 95       	lsr	r28
     fca:	c6 95       	lsr	r28
     fcc:	c6 95       	lsr	r28
     fce:	cc 0f       	add	r28, r28
     fd0:	9c 2f       	mov	r25, r28
     fd2:	99 0f       	add	r25, r25
     fd4:	99 0f       	add	r25, r25
     fd6:	c9 0f       	add	r28, r25
     fd8:	98 2f       	mov	r25, r24
     fda:	9c 1b       	sub	r25, r28
     fdc:	c9 2f       	mov	r28, r25
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	c9 01       	movw	r24, r18
     fe4:	8c 1b       	sub	r24, r28
     fe6:	91 09       	sbc	r25, r1
     fe8:	6a e0       	ldi	r22, 0x0A	; 10
     fea:	70 e0       	ldi	r23, 0x00	; 0
     fec:	0e 94 7f 17 	call	0x2efe	; 0x2efe <__divmodhi4>
     ff0:	86 2f       	mov	r24, r22
     ff2:	0e 94 6b 07 	call	0xed6	; 0xed6 <draw_bottom_digit>
	draw_bottom_digit(timeunit_now % 10);
     ff6:	8c 2f       	mov	r24, r28
     ff8:	0e 94 6b 07 	call	0xed6	; 0xed6 <draw_bottom_digit>
}
     ffc:	cf 91       	pop	r28
     ffe:	08 95       	ret

00001000 <draw_letter>:

//void draw_letter(index); draws a letter corresponding to the index. 0=A, 1=B, etc. etc. 25=Z
//all letters are six pixels wide with the last pixel being a space
void draw_letter(uint8_t index){
	if(index == 0){//a
    1000:	81 11       	cpse	r24, r1
    1002:	13 c0       	rjmp	.+38     	; 0x102a <draw_letter+0x2a>
		send_data(0x3E);
    1004:	8e e3       	ldi	r24, 0x3E	; 62
    1006:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x0A);
    100a:	8a e0       	ldi	r24, 0x0A	; 10
    100c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x3E);
    1010:	8e e3       	ldi	r24, 0x3E	; 62
    1012:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    1028:	08 95       	ret
	}else if(index == 1){//b
    102a:	81 30       	cpi	r24, 0x01	; 1
    102c:	99 f4       	brne	.+38     	; 0x1054 <draw_letter+0x54>
		send_data(0x3E);
    102e:	8e e3       	ldi	r24, 0x3E	; 62
    1030:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x2A);
    1034:	8a e2       	ldi	r24, 0x2A	; 42
    1036:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x14);
    103a:	84 e1       	ldi	r24, 0x14	; 20
    103c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    1040:	80 e0       	ldi	r24, 0x00	; 0
    1042:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    1052:	08 95       	ret
	}else if(index == 2){//c
    1054:	82 30       	cpi	r24, 0x02	; 2
    1056:	99 f4       	brne	.+38     	; 0x107e <draw_letter+0x7e>
		send_data(0x3E);
    1058:	8e e3       	ldi	r24, 0x3E	; 62
    105a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x22);
    105e:	82 e2       	ldi	r24, 0x22	; 34
    1060:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    1070:	80 e0       	ldi	r24, 0x00	; 0
    1072:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);		
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    107c:	08 95       	ret
	}else if(index == 3){//d
    107e:	83 30       	cpi	r24, 0x03	; 3
    1080:	99 f4       	brne	.+38     	; 0x10a8 <draw_letter+0xa8>
		send_data(0x3E);
    1082:	8e e3       	ldi	r24, 0x3E	; 62
    1084:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x22);
    1088:	82 e2       	ldi	r24, 0x22	; 34
    108a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x1C);
    108e:	8c e1       	ldi	r24, 0x1C	; 28
    1090:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    10a6:	08 95       	ret
	}else if(index == 4){//e
    10a8:	84 30       	cpi	r24, 0x04	; 4
    10aa:	99 f4       	brne	.+38     	; 0x10d2 <draw_letter+0xd2>
		send_data(0x3E);
    10ac:	8e e3       	ldi	r24, 0x3E	; 62
    10ae:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x2A);
    10b2:	8a e2       	ldi	r24, 0x2A	; 42
    10b4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    10ca:	80 e0       	ldi	r24, 0x00	; 0
    10cc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    10d0:	08 95       	ret
	}else if(index == 5){//f
    10d2:	85 30       	cpi	r24, 0x05	; 5
    10d4:	99 f4       	brne	.+38     	; 0x10fc <draw_letter+0xfc>
		send_data(0x3E);
    10d6:	8e e3       	ldi	r24, 0x3E	; 62
    10d8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x0A);
    10dc:	8a e0       	ldi	r24, 0x0A	; 10
    10de:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x0A);
    10e2:	8a e0       	ldi	r24, 0x0A	; 10
    10e4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);		
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    10fa:	08 95       	ret
	}else if(index == 6){//g
    10fc:	86 30       	cpi	r24, 0x06	; 6
    10fe:	99 f4       	brne	.+38     	; 0x1126 <draw_letter+0x126>
		send_data(0x3E);
    1100:	8e e3       	ldi	r24, 0x3E	; 62
    1102:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x22);
    1106:	82 e2       	ldi	r24, 0x22	; 34
    1108:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x3A);
    110c:	8a e3       	ldi	r24, 0x3A	; 58
    110e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    1112:	80 e0       	ldi	r24, 0x00	; 0
    1114:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    1118:	80 e0       	ldi	r24, 0x00	; 0
    111a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    1124:	08 95       	ret
	}else if(index == 7){//h
    1126:	87 30       	cpi	r24, 0x07	; 7
    1128:	99 f4       	brne	.+38     	; 0x1150 <draw_letter+0x150>
		send_data(0x3E);
    112a:	8e e3       	ldi	r24, 0x3E	; 62
    112c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x08);
    1130:	88 e0       	ldi	r24, 0x08	; 8
    1132:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x3E);
    1136:	8e e3       	ldi	r24, 0x3E	; 62
    1138:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    114e:	08 95       	ret
	}else if(index == 8){//i
    1150:	88 30       	cpi	r24, 0x08	; 8
    1152:	99 f4       	brne	.+38     	; 0x117a <draw_letter+0x17a>
		send_data(0x3E);
    1154:	8e e3       	ldi	r24, 0x3E	; 62
    1156:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    115a:	80 e0       	ldi	r24, 0x00	; 0
    115c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    1160:	80 e0       	ldi	r24, 0x00	; 0
    1162:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    1166:	80 e0       	ldi	r24, 0x00	; 0
    1168:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    1178:	08 95       	ret
	}else if(index == 9){//j
    117a:	89 30       	cpi	r24, 0x09	; 9
    117c:	99 f4       	brne	.+38     	; 0x11a4 <draw_letter+0x1a4>
		send_data(0x30);
    117e:	80 e3       	ldi	r24, 0x30	; 48
    1180:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x20);
    1184:	80 e2       	ldi	r24, 0x20	; 32
    1186:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x3E);
    118a:	8e e3       	ldi	r24, 0x3E	; 62
    118c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    1190:	80 e0       	ldi	r24, 0x00	; 0
    1192:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    11a2:	08 95       	ret
	}else if(index == 10){//k
    11a4:	8a 30       	cpi	r24, 0x0A	; 10
    11a6:	99 f4       	brne	.+38     	; 0x11ce <draw_letter+0x1ce>
		send_data(0x3E);
    11a8:	8e e3       	ldi	r24, 0x3E	; 62
    11aa:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x1C);
    11ae:	8c e1       	ldi	r24, 0x1C	; 28
    11b0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x36);
    11b4:	86 e3       	ldi	r24, 0x36	; 54
    11b6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    11c6:	80 e0       	ldi	r24, 0x00	; 0
    11c8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    11cc:	08 95       	ret
	}else if(index == 11){//L
    11ce:	8b 30       	cpi	r24, 0x0B	; 11
    11d0:	99 f4       	brne	.+38     	; 0x11f8 <draw_letter+0x1f8>
		send_data(0x3E);
    11d2:	8e e3       	ldi	r24, 0x3E	; 62
    11d4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x20);
    11d8:	80 e2       	ldi	r24, 0x20	; 32
    11da:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x20);
    11de:	80 e2       	ldi	r24, 0x20	; 32
    11e0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    11f6:	08 95       	ret
	}else if(index == 12){//m
    11f8:	8c 30       	cpi	r24, 0x0C	; 12
    11fa:	99 f4       	brne	.+38     	; 0x1222 <draw_letter+0x222>
		send_data(0x3E);
    11fc:	8e e3       	ldi	r24, 0x3E	; 62
    11fe:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x04);
    1202:	84 e0       	ldi	r24, 0x04	; 4
    1204:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x08);
    1208:	88 e0       	ldi	r24, 0x08	; 8
    120a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x04);
    120e:	84 e0       	ldi	r24, 0x04	; 4
    1210:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x3E);
    1214:	8e e3       	ldi	r24, 0x3E	; 62
    1216:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);		
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    1220:	08 95       	ret
	}else if(index == 13){//n
    1222:	8d 30       	cpi	r24, 0x0D	; 13
    1224:	99 f4       	brne	.+38     	; 0x124c <draw_letter+0x24c>
		send_data(0x3E);
    1226:	8e e3       	ldi	r24, 0x3E	; 62
    1228:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x04);
    122c:	84 e0       	ldi	r24, 0x04	; 4
    122e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x08);
    1232:	88 e0       	ldi	r24, 0x08	; 8
    1234:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x3E);
    1238:	8e e3       	ldi	r24, 0x3E	; 62
    123a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    123e:	80 e0       	ldi	r24, 0x00	; 0
    1240:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    124a:	08 95       	ret
	}else if(index == 14){//o
    124c:	8e 30       	cpi	r24, 0x0E	; 14
    124e:	99 f4       	brne	.+38     	; 0x1276 <draw_letter+0x276>
		send_data(0x3E);
    1250:	8e e3       	ldi	r24, 0x3E	; 62
    1252:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x22);
    1256:	82 e2       	ldi	r24, 0x22	; 34
    1258:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x3E);
    125c:	8e e3       	ldi	r24, 0x3E	; 62
    125e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    1268:	80 e0       	ldi	r24, 0x00	; 0
    126a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    126e:	80 e0       	ldi	r24, 0x00	; 0
    1270:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    1274:	08 95       	ret
	}else if(index == 15){//p
    1276:	8f 30       	cpi	r24, 0x0F	; 15
    1278:	99 f4       	brne	.+38     	; 0x12a0 <draw_letter+0x2a0>
		send_data(0x3E);
    127a:	8e e3       	ldi	r24, 0x3E	; 62
    127c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x0A);
    1280:	8a e0       	ldi	r24, 0x0A	; 10
    1282:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x0E);
    1286:	8e e0       	ldi	r24, 0x0E	; 14
    1288:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    129e:	08 95       	ret
	}else if(index == 16){//Q
    12a0:	80 31       	cpi	r24, 0x10	; 16
    12a2:	99 f4       	brne	.+38     	; 0x12ca <draw_letter+0x2ca>
		send_data(0x3E);
    12a4:	8e e3       	ldi	r24, 0x3E	; 62
    12a6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x72);
    12aa:	82 e7       	ldi	r24, 0x72	; 114
    12ac:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x26);
    12b0:	86 e2       	ldi	r24, 0x26	; 38
    12b2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x3C);
    12b6:	8c e3       	ldi	r24, 0x3C	; 60
    12b8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    12c8:	08 95       	ret
	}else if(index == 17){//r
    12ca:	81 31       	cpi	r24, 0x11	; 17
    12cc:	99 f4       	brne	.+38     	; 0x12f4 <draw_letter+0x2f4>
		send_data(0x3E);
    12ce:	8e e3       	ldi	r24, 0x3E	; 62
    12d0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x1A);
    12d4:	8a e1       	ldi	r24, 0x1A	; 26
    12d6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x2E);
    12da:	8e e2       	ldi	r24, 0x2E	; 46
    12dc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    12e0:	80 e0       	ldi	r24, 0x00	; 0
    12e2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    12ec:	80 e0       	ldi	r24, 0x00	; 0
    12ee:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    12f2:	08 95       	ret
	}else if(index == 18){//s
    12f4:	82 31       	cpi	r24, 0x12	; 18
    12f6:	99 f4       	brne	.+38     	; 0x131e <draw_letter+0x31e>
		send_data(0x2C);
    12f8:	8c e2       	ldi	r24, 0x2C	; 44
    12fa:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x2A);
    12fe:	8a e2       	ldi	r24, 0x2A	; 42
    1300:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x1A);
    1304:	8a e1       	ldi	r24, 0x1A	; 26
    1306:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    1316:	80 e0       	ldi	r24, 0x00	; 0
    1318:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    131c:	08 95       	ret
	}else if(index == 19){//T
    131e:	83 31       	cpi	r24, 0x13	; 19
    1320:	99 f4       	brne	.+38     	; 0x1348 <draw_letter+0x348>
		send_data(0x02);
    1322:	82 e0       	ldi	r24, 0x02	; 2
    1324:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x3E);
    1328:	8e e3       	ldi	r24, 0x3E	; 62
    132a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x02);
    132e:	82 e0       	ldi	r24, 0x02	; 2
    1330:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    1334:	80 e0       	ldi	r24, 0x00	; 0
    1336:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    1346:	08 95       	ret
	}else if(index == 20){//u
    1348:	84 31       	cpi	r24, 0x14	; 20
    134a:	99 f4       	brne	.+38     	; 0x1372 <draw_letter+0x372>
		send_data(0x3E);
    134c:	8e e3       	ldi	r24, 0x3E	; 62
    134e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x20);
    1352:	80 e2       	ldi	r24, 0x20	; 32
    1354:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x3E);
    1358:	8e e3       	ldi	r24, 0x3E	; 62
    135a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    135e:	80 e0       	ldi	r24, 0x00	; 0
    1360:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    1364:	80 e0       	ldi	r24, 0x00	; 0
    1366:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    136a:	80 e0       	ldi	r24, 0x00	; 0
    136c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    1370:	08 95       	ret
	}else if(index == 21){//v
    1372:	85 31       	cpi	r24, 0x15	; 21
    1374:	99 f4       	brne	.+38     	; 0x139c <draw_letter+0x39c>
		send_data(0x1E);
    1376:	8e e1       	ldi	r24, 0x1E	; 30
    1378:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x20);
    137c:	80 e2       	ldi	r24, 0x20	; 32
    137e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x1E);
    1382:	8e e1       	ldi	r24, 0x1E	; 30
    1384:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    1388:	80 e0       	ldi	r24, 0x00	; 0
    138a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    139a:	08 95       	ret
	}else if(index == 22){//w
    139c:	86 31       	cpi	r24, 0x16	; 22
    139e:	99 f4       	brne	.+38     	; 0x13c6 <draw_letter+0x3c6>
		send_data(0x3E);
    13a0:	8e e3       	ldi	r24, 0x3E	; 62
    13a2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x10);
    13a6:	80 e1       	ldi	r24, 0x10	; 16
    13a8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x08);
    13ac:	88 e0       	ldi	r24, 0x08	; 8
    13ae:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x10);
    13b2:	80 e1       	ldi	r24, 0x10	; 16
    13b4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x3E);
    13b8:	8e e3       	ldi	r24, 0x3E	; 62
    13ba:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    13be:	80 e0       	ldi	r24, 0x00	; 0
    13c0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    13c4:	08 95       	ret
	}else if(index == 23){//x
    13c6:	87 31       	cpi	r24, 0x17	; 23
    13c8:	99 f4       	brne	.+38     	; 0x13f0 <draw_letter+0x3f0>
		send_data(0x22);
    13ca:	82 e2       	ldi	r24, 0x22	; 34
    13cc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x14);
    13d0:	84 e1       	ldi	r24, 0x14	; 20
    13d2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x08);
    13d6:	88 e0       	ldi	r24, 0x08	; 8
    13d8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x14);
    13dc:	84 e1       	ldi	r24, 0x14	; 20
    13de:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x22);
    13e2:	82 e2       	ldi	r24, 0x22	; 34
    13e4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    13e8:	80 e0       	ldi	r24, 0x00	; 0
    13ea:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    13ee:	08 95       	ret
	}else if(index == 24){//y
    13f0:	88 31       	cpi	r24, 0x18	; 24
    13f2:	99 f4       	brne	.+38     	; 0x141a <draw_letter+0x41a>
		send_data(0x0E);
    13f4:	8e e0       	ldi	r24, 0x0E	; 14
    13f6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x38);
    13fa:	88 e3       	ldi	r24, 0x38	; 56
    13fc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x0E);
    1400:	8e e0       	ldi	r24, 0x0E	; 14
    1402:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    1406:	80 e0       	ldi	r24, 0x00	; 0
    1408:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    140c:	80 e0       	ldi	r24, 0x00	; 0
    140e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    1418:	08 95       	ret
	}else if(index == 25){//z
    141a:	89 31       	cpi	r24, 0x19	; 25
    141c:	91 f4       	brne	.+36     	; 0x1442 <draw_letter+0x442>
		send_data(0x32);
    141e:	82 e3       	ldi	r24, 0x32	; 50
    1420:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x2A);
    1424:	8a e2       	ldi	r24, 0x2A	; 42
    1426:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x26);
    142a:	86 e2       	ldi	r24, 0x26	; 38
    142c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    143c:	80 e0       	ldi	r24, 0x00	; 0
    143e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    1442:	08 95       	ret

00001444 <draw_blankline>:
	}			
}
	
//void draw_blankline(void); draws a blank line
void draw_blankline(void){
    1444:	cf 93       	push	r28
    1446:	c0 e4       	ldi	r28, 0x40	; 64
	uint8_t k = 0;
	for(k=0;k<64;k++){
		send_data(0x00);
    1448:	80 e0       	ldi	r24, 0x00	; 0
    144a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    144e:	c1 50       	subi	r28, 0x01	; 1
}
	
//void draw_blankline(void); draws a blank line
void draw_blankline(void){
	uint8_t k = 0;
	for(k=0;k<64;k++){
    1450:	d9 f7       	brne	.-10     	; 0x1448 <draw_blankline+0x4>
		send_data(0x00);
	}
}
    1452:	cf 91       	pop	r28
    1454:	08 95       	ret

00001456 <draw_stopandmeditate>:

//void draw_stopandmeditate(void); fills one line with the message "STOP AND MEDITATE"	
void draw_stopandmeditate(void){
	//stop
	send_data(0x2C);
    1456:	8c e2       	ldi	r24, 0x2C	; 44
    1458:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
    145c:	8a e2       	ldi	r24, 0x2A	; 42
    145e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x1A);
    1462:	8a e1       	ldi	r24, 0x1A	; 26
    1464:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
    146e:	82 e0       	ldi	r24, 0x02	; 2
    1470:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1474:	8e e3       	ldi	r24, 0x3E	; 62
    1476:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
    147a:	82 e0       	ldi	r24, 0x02	; 2
    147c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1486:	8e e3       	ldi	r24, 0x3E	; 62
    1488:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
    148c:	82 e2       	ldi	r24, 0x22	; 34
    148e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1492:	8e e3       	ldi	r24, 0x3E	; 62
    1494:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1498:	80 e0       	ldi	r24, 0x00	; 0
    149a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    149e:	8e e3       	ldi	r24, 0x3E	; 62
    14a0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0A);
    14a4:	8a e0       	ldi	r24, 0x0A	; 10
    14a6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0E);
    14aa:	8e e0       	ldi	r24, 0x0E	; 14
    14ac:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    14b0:	80 e0       	ldi	r24, 0x00	; 0
    14b2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    14bc:	80 e0       	ldi	r24, 0x00	; 0
    14be:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	//and
	send_data(0x3E);
    14c8:	8e e3       	ldi	r24, 0x3E	; 62
    14ca:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0A);
    14ce:	8a e0       	ldi	r24, 0x0A	; 10
    14d0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    14d4:	8e e3       	ldi	r24, 0x3E	; 62
    14d6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    14da:	80 e0       	ldi	r24, 0x00	; 0
    14dc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    14e0:	8e e3       	ldi	r24, 0x3E	; 62
    14e2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
    14e6:	84 e0       	ldi	r24, 0x04	; 4
    14e8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
    14ec:	88 e0       	ldi	r24, 0x08	; 8
    14ee:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    14f2:	8e e3       	ldi	r24, 0x3E	; 62
    14f4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    14f8:	80 e0       	ldi	r24, 0x00	; 0
    14fa:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    14fe:	8e e3       	ldi	r24, 0x3E	; 62
    1500:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
    1504:	82 e2       	ldi	r24, 0x22	; 34
    1506:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x1C);
    150a:	8c e1       	ldi	r24, 0x1C	; 28
    150c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1510:	80 e0       	ldi	r24, 0x00	; 0
    1512:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1516:	80 e0       	ldi	r24, 0x00	; 0
    1518:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1522:	80 e0       	ldi	r24, 0x00	; 0
    1524:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	//meditate
	send_data(0x3E);
    1528:	8e e3       	ldi	r24, 0x3E	; 62
    152a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
    152e:	84 e0       	ldi	r24, 0x04	; 4
    1530:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
    1534:	88 e0       	ldi	r24, 0x08	; 8
    1536:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
    153a:	84 e0       	ldi	r24, 0x04	; 4
    153c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1540:	8e e3       	ldi	r24, 0x3E	; 62
    1542:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1546:	80 e0       	ldi	r24, 0x00	; 0
    1548:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    154c:	8e e3       	ldi	r24, 0x3E	; 62
    154e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
    1552:	8a e2       	ldi	r24, 0x2A	; 42
    1554:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1558:	80 e0       	ldi	r24, 0x00	; 0
    155a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    155e:	8e e3       	ldi	r24, 0x3E	; 62
    1560:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
    1564:	82 e2       	ldi	r24, 0x22	; 34
    1566:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x1C);
    156a:	8c e1       	ldi	r24, 0x1C	; 28
    156c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1570:	80 e0       	ldi	r24, 0x00	; 0
    1572:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1576:	8e e3       	ldi	r24, 0x3E	; 62
    1578:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    157c:	80 e0       	ldi	r24, 0x00	; 0
    157e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
    1582:	82 e0       	ldi	r24, 0x02	; 2
    1584:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1588:	8e e3       	ldi	r24, 0x3E	; 62
    158a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
    158e:	82 e0       	ldi	r24, 0x02	; 2
    1590:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    159a:	8e e3       	ldi	r24, 0x3E	; 62
    159c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0A);
    15a0:	8a e0       	ldi	r24, 0x0A	; 10
    15a2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    15a6:	8e e3       	ldi	r24, 0x3E	; 62
    15a8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    15ac:	80 e0       	ldi	r24, 0x00	; 0
    15ae:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
    15b2:	82 e0       	ldi	r24, 0x02	; 2
    15b4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    15b8:	8e e3       	ldi	r24, 0x3E	; 62
    15ba:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
    15be:	82 e0       	ldi	r24, 0x02	; 2
    15c0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    15c4:	80 e0       	ldi	r24, 0x00	; 0
    15c6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    15ca:	8e e3       	ldi	r24, 0x3E	; 62
    15cc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
    15d0:	8a e2       	ldi	r24, 0x2A	; 42
    15d2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    15d6:	08 95       	ret

000015d8 <draw_tendself>:
}

void draw_tendself(void){
    15d8:	cf 93       	push	r28
    15da:	cd e0       	ldi	r28, 0x0D	; 13
	for(uint8_t s=0; s<13; s++){
		send_data(0x00);
    15dc:	80 e0       	ldi	r24, 0x00	; 0
    15de:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    15e2:	c1 50       	subi	r28, 0x01	; 1
	send_data(0x3E);
	send_data(0x2A);
}

void draw_tendself(void){
	for(uint8_t s=0; s<13; s++){
    15e4:	d9 f7       	brne	.-10     	; 0x15dc <draw_tendself+0x4>
		send_data(0x00);
	}
	send_data(0x02);
    15e6:	82 e0       	ldi	r24, 0x02	; 2
    15e8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    15ec:	8e e3       	ldi	r24, 0x3E	; 62
    15ee:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
    15f2:	82 e0       	ldi	r24, 0x02	; 2
    15f4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    15f8:	80 e0       	ldi	r24, 0x00	; 0
    15fa:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    15fe:	8e e3       	ldi	r24, 0x3E	; 62
    1600:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
    1604:	8a e2       	ldi	r24, 0x2A	; 42
    1606:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    160a:	80 e0       	ldi	r24, 0x00	; 0
    160c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1610:	8e e3       	ldi	r24, 0x3E	; 62
    1612:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
    1616:	84 e0       	ldi	r24, 0x04	; 4
    1618:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
    161c:	88 e0       	ldi	r24, 0x08	; 8
    161e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1622:	8e e3       	ldi	r24, 0x3E	; 62
    1624:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1628:	80 e0       	ldi	r24, 0x00	; 0
    162a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    162e:	8e e3       	ldi	r24, 0x3E	; 62
    1630:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
    1634:	82 e2       	ldi	r24, 0x22	; 34
    1636:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x1C);
    163a:	8c e1       	ldi	r24, 0x1C	; 28
    163c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1640:	80 e0       	ldi	r24, 0x00	; 0
    1642:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1646:	80 e0       	ldi	r24, 0x00	; 0
    1648:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    164c:	80 e0       	ldi	r24, 0x00	; 0
    164e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1652:	80 e0       	ldi	r24, 0x00	; 0
    1654:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1658:	80 e0       	ldi	r24, 0x00	; 0
    165a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    165e:	80 e0       	ldi	r24, 0x00	; 0
    1660:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2C);
    1664:	8c e2       	ldi	r24, 0x2C	; 44
    1666:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
    166a:	8a e2       	ldi	r24, 0x2A	; 42
    166c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x1A);
    1670:	8a e1       	ldi	r24, 0x1A	; 26
    1672:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    167c:	8e e3       	ldi	r24, 0x3E	; 62
    167e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
    1682:	8a e2       	ldi	r24, 0x2A	; 42
    1684:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1688:	80 e0       	ldi	r24, 0x00	; 0
    168a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    168e:	8e e3       	ldi	r24, 0x3E	; 62
    1690:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x20);
    1694:	80 e2       	ldi	r24, 0x20	; 32
    1696:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x20);
    169a:	80 e2       	ldi	r24, 0x20	; 32
    169c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    16a0:	80 e0       	ldi	r24, 0x00	; 0
    16a2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    16a6:	8e e3       	ldi	r24, 0x3E	; 62
    16a8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0A);
    16ac:	8a e0       	ldi	r24, 0x0A	; 10
    16ae:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0A);
    16b2:	8a e0       	ldi	r24, 0x0A	; 10
    16b4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    16b8:	c0 e1       	ldi	r28, 0x10	; 16
	for(uint8_t w=0;w<16;w++){
		send_data(0x00);
    16ba:	80 e0       	ldi	r24, 0x00	; 0
    16bc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    16c0:	c1 50       	subi	r28, 0x01	; 1
	send_data(0x20);
	send_data(0x00);
	send_data(0x3E);
	send_data(0x0A);
	send_data(0x0A);
	for(uint8_t w=0;w<16;w++){
    16c2:	d9 f7       	brne	.-10     	; 0x16ba <draw_tendself+0xe2>
		send_data(0x00);
	}
}
    16c4:	cf 91       	pop	r28
    16c6:	08 95       	ret

000016c8 <draw_climbmarshill>:

void draw_climbmarshill(void){
    16c8:	cf 93       	push	r28
	uint8_t i=0;	
	send_data(0x00);
    16ca:	80 e0       	ldi	r24, 0x00	; 0
    16cc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    16d0:	8e e3       	ldi	r24, 0x3E	; 62
    16d2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
    16d6:	82 e2       	ldi	r24, 0x22	; 34
    16d8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    16dc:	80 e0       	ldi	r24, 0x00	; 0
    16de:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    16e2:	8e e3       	ldi	r24, 0x3E	; 62
    16e4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x20);
    16e8:	80 e2       	ldi	r24, 0x20	; 32
    16ea:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x20);
    16ee:	80 e2       	ldi	r24, 0x20	; 32
    16f0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    16f4:	80 e0       	ldi	r24, 0x00	; 0
    16f6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    16fa:	8e e3       	ldi	r24, 0x3E	; 62
    16fc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1700:	80 e0       	ldi	r24, 0x00	; 0
    1702:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1706:	8e e3       	ldi	r24, 0x3E	; 62
    1708:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
    170c:	84 e0       	ldi	r24, 0x04	; 4
    170e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
    1712:	88 e0       	ldi	r24, 0x08	; 8
    1714:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
    1718:	84 e0       	ldi	r24, 0x04	; 4
    171a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    171e:	8e e3       	ldi	r24, 0x3E	; 62
    1720:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1724:	80 e0       	ldi	r24, 0x00	; 0
    1726:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    172a:	8e e3       	ldi	r24, 0x3E	; 62
    172c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
    1730:	8a e2       	ldi	r24, 0x2A	; 42
    1732:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x14);
    1736:	84 e1       	ldi	r24, 0x14	; 20
    1738:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    173c:	c7 e0       	ldi	r28, 0x07	; 7
	for(i=0;i<7;i++){
		send_data(0x00);
    173e:	80 e0       	ldi	r24, 0x00	; 0
    1740:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    1744:	c1 50       	subi	r28, 0x01	; 1
	send_data(0x3E);
	send_data(0x00);
	send_data(0x3E);
	send_data(0x2A);
	send_data(0x14);
	for(i=0;i<7;i++){
    1746:	d9 f7       	brne	.-10     	; 0x173e <draw_climbmarshill+0x76>
		send_data(0x00);
	}
	send_data(0x3E);
    1748:	8e e3       	ldi	r24, 0x3E	; 62
    174a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
    174e:	84 e0       	ldi	r24, 0x04	; 4
    1750:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
    1754:	88 e0       	ldi	r24, 0x08	; 8
    1756:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
    175a:	84 e0       	ldi	r24, 0x04	; 4
    175c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1760:	8e e3       	ldi	r24, 0x3E	; 62
    1762:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    176c:	8e e3       	ldi	r24, 0x3E	; 62
    176e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0A);
    1772:	8a e0       	ldi	r24, 0x0A	; 10
    1774:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1778:	8e e3       	ldi	r24, 0x3E	; 62
    177a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    177e:	80 e0       	ldi	r24, 0x00	; 0
    1780:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1784:	8e e3       	ldi	r24, 0x3E	; 62
    1786:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x1A);
    178a:	8a e1       	ldi	r24, 0x1A	; 26
    178c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2E);
    1790:	8e e2       	ldi	r24, 0x2E	; 46
    1792:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1796:	80 e0       	ldi	r24, 0x00	; 0
    1798:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2C);
    179c:	8c e2       	ldi	r24, 0x2C	; 44
    179e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
    17a2:	8a e2       	ldi	r24, 0x2A	; 42
    17a4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x1A);
    17a8:	8a e1       	ldi	r24, 0x1A	; 26
    17aa:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    17ae:	c7 e0       	ldi	r28, 0x07	; 7
	for(i=0;i<7;i++){
		send_data(0x00);
    17b0:	80 e0       	ldi	r24, 0x00	; 0
    17b2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    17b6:	c1 50       	subi	r28, 0x01	; 1
	send_data(0x2E);
	send_data(0x00);
	send_data(0x2C);
	send_data(0x2A);
	send_data(0x1A);
	for(i=0;i<7;i++){
    17b8:	d9 f7       	brne	.-10     	; 0x17b0 <draw_climbmarshill+0xe8>
		send_data(0x00);
	}
	send_data(0x3E);
    17ba:	8e e3       	ldi	r24, 0x3E	; 62
    17bc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
    17c0:	88 e0       	ldi	r24, 0x08	; 8
    17c2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    17c6:	8e e3       	ldi	r24, 0x3E	; 62
    17c8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    17cc:	80 e0       	ldi	r24, 0x00	; 0
    17ce:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    17d2:	8e e3       	ldi	r24, 0x3E	; 62
    17d4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    17d8:	80 e0       	ldi	r24, 0x00	; 0
    17da:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    17de:	8e e3       	ldi	r24, 0x3E	; 62
    17e0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x20);
    17e4:	80 e2       	ldi	r24, 0x20	; 32
    17e6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x20);
    17ea:	80 e2       	ldi	r24, 0x20	; 32
    17ec:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    17f6:	8e e3       	ldi	r24, 0x3E	; 62
    17f8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x20);
    17fc:	80 e2       	ldi	r24, 0x20	; 32
    17fe:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x20);
    1802:	80 e2       	ldi	r24, 0x20	; 32
    1804:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	
	send_data(0x00);
    1808:	80 e0       	ldi	r24, 0x00	; 0
    180a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
}
    180e:	cf 91       	pop	r28
    1810:	08 95       	ret

00001812 <draw_benefitnearest>:

void draw_benefitnearest(void){
    1812:	cf 93       	push	r28
	for(uint8_t j=0;j<4;j++){
		send_data(0x00);
    1814:	80 e0       	ldi	r24, 0x00	; 0
    1816:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    181a:	80 e0       	ldi	r24, 0x00	; 0
    181c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    1820:	80 e0       	ldi	r24, 0x00	; 0
    1822:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    1826:	80 e0       	ldi	r24, 0x00	; 0
    1828:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	}
	send_data(0x3E);
    182c:	8e e3       	ldi	r24, 0x3E	; 62
    182e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
    1832:	8a e2       	ldi	r24, 0x2A	; 42
    1834:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x14);
    1838:	84 e1       	ldi	r24, 0x14	; 20
    183a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    183e:	80 e0       	ldi	r24, 0x00	; 0
    1840:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1844:	8e e3       	ldi	r24, 0x3E	; 62
    1846:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
    184a:	8a e2       	ldi	r24, 0x2A	; 42
    184c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1850:	80 e0       	ldi	r24, 0x00	; 0
    1852:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1856:	8e e3       	ldi	r24, 0x3E	; 62
    1858:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
    185c:	84 e0       	ldi	r24, 0x04	; 4
    185e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
    1862:	88 e0       	ldi	r24, 0x08	; 8
    1864:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1868:	8e e3       	ldi	r24, 0x3E	; 62
    186a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1874:	8e e3       	ldi	r24, 0x3E	; 62
    1876:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
    187a:	8a e2       	ldi	r24, 0x2A	; 42
    187c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1880:	80 e0       	ldi	r24, 0x00	; 0
    1882:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1886:	8e e3       	ldi	r24, 0x3E	; 62
    1888:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0A);
    188c:	8a e0       	ldi	r24, 0x0A	; 10
    188e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0A);
    1892:	8a e0       	ldi	r24, 0x0A	; 10
    1894:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1898:	80 e0       	ldi	r24, 0x00	; 0
    189a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    189e:	8e e3       	ldi	r24, 0x3E	; 62
    18a0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    18a4:	80 e0       	ldi	r24, 0x00	; 0
    18a6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
    18aa:	82 e0       	ldi	r24, 0x02	; 2
    18ac:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    18b0:	8e e3       	ldi	r24, 0x3E	; 62
    18b2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
    18b6:	82 e0       	ldi	r24, 0x02	; 2
    18b8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    18bc:	c6 e0       	ldi	r28, 0x06	; 6
	for(uint8_t r=0;r<6;r++){
		send_data(0x00);
    18be:	80 e0       	ldi	r24, 0x00	; 0
    18c0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    18c4:	c1 50       	subi	r28, 0x01	; 1
	send_data(0x3E);
	send_data(0x00);
	send_data(0x02);
	send_data(0x3E);
	send_data(0x02);
	for(uint8_t r=0;r<6;r++){
    18c6:	d9 f7       	brne	.-10     	; 0x18be <draw_benefitnearest+0xac>
		send_data(0x00);
	}
	send_data(0x3E);
    18c8:	8e e3       	ldi	r24, 0x3E	; 62
    18ca:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
    18ce:	84 e0       	ldi	r24, 0x04	; 4
    18d0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
    18d4:	88 e0       	ldi	r24, 0x08	; 8
    18d6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    18da:	8e e3       	ldi	r24, 0x3E	; 62
    18dc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    18e0:	80 e0       	ldi	r24, 0x00	; 0
    18e2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    18e6:	8e e3       	ldi	r24, 0x3E	; 62
    18e8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
    18ec:	8a e2       	ldi	r24, 0x2A	; 42
    18ee:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    18f2:	80 e0       	ldi	r24, 0x00	; 0
    18f4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    18f8:	8e e3       	ldi	r24, 0x3E	; 62
    18fa:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0A);
    18fe:	8a e0       	ldi	r24, 0x0A	; 10
    1900:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1904:	8e e3       	ldi	r24, 0x3E	; 62
    1906:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1910:	8e e3       	ldi	r24, 0x3E	; 62
    1912:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x1A);
    1916:	8a e1       	ldi	r24, 0x1A	; 26
    1918:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2E);
    191c:	8e e2       	ldi	r24, 0x2E	; 46
    191e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1922:	80 e0       	ldi	r24, 0x00	; 0
    1924:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1928:	8e e3       	ldi	r24, 0x3E	; 62
    192a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
    192e:	8a e2       	ldi	r24, 0x2A	; 42
    1930:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1934:	80 e0       	ldi	r24, 0x00	; 0
    1936:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2C);
    193a:	8c e2       	ldi	r24, 0x2C	; 44
    193c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
    1940:	8a e2       	ldi	r24, 0x2A	; 42
    1942:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x1A);
    1946:	8a e1       	ldi	r24, 0x1A	; 26
    1948:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    194c:	80 e0       	ldi	r24, 0x00	; 0
    194e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
    1952:	82 e0       	ldi	r24, 0x02	; 2
    1954:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1958:	8e e3       	ldi	r24, 0x3E	; 62
    195a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
    195e:	82 e0       	ldi	r24, 0x02	; 2
    1960:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	for(uint8_t b=0; b<4;b++){
		send_data(0x00);
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    196a:	80 e0       	ldi	r24, 0x00	; 0
    196c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    1976:	80 e0       	ldi	r24, 0x00	; 0
    1978:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	}
	
}
    197c:	cf 91       	pop	r28
    197e:	08 95       	ret

00001980 <draw_person>:

void draw_person(void){
    1980:	cf 93       	push	r28
    1982:	c3 e1       	ldi	r28, 0x13	; 19
	uint8_t i=0;
	for(i=0;i<19;i++){
		send_data(0x00);
    1984:	80 e0       	ldi	r24, 0x00	; 0
    1986:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    198a:	c1 50       	subi	r28, 0x01	; 1
	
}

void draw_person(void){
	uint8_t i=0;
	for(i=0;i<19;i++){
    198c:	d9 f7       	brne	.-10     	; 0x1984 <draw_person+0x4>
		send_data(0x00);
	}
	send_data(0x3E);
    198e:	8e e3       	ldi	r24, 0x3E	; 62
    1990:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0A);
    1994:	8a e0       	ldi	r24, 0x0A	; 10
    1996:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0E);
    199a:	8e e0       	ldi	r24, 0x0E	; 14
    199c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    19a0:	80 e0       	ldi	r24, 0x00	; 0
    19a2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    19a6:	8e e3       	ldi	r24, 0x3E	; 62
    19a8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
    19ac:	8a e2       	ldi	r24, 0x2A	; 42
    19ae:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    19b2:	80 e0       	ldi	r24, 0x00	; 0
    19b4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    19b8:	8e e3       	ldi	r24, 0x3E	; 62
    19ba:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x1A);
    19be:	8a e1       	ldi	r24, 0x1A	; 26
    19c0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2E);
    19c4:	8e e2       	ldi	r24, 0x2E	; 46
    19c6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    19ca:	80 e0       	ldi	r24, 0x00	; 0
    19cc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2C);
    19d0:	8c e2       	ldi	r24, 0x2C	; 44
    19d2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
    19d6:	8a e2       	ldi	r24, 0x2A	; 42
    19d8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x1A);
    19dc:	8a e1       	ldi	r24, 0x1A	; 26
    19de:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    19e2:	80 e0       	ldi	r24, 0x00	; 0
    19e4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    19e8:	8e e3       	ldi	r24, 0x3E	; 62
    19ea:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
    19ee:	82 e2       	ldi	r24, 0x22	; 34
    19f0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    19f4:	8e e3       	ldi	r24, 0x3E	; 62
    19f6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    19fa:	80 e0       	ldi	r24, 0x00	; 0
    19fc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1a00:	8e e3       	ldi	r24, 0x3E	; 62
    1a02:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
    1a06:	84 e0       	ldi	r24, 0x04	; 4
    1a08:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
    1a0c:	88 e0       	ldi	r24, 0x08	; 8
    1a0e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1a12:	8e e3       	ldi	r24, 0x3E	; 62
    1a14:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    1a18:	c6 e1       	ldi	r28, 0x16	; 22
	for(i=0;i<22;i++){
		send_data(0x00);
    1a1a:	80 e0       	ldi	r24, 0x00	; 0
    1a1c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    1a20:	c1 50       	subi	r28, 0x01	; 1
	send_data(0x00);
	send_data(0x3E);
	send_data(0x04);
	send_data(0x08);
	send_data(0x3E);
	for(i=0;i<22;i++){
    1a22:	d9 f7       	brne	.-10     	; 0x1a1a <draw_person+0x9a>
		send_data(0x00);
	}
}
    1a24:	cf 91       	pop	r28
    1a26:	08 95       	ret

00001a28 <draw_fixsomething>:

	
void draw_fixsomething(void){
    1a28:	cf 93       	push	r28
    1a2a:	c6 e0       	ldi	r28, 0x06	; 6
	uint8_t i=0;
	for(i=0;i<6;i++){
		send_data(0x00);
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    1a32:	c1 50       	subi	r28, 0x01	; 1
}

	
void draw_fixsomething(void){
	uint8_t i=0;
	for(i=0;i<6;i++){
    1a34:	d9 f7       	brne	.-10     	; 0x1a2c <draw_fixsomething+0x4>
		send_data(0x00);
	}
	send_data(0x3E);
    1a36:	8e e3       	ldi	r24, 0x3E	; 62
    1a38:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0A);
    1a3c:	8a e0       	ldi	r24, 0x0A	; 10
    1a3e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0A);
    1a42:	8a e0       	ldi	r24, 0x0A	; 10
    1a44:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1a48:	80 e0       	ldi	r24, 0x00	; 0
    1a4a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1a4e:	8e e3       	ldi	r24, 0x3E	; 62
    1a50:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1a54:	80 e0       	ldi	r24, 0x00	; 0
    1a56:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
    1a5a:	82 e2       	ldi	r24, 0x22	; 34
    1a5c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x14);
    1a60:	84 e1       	ldi	r24, 0x14	; 20
    1a62:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
    1a66:	88 e0       	ldi	r24, 0x08	; 8
    1a68:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x14);
    1a6c:	84 e1       	ldi	r24, 0x14	; 20
    1a6e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
    1a72:	82 e2       	ldi	r24, 0x22	; 34
    1a74:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    1a78:	ca e0       	ldi	r28, 0x0A	; 10
	for(i=0;i<10;i++){
	send_data(0x00);
    1a7a:	80 e0       	ldi	r24, 0x00	; 0
    1a7c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    1a80:	c1 50       	subi	r28, 0x01	; 1
	send_data(0x22);
	send_data(0x14);
	send_data(0x08);
	send_data(0x14);
	send_data(0x22);
	for(i=0;i<10;i++){
    1a82:	d9 f7       	brne	.-10     	; 0x1a7a <draw_fixsomething+0x52>
	send_data(0x00);
	}
	send_data(0x2C);
    1a84:	8c e2       	ldi	r24, 0x2C	; 44
    1a86:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
    1a8a:	8a e2       	ldi	r24, 0x2A	; 42
    1a8c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x1A);
    1a90:	8a e1       	ldi	r24, 0x1A	; 26
    1a92:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1a96:	80 e0       	ldi	r24, 0x00	; 0
    1a98:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1a9c:	8e e3       	ldi	r24, 0x3E	; 62
    1a9e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
    1aa2:	82 e2       	ldi	r24, 0x22	; 34
    1aa4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1aa8:	8e e3       	ldi	r24, 0x3E	; 62
    1aaa:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1aae:	80 e0       	ldi	r24, 0x00	; 0
    1ab0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1ab4:	8e e3       	ldi	r24, 0x3E	; 62
    1ab6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
    1aba:	84 e0       	ldi	r24, 0x04	; 4
    1abc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
    1ac0:	88 e0       	ldi	r24, 0x08	; 8
    1ac2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
    1ac6:	84 e0       	ldi	r24, 0x04	; 4
    1ac8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1acc:	8e e3       	ldi	r24, 0x3E	; 62
    1ace:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1ad2:	80 e0       	ldi	r24, 0x00	; 0
    1ad4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1ad8:	8e e3       	ldi	r24, 0x3E	; 62
    1ada:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
    1ade:	8a e2       	ldi	r24, 0x2A	; 42
    1ae0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
    1aea:	82 e0       	ldi	r24, 0x02	; 2
    1aec:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1af0:	8e e3       	ldi	r24, 0x3E	; 62
    1af2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
    1af6:	82 e0       	ldi	r24, 0x02	; 2
    1af8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1afc:	80 e0       	ldi	r24, 0x00	; 0
    1afe:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1b02:	8e e3       	ldi	r24, 0x3E	; 62
    1b04:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
    1b08:	88 e0       	ldi	r24, 0x08	; 8
    1b0a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1b0e:	8e e3       	ldi	r24, 0x3E	; 62
    1b10:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1b14:	80 e0       	ldi	r24, 0x00	; 0
    1b16:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1b1a:	8e e3       	ldi	r24, 0x3E	; 62
    1b1c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1b20:	80 e0       	ldi	r24, 0x00	; 0
    1b22:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1b26:	8e e3       	ldi	r24, 0x3E	; 62
    1b28:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
    1b2c:	84 e0       	ldi	r24, 0x04	; 4
    1b2e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
    1b32:	88 e0       	ldi	r24, 0x08	; 8
    1b34:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1b38:	8e e3       	ldi	r24, 0x3E	; 62
    1b3a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1b3e:	80 e0       	ldi	r24, 0x00	; 0
    1b40:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1b44:	8e e3       	ldi	r24, 0x3E	; 62
    1b46:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
    1b4a:	82 e2       	ldi	r24, 0x22	; 34
    1b4c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3A);
    1b50:	8a e3       	ldi	r24, 0x3A	; 58
    1b52:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    1b56:	c5 e0       	ldi	r28, 0x05	; 5

	for(i=0;i<5;i++){
		send_data(0x00);
    1b58:	80 e0       	ldi	r24, 0x00	; 0
    1b5a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    1b5e:	c1 50       	subi	r28, 0x01	; 1
	send_data(0x00);
	send_data(0x3E);
	send_data(0x22);
	send_data(0x3A);

	for(i=0;i<5;i++){
    1b60:	d9 f7       	brne	.-10     	; 0x1b58 <draw_fixsomething+0x130>
		send_data(0x00);
	}
}
    1b62:	cf 91       	pop	r28
    1b64:	08 95       	ret

00001b66 <draw_goto>:
	
void draw_goto(void){
    1b66:	cf 93       	push	r28
    1b68:	c3 e1       	ldi	r28, 0x13	; 19
	uint8_t i=0;
	for(i=0;i<19;i++){
		send_data(0x00);
    1b6a:	80 e0       	ldi	r24, 0x00	; 0
    1b6c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    1b70:	c1 50       	subi	r28, 0x01	; 1
	}
}
	
void draw_goto(void){
	uint8_t i=0;
	for(i=0;i<19;i++){
    1b72:	d9 f7       	brne	.-10     	; 0x1b6a <draw_goto+0x4>
		send_data(0x00);
	}
	send_data(0x3E);
    1b74:	8e e3       	ldi	r24, 0x3E	; 62
    1b76:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
    1b7a:	82 e2       	ldi	r24, 0x22	; 34
    1b7c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3A);
    1b80:	8a e3       	ldi	r24, 0x3A	; 58
    1b82:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1b86:	80 e0       	ldi	r24, 0x00	; 0
    1b88:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1b8c:	8e e3       	ldi	r24, 0x3E	; 62
    1b8e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
    1b92:	82 e2       	ldi	r24, 0x22	; 34
    1b94:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1b98:	8e e3       	ldi	r24, 0x3E	; 62
    1b9a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    1b9e:	c6 e0       	ldi	r28, 0x06	; 6
	for(i=0;i<6;i++){
		send_data(0x00);
    1ba0:	80 e0       	ldi	r24, 0x00	; 0
    1ba2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    1ba6:	c1 50       	subi	r28, 0x01	; 1
	send_data(0x3A);
	send_data(0x00);
	send_data(0x3E);
	send_data(0x22);
	send_data(0x3E);
	for(i=0;i<6;i++){
    1ba8:	d9 f7       	brne	.-10     	; 0x1ba0 <draw_goto+0x3a>
		send_data(0x00);
	}
	send_data(0x02);
    1baa:	82 e0       	ldi	r24, 0x02	; 2
    1bac:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1bb0:	8e e3       	ldi	r24, 0x3E	; 62
    1bb2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
    1bb6:	82 e0       	ldi	r24, 0x02	; 2
    1bb8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1bc2:	8e e3       	ldi	r24, 0x3E	; 62
    1bc4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
    1bc8:	82 e2       	ldi	r24, 0x22	; 34
    1bca:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1bce:	8e e3       	ldi	r24, 0x3E	; 62
    1bd0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    1bd4:	c8 e1       	ldi	r28, 0x18	; 24
	for(i=0;i<24;i++){
		send_data(0x00);
    1bd6:	80 e0       	ldi	r24, 0x00	; 0
    1bd8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    1bdc:	c1 50       	subi	r28, 0x01	; 1
	send_data(0x02);
	send_data(0x00);
	send_data(0x3E);
	send_data(0x22);
	send_data(0x3E);
	for(i=0;i<24;i++){
    1bde:	d9 f7       	brne	.-10     	; 0x1bd6 <draw_goto+0x70>
		send_data(0x00);
	}
}
    1be0:	cf 91       	pop	r28
    1be2:	08 95       	ret

00001be4 <draw_deg_n>:

void draw_deg_n(uint8_t current_or_past){//1=current, 2=past, uses MEHC_order[2] to set nucleus, MEHC_order[3] to vary N/S
    1be4:	4f 92       	push	r4
    1be6:	5f 92       	push	r5
    1be8:	6f 92       	push	r6
    1bea:	7f 92       	push	r7
    1bec:	8f 92       	push	r8
    1bee:	9f 92       	push	r9
    1bf0:	af 92       	push	r10
    1bf2:	bf 92       	push	r11
    1bf4:	cf 92       	push	r12
    1bf6:	df 92       	push	r13
    1bf8:	ef 92       	push	r14
    1bfa:	ff 92       	push	r15
    1bfc:	1f 93       	push	r17
    1bfe:	cf 93       	push	r28
    1c00:	df 93       	push	r29
    1c02:	c8 2f       	mov	r28, r24
	uint8_t nucleus_index = 0;
	uint8_t variance = 0;
	// draws "+"
	send_data(0x00);
    1c04:	80 e0       	ldi	r24, 0x00	; 0
    1c06:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
    1c0a:	88 e0       	ldi	r24, 0x08	; 8
    1c0c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x1C);
    1c10:	8c e1       	ldi	r24, 0x1C	; 28
    1c12:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
    1c16:	88 e0       	ldi	r24, 0x08	; 8
    1c18:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1c1c:	80 e0       	ldi	r24, 0x00	; 0
    1c1e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1c22:	80 e0       	ldi	r24, 0x00	; 0
    1c24:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1c28:	80 e0       	ldi	r24, 0x00	; 0
    1c2a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	
	//draws "35."
	displaytimeunit(35);
    1c2e:	83 e2       	ldi	r24, 0x23	; 35
    1c30:	0e 94 9d 07 	call	0xf3a	; 0xf3a <displaytimeunit>
	draw_period();
    1c34:	0e 94 ed 00 	call	0x1da	; 0x1da <draw_period>

	if(current_or_past == 1){//if current
    1c38:	c1 30       	cpi	r28, 0x01	; 1
    1c3a:	31 f4       	brne	.+12     	; 0x1c48 <draw_deg_n+0x64>
		nucleus_index = (current_MEHC_order[2] % 32);
    1c3c:	10 91 18 02 	lds	r17, 0x0218
    1c40:	1f 71       	andi	r17, 0x1F	; 31
		variance = current_MEHC_order[3];		
    1c42:	80 91 19 02 	lds	r24, 0x0219
    1c46:	08 c0       	rjmp	.+16     	; 0x1c58 <draw_deg_n+0x74>
	}
	if(current_or_past == 2){//if past
    1c48:	c2 30       	cpi	r28, 0x02	; 2
    1c4a:	09 f0       	breq	.+2      	; 0x1c4e <draw_deg_n+0x6a>
    1c4c:	4f c0       	rjmp	.+158    	; 0x1cec <draw_deg_n+0x108>
		nucleus_index = (previous_MEHC_order[2] % 32);
    1c4e:	10 91 0e 02 	lds	r17, 0x020E
    1c52:	1f 71       	andi	r17, 0x1F	; 31
		variance = previous_MEHC_order[3];	
    1c54:	80 91 0f 02 	lds	r24, 0x020F
	}
	
		//modifiable display data goes here
	if(variance > 126){
    1c58:	8f 37       	cpi	r24, 0x7F	; 127
    1c5a:	08 f4       	brcc	.+2      	; 0x1c5e <draw_deg_n+0x7a>
    1c5c:	49 c0       	rjmp	.+146    	; 0x1cf0 <draw_deg_n+0x10c>
		displaytimeunit((uint8_t) (((nucleus_north[nucleus_index] / 10) + (variance % 64)) / 100));
    1c5e:	81 2e       	mov	r8, r17
    1c60:	91 2c       	mov	r9, r1
    1c62:	8f 73       	andi	r24, 0x3F	; 63
    1c64:	48 2e       	mov	r4, r24
    1c66:	51 2c       	mov	r5, r1
    1c68:	61 2c       	mov	r6, r1
    1c6a:	71 2c       	mov	r7, r1
    1c6c:	e4 01       	movw	r28, r8
    1c6e:	cc 0f       	add	r28, r28
    1c70:	dd 1f       	adc	r29, r29
    1c72:	cc 0f       	add	r28, r28
    1c74:	dd 1f       	adc	r29, r29
    1c76:	c0 58       	subi	r28, 0x80	; 128
    1c78:	de 4f       	sbci	r29, 0xFE	; 254
    1c7a:	68 81       	ld	r22, Y
    1c7c:	79 81       	ldd	r23, Y+1	; 0x01
    1c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c80:	9b 81       	ldd	r25, Y+3	; 0x03
    1c82:	0f 2e       	mov	r0, r31
    1c84:	fa e0       	ldi	r31, 0x0A	; 10
    1c86:	8f 2e       	mov	r8, r31
    1c88:	91 2c       	mov	r9, r1
    1c8a:	a1 2c       	mov	r10, r1
    1c8c:	b1 2c       	mov	r11, r1
    1c8e:	f0 2d       	mov	r31, r0
    1c90:	a5 01       	movw	r20, r10
    1c92:	94 01       	movw	r18, r8
    1c94:	0e 94 93 17 	call	0x2f26	; 0x2f26 <__udivmodsi4>
    1c98:	ca 01       	movw	r24, r20
    1c9a:	b9 01       	movw	r22, r18
    1c9c:	64 0d       	add	r22, r4
    1c9e:	75 1d       	adc	r23, r5
    1ca0:	86 1d       	adc	r24, r6
    1ca2:	97 1d       	adc	r25, r7
    1ca4:	0f 2e       	mov	r0, r31
    1ca6:	f4 e6       	ldi	r31, 0x64	; 100
    1ca8:	cf 2e       	mov	r12, r31
    1caa:	d1 2c       	mov	r13, r1
    1cac:	e1 2c       	mov	r14, r1
    1cae:	f1 2c       	mov	r15, r1
    1cb0:	f0 2d       	mov	r31, r0
    1cb2:	a7 01       	movw	r20, r14
    1cb4:	96 01       	movw	r18, r12
    1cb6:	0e 94 93 17 	call	0x2f26	; 0x2f26 <__udivmodsi4>
    1cba:	82 2f       	mov	r24, r18
    1cbc:	0e 94 9d 07 	call	0xf3a	; 0xf3a <displaytimeunit>
		displaytimeunit((uint8_t) (((nucleus_north[nucleus_index] / 10) + (variance % 64)) % 100));
    1cc0:	68 81       	ld	r22, Y
    1cc2:	79 81       	ldd	r23, Y+1	; 0x01
    1cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc6:	9b 81       	ldd	r25, Y+3	; 0x03
    1cc8:	a5 01       	movw	r20, r10
    1cca:	94 01       	movw	r18, r8
    1ccc:	0e 94 93 17 	call	0x2f26	; 0x2f26 <__udivmodsi4>
    1cd0:	ca 01       	movw	r24, r20
    1cd2:	b9 01       	movw	r22, r18
    1cd4:	64 0d       	add	r22, r4
    1cd6:	75 1d       	adc	r23, r5
    1cd8:	86 1d       	adc	r24, r6
    1cda:	97 1d       	adc	r25, r7
    1cdc:	a7 01       	movw	r20, r14
    1cde:	96 01       	movw	r18, r12
    1ce0:	0e 94 93 17 	call	0x2f26	; 0x2f26 <__udivmodsi4>
    1ce4:	86 2f       	mov	r24, r22
    1ce6:	0e 94 9d 07 	call	0xf3a	; 0xf3a <displaytimeunit>
    1cea:	47 c0       	rjmp	.+142    	; 0x1d7a <draw_deg_n+0x196>
	}
}

void draw_deg_n(uint8_t current_or_past){//1=current, 2=past, uses MEHC_order[2] to set nucleus, MEHC_order[3] to vary N/S
	uint8_t nucleus_index = 0;
	uint8_t variance = 0;
    1cec:	80 e0       	ldi	r24, 0x00	; 0
		send_data(0x00);
	}
}

void draw_deg_n(uint8_t current_or_past){//1=current, 2=past, uses MEHC_order[2] to set nucleus, MEHC_order[3] to vary N/S
	uint8_t nucleus_index = 0;
    1cee:	10 e0       	ldi	r17, 0x00	; 0
		//modifiable display data goes here
	if(variance > 126){
		displaytimeunit((uint8_t) (((nucleus_north[nucleus_index] / 10) + (variance % 64)) / 100));
		displaytimeunit((uint8_t) (((nucleus_north[nucleus_index] / 10) + (variance % 64)) % 100));
	}else{
		displaytimeunit((uint8_t) (((nucleus_north[nucleus_index] / 10) - (variance % 64)) / 100));
    1cf0:	c1 2f       	mov	r28, r17
    1cf2:	d0 e0       	ldi	r29, 0x00	; 0
    1cf4:	8f 73       	andi	r24, 0x3F	; 63
    1cf6:	88 2e       	mov	r8, r24
    1cf8:	91 2c       	mov	r9, r1
    1cfa:	a1 2c       	mov	r10, r1
    1cfc:	b1 2c       	mov	r11, r1
    1cfe:	cc 0f       	add	r28, r28
    1d00:	dd 1f       	adc	r29, r29
    1d02:	cc 0f       	add	r28, r28
    1d04:	dd 1f       	adc	r29, r29
    1d06:	c0 58       	subi	r28, 0x80	; 128
    1d08:	de 4f       	sbci	r29, 0xFE	; 254
    1d0a:	68 81       	ld	r22, Y
    1d0c:	79 81       	ldd	r23, Y+1	; 0x01
    1d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d10:	9b 81       	ldd	r25, Y+3	; 0x03
    1d12:	0f 2e       	mov	r0, r31
    1d14:	fa e0       	ldi	r31, 0x0A	; 10
    1d16:	4f 2e       	mov	r4, r31
    1d18:	51 2c       	mov	r5, r1
    1d1a:	61 2c       	mov	r6, r1
    1d1c:	71 2c       	mov	r7, r1
    1d1e:	f0 2d       	mov	r31, r0
    1d20:	a3 01       	movw	r20, r6
    1d22:	92 01       	movw	r18, r4
    1d24:	0e 94 93 17 	call	0x2f26	; 0x2f26 <__udivmodsi4>
    1d28:	ca 01       	movw	r24, r20
    1d2a:	b9 01       	movw	r22, r18
    1d2c:	68 19       	sub	r22, r8
    1d2e:	79 09       	sbc	r23, r9
    1d30:	8a 09       	sbc	r24, r10
    1d32:	9b 09       	sbc	r25, r11
    1d34:	0f 2e       	mov	r0, r31
    1d36:	f4 e6       	ldi	r31, 0x64	; 100
    1d38:	cf 2e       	mov	r12, r31
    1d3a:	d1 2c       	mov	r13, r1
    1d3c:	e1 2c       	mov	r14, r1
    1d3e:	f1 2c       	mov	r15, r1
    1d40:	f0 2d       	mov	r31, r0
    1d42:	a7 01       	movw	r20, r14
    1d44:	96 01       	movw	r18, r12
    1d46:	0e 94 93 17 	call	0x2f26	; 0x2f26 <__udivmodsi4>
    1d4a:	82 2f       	mov	r24, r18
    1d4c:	0e 94 9d 07 	call	0xf3a	; 0xf3a <displaytimeunit>
		displaytimeunit((uint8_t) (((nucleus_north[nucleus_index] / 10) - (variance % 64)) % 100));
    1d50:	68 81       	ld	r22, Y
    1d52:	79 81       	ldd	r23, Y+1	; 0x01
    1d54:	8a 81       	ldd	r24, Y+2	; 0x02
    1d56:	9b 81       	ldd	r25, Y+3	; 0x03
    1d58:	a3 01       	movw	r20, r6
    1d5a:	92 01       	movw	r18, r4
    1d5c:	0e 94 93 17 	call	0x2f26	; 0x2f26 <__udivmodsi4>
    1d60:	ca 01       	movw	r24, r20
    1d62:	b9 01       	movw	r22, r18
    1d64:	68 19       	sub	r22, r8
    1d66:	79 09       	sbc	r23, r9
    1d68:	8a 09       	sbc	r24, r10
    1d6a:	9b 09       	sbc	r25, r11
    1d6c:	a7 01       	movw	r20, r14
    1d6e:	96 01       	movw	r18, r12
    1d70:	0e 94 93 17 	call	0x2f26	; 0x2f26 <__udivmodsi4>
    1d74:	86 2f       	mov	r24, r22
    1d76:	0e 94 9d 07 	call	0xf3a	; 0xf3a <displaytimeunit>
	}
	
	
	
	draw_digit((uint8_t) (nucleus_north[nucleus_index] % 10));
    1d7a:	e1 2f       	mov	r30, r17
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	ee 0f       	add	r30, r30
    1d80:	ff 1f       	adc	r31, r31
    1d82:	ee 0f       	add	r30, r30
    1d84:	ff 1f       	adc	r31, r31
    1d86:	e0 58       	subi	r30, 0x80	; 128
    1d88:	fe 4f       	sbci	r31, 0xFE	; 254
    1d8a:	60 81       	ld	r22, Z
    1d8c:	71 81       	ldd	r23, Z+1	; 0x01
    1d8e:	82 81       	ldd	r24, Z+2	; 0x02
    1d90:	93 81       	ldd	r25, Z+3	; 0x03
    1d92:	2a e0       	ldi	r18, 0x0A	; 10
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	40 e0       	ldi	r20, 0x00	; 0
    1d98:	50 e0       	ldi	r21, 0x00	; 0
    1d9a:	0e 94 93 17 	call	0x2f26	; 0x2f26 <__udivmodsi4>
    1d9e:	86 2f       	mov	r24, r22
    1da0:	0e 94 07 07 	call	0xe0e	; 0xe0e <draw_digit>
	
	//draws "[ {deg}N ]"
	send_data(0x00);
    1da4:	80 e0       	ldi	r24, 0x00	; 0
    1da6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1daa:	80 e0       	ldi	r24, 0x00	; 0
    1dac:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1db0:	80 e0       	ldi	r24, 0x00	; 0
    1db2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1db6:	80 e0       	ldi	r24, 0x00	; 0
    1db8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1dbc:	80 e0       	ldi	r24, 0x00	; 0
    1dbe:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1dc2:	80 e0       	ldi	r24, 0x00	; 0
    1dc4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	
	send_data(0x3E);
    1dc8:	8e e3       	ldi	r24, 0x3E	; 62
    1dca:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
    1dce:	82 e2       	ldi	r24, 0x22	; 34
    1dd0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	
	send_data(0x00);
    1dd4:	80 e0       	ldi	r24, 0x00	; 0
    1dd6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1dda:	80 e0       	ldi	r24, 0x00	; 0
    1ddc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	
	send_data(0x02);
    1de0:	82 e0       	ldi	r24, 0x02	; 2
    1de2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x05);
    1de6:	85 e0       	ldi	r24, 0x05	; 5
    1de8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
    1dec:	82 e0       	ldi	r24, 0x02	; 2
    1dee:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1df2:	80 e0       	ldi	r24, 0x00	; 0
    1df4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	
	draw_letter(13);
    1df8:	8d e0       	ldi	r24, 0x0D	; 13
    1dfa:	0e 94 00 08 	call	0x1000	; 0x1000 <draw_letter>
	
	send_data(0x00);
    1dfe:	80 e0       	ldi	r24, 0x00	; 0
    1e00:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
    1e04:	82 e2       	ldi	r24, 0x22	; 34
    1e06:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1e0a:	8e e3       	ldi	r24, 0x3E	; 62
    1e0c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1e10:	80 e0       	ldi	r24, 0x00	; 0
    1e12:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1e1c:	80 e0       	ldi	r24, 0x00	; 0
    1e1e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1e22:	80 e0       	ldi	r24, 0x00	; 0
    1e24:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
}
    1e28:	df 91       	pop	r29
    1e2a:	cf 91       	pop	r28
    1e2c:	1f 91       	pop	r17
    1e2e:	ff 90       	pop	r15
    1e30:	ef 90       	pop	r14
    1e32:	df 90       	pop	r13
    1e34:	cf 90       	pop	r12
    1e36:	bf 90       	pop	r11
    1e38:	af 90       	pop	r10
    1e3a:	9f 90       	pop	r9
    1e3c:	8f 90       	pop	r8
    1e3e:	7f 90       	pop	r7
    1e40:	6f 90       	pop	r6
    1e42:	5f 90       	pop	r5
    1e44:	4f 90       	pop	r4
    1e46:	08 95       	ret

00001e48 <draw_deg_e>:

void draw_deg_e(uint8_t current_or_past){//1=current, 2=past, uses MEHC_order[2] to set nucleus, MEHC_order[4] to vary E/W
    1e48:	4f 92       	push	r4
    1e4a:	5f 92       	push	r5
    1e4c:	6f 92       	push	r6
    1e4e:	7f 92       	push	r7
    1e50:	8f 92       	push	r8
    1e52:	9f 92       	push	r9
    1e54:	af 92       	push	r10
    1e56:	bf 92       	push	r11
    1e58:	cf 92       	push	r12
    1e5a:	df 92       	push	r13
    1e5c:	ef 92       	push	r14
    1e5e:	ff 92       	push	r15
    1e60:	1f 93       	push	r17
    1e62:	cf 93       	push	r28
    1e64:	df 93       	push	r29
    1e66:	c8 2f       	mov	r28, r24
	uint8_t nucleus_index = 0;
	uint8_t variance = 0;
	// draws "-1"
	send_data(0x00);
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
    1e6e:	88 e0       	ldi	r24, 0x08	; 8
    1e70:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
    1e74:	88 e0       	ldi	r24, 0x08	; 8
    1e76:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
    1e7a:	88 e0       	ldi	r24, 0x08	; 8
    1e7c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1e86:	80 e0       	ldi	r24, 0x00	; 0
    1e88:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1e8c:	8e e3       	ldi	r24, 0x3E	; 62
    1e8e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	
	//draws "11."
	displaytimeunit(11);
    1e92:	8b e0       	ldi	r24, 0x0B	; 11
    1e94:	0e 94 9d 07 	call	0xf3a	; 0xf3a <displaytimeunit>
	draw_period();
    1e98:	0e 94 ed 00 	call	0x1da	; 0x1da <draw_period>
	

	
	if(current_or_past == 1){//if current
    1e9c:	c1 30       	cpi	r28, 0x01	; 1
    1e9e:	31 f4       	brne	.+12     	; 0x1eac <draw_deg_e+0x64>
		nucleus_index = (current_MEHC_order[2] % 32);
    1ea0:	10 91 18 02 	lds	r17, 0x0218
    1ea4:	1f 71       	andi	r17, 0x1F	; 31
		variance = current_MEHC_order[4];		
    1ea6:	80 91 1a 02 	lds	r24, 0x021A
    1eaa:	08 c0       	rjmp	.+16     	; 0x1ebc <draw_deg_e+0x74>
	}
	if(current_or_past == 2){//if past
    1eac:	c2 30       	cpi	r28, 0x02	; 2
    1eae:	09 f0       	breq	.+2      	; 0x1eb2 <draw_deg_e+0x6a>
    1eb0:	4f c0       	rjmp	.+158    	; 0x1f50 <draw_deg_e+0x108>
		nucleus_index = (previous_MEHC_order[2] % 32);
    1eb2:	10 91 0e 02 	lds	r17, 0x020E
    1eb6:	1f 71       	andi	r17, 0x1F	; 31
		variance = previous_MEHC_order[4];		
    1eb8:	80 91 10 02 	lds	r24, 0x0210
	}
	
		//modifiable display data goes here
	if(variance > 126){
    1ebc:	8f 37       	cpi	r24, 0x7F	; 127
    1ebe:	08 f4       	brcc	.+2      	; 0x1ec2 <draw_deg_e+0x7a>
    1ec0:	49 c0       	rjmp	.+146    	; 0x1f54 <draw_deg_e+0x10c>
		displaytimeunit((uint8_t) (((nucleus_east[nucleus_index] / 10) + (variance % 64)) / 100));
    1ec2:	81 2e       	mov	r8, r17
    1ec4:	91 2c       	mov	r9, r1
    1ec6:	8f 73       	andi	r24, 0x3F	; 63
    1ec8:	48 2e       	mov	r4, r24
    1eca:	51 2c       	mov	r5, r1
    1ecc:	61 2c       	mov	r6, r1
    1ece:	71 2c       	mov	r7, r1
    1ed0:	e4 01       	movw	r28, r8
    1ed2:	cc 0f       	add	r28, r28
    1ed4:	dd 1f       	adc	r29, r29
    1ed6:	cc 0f       	add	r28, r28
    1ed8:	dd 1f       	adc	r29, r29
    1eda:	c0 50       	subi	r28, 0x00	; 0
    1edc:	df 4f       	sbci	r29, 0xFF	; 255
    1ede:	68 81       	ld	r22, Y
    1ee0:	79 81       	ldd	r23, Y+1	; 0x01
    1ee2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ee6:	0f 2e       	mov	r0, r31
    1ee8:	fa e0       	ldi	r31, 0x0A	; 10
    1eea:	8f 2e       	mov	r8, r31
    1eec:	91 2c       	mov	r9, r1
    1eee:	a1 2c       	mov	r10, r1
    1ef0:	b1 2c       	mov	r11, r1
    1ef2:	f0 2d       	mov	r31, r0
    1ef4:	a5 01       	movw	r20, r10
    1ef6:	94 01       	movw	r18, r8
    1ef8:	0e 94 93 17 	call	0x2f26	; 0x2f26 <__udivmodsi4>
    1efc:	ca 01       	movw	r24, r20
    1efe:	b9 01       	movw	r22, r18
    1f00:	64 0d       	add	r22, r4
    1f02:	75 1d       	adc	r23, r5
    1f04:	86 1d       	adc	r24, r6
    1f06:	97 1d       	adc	r25, r7
    1f08:	0f 2e       	mov	r0, r31
    1f0a:	f4 e6       	ldi	r31, 0x64	; 100
    1f0c:	cf 2e       	mov	r12, r31
    1f0e:	d1 2c       	mov	r13, r1
    1f10:	e1 2c       	mov	r14, r1
    1f12:	f1 2c       	mov	r15, r1
    1f14:	f0 2d       	mov	r31, r0
    1f16:	a7 01       	movw	r20, r14
    1f18:	96 01       	movw	r18, r12
    1f1a:	0e 94 93 17 	call	0x2f26	; 0x2f26 <__udivmodsi4>
    1f1e:	82 2f       	mov	r24, r18
    1f20:	0e 94 9d 07 	call	0xf3a	; 0xf3a <displaytimeunit>
		displaytimeunit((uint8_t) (((nucleus_east[nucleus_index] / 10) + (variance % 64)) % 100));
    1f24:	68 81       	ld	r22, Y
    1f26:	79 81       	ldd	r23, Y+1	; 0x01
    1f28:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f2c:	a5 01       	movw	r20, r10
    1f2e:	94 01       	movw	r18, r8
    1f30:	0e 94 93 17 	call	0x2f26	; 0x2f26 <__udivmodsi4>
    1f34:	ca 01       	movw	r24, r20
    1f36:	b9 01       	movw	r22, r18
    1f38:	64 0d       	add	r22, r4
    1f3a:	75 1d       	adc	r23, r5
    1f3c:	86 1d       	adc	r24, r6
    1f3e:	97 1d       	adc	r25, r7
    1f40:	a7 01       	movw	r20, r14
    1f42:	96 01       	movw	r18, r12
    1f44:	0e 94 93 17 	call	0x2f26	; 0x2f26 <__udivmodsi4>
    1f48:	86 2f       	mov	r24, r22
    1f4a:	0e 94 9d 07 	call	0xf3a	; 0xf3a <displaytimeunit>
    1f4e:	47 c0       	rjmp	.+142    	; 0x1fde <draw_deg_e+0x196>
	send_data(0x00);
}

void draw_deg_e(uint8_t current_or_past){//1=current, 2=past, uses MEHC_order[2] to set nucleus, MEHC_order[4] to vary E/W
	uint8_t nucleus_index = 0;
	uint8_t variance = 0;
    1f50:	80 e0       	ldi	r24, 0x00	; 0
	send_data(0x00);
	send_data(0x00);
}

void draw_deg_e(uint8_t current_or_past){//1=current, 2=past, uses MEHC_order[2] to set nucleus, MEHC_order[4] to vary E/W
	uint8_t nucleus_index = 0;
    1f52:	10 e0       	ldi	r17, 0x00	; 0
		//modifiable display data goes here
	if(variance > 126){
		displaytimeunit((uint8_t) (((nucleus_east[nucleus_index] / 10) + (variance % 64)) / 100));
		displaytimeunit((uint8_t) (((nucleus_east[nucleus_index] / 10) + (variance % 64)) % 100));
		}else{
		displaytimeunit((uint8_t) (((nucleus_east[nucleus_index] / 10) - (variance % 64)) / 100));
    1f54:	c1 2f       	mov	r28, r17
    1f56:	d0 e0       	ldi	r29, 0x00	; 0
    1f58:	8f 73       	andi	r24, 0x3F	; 63
    1f5a:	88 2e       	mov	r8, r24
    1f5c:	91 2c       	mov	r9, r1
    1f5e:	a1 2c       	mov	r10, r1
    1f60:	b1 2c       	mov	r11, r1
    1f62:	cc 0f       	add	r28, r28
    1f64:	dd 1f       	adc	r29, r29
    1f66:	cc 0f       	add	r28, r28
    1f68:	dd 1f       	adc	r29, r29
    1f6a:	c0 50       	subi	r28, 0x00	; 0
    1f6c:	df 4f       	sbci	r29, 0xFF	; 255
    1f6e:	68 81       	ld	r22, Y
    1f70:	79 81       	ldd	r23, Y+1	; 0x01
    1f72:	8a 81       	ldd	r24, Y+2	; 0x02
    1f74:	9b 81       	ldd	r25, Y+3	; 0x03
    1f76:	0f 2e       	mov	r0, r31
    1f78:	fa e0       	ldi	r31, 0x0A	; 10
    1f7a:	4f 2e       	mov	r4, r31
    1f7c:	51 2c       	mov	r5, r1
    1f7e:	61 2c       	mov	r6, r1
    1f80:	71 2c       	mov	r7, r1
    1f82:	f0 2d       	mov	r31, r0
    1f84:	a3 01       	movw	r20, r6
    1f86:	92 01       	movw	r18, r4
    1f88:	0e 94 93 17 	call	0x2f26	; 0x2f26 <__udivmodsi4>
    1f8c:	ca 01       	movw	r24, r20
    1f8e:	b9 01       	movw	r22, r18
    1f90:	68 19       	sub	r22, r8
    1f92:	79 09       	sbc	r23, r9
    1f94:	8a 09       	sbc	r24, r10
    1f96:	9b 09       	sbc	r25, r11
    1f98:	0f 2e       	mov	r0, r31
    1f9a:	f4 e6       	ldi	r31, 0x64	; 100
    1f9c:	cf 2e       	mov	r12, r31
    1f9e:	d1 2c       	mov	r13, r1
    1fa0:	e1 2c       	mov	r14, r1
    1fa2:	f1 2c       	mov	r15, r1
    1fa4:	f0 2d       	mov	r31, r0
    1fa6:	a7 01       	movw	r20, r14
    1fa8:	96 01       	movw	r18, r12
    1faa:	0e 94 93 17 	call	0x2f26	; 0x2f26 <__udivmodsi4>
    1fae:	82 2f       	mov	r24, r18
    1fb0:	0e 94 9d 07 	call	0xf3a	; 0xf3a <displaytimeunit>
		displaytimeunit((uint8_t) (((nucleus_east[nucleus_index] / 10) - (variance % 64)) % 100));
    1fb4:	68 81       	ld	r22, Y
    1fb6:	79 81       	ldd	r23, Y+1	; 0x01
    1fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fba:	9b 81       	ldd	r25, Y+3	; 0x03
    1fbc:	a3 01       	movw	r20, r6
    1fbe:	92 01       	movw	r18, r4
    1fc0:	0e 94 93 17 	call	0x2f26	; 0x2f26 <__udivmodsi4>
    1fc4:	ca 01       	movw	r24, r20
    1fc6:	b9 01       	movw	r22, r18
    1fc8:	68 19       	sub	r22, r8
    1fca:	79 09       	sbc	r23, r9
    1fcc:	8a 09       	sbc	r24, r10
    1fce:	9b 09       	sbc	r25, r11
    1fd0:	a7 01       	movw	r20, r14
    1fd2:	96 01       	movw	r18, r12
    1fd4:	0e 94 93 17 	call	0x2f26	; 0x2f26 <__udivmodsi4>
    1fd8:	86 2f       	mov	r24, r22
    1fda:	0e 94 9d 07 	call	0xf3a	; 0xf3a <displaytimeunit>
	}
	
	
	draw_digit((uint8_t) (nucleus_east[nucleus_index] % 10));
    1fde:	e1 2f       	mov	r30, r17
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	ee 0f       	add	r30, r30
    1fe4:	ff 1f       	adc	r31, r31
    1fe6:	ee 0f       	add	r30, r30
    1fe8:	ff 1f       	adc	r31, r31
    1fea:	e0 50       	subi	r30, 0x00	; 0
    1fec:	ff 4f       	sbci	r31, 0xFF	; 255
    1fee:	60 81       	ld	r22, Z
    1ff0:	71 81       	ldd	r23, Z+1	; 0x01
    1ff2:	82 81       	ldd	r24, Z+2	; 0x02
    1ff4:	93 81       	ldd	r25, Z+3	; 0x03
    1ff6:	2a e0       	ldi	r18, 0x0A	; 10
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	40 e0       	ldi	r20, 0x00	; 0
    1ffc:	50 e0       	ldi	r21, 0x00	; 0
    1ffe:	0e 94 93 17 	call	0x2f26	; 0x2f26 <__udivmodsi4>
    2002:	86 2f       	mov	r24, r22
    2004:	0e 94 07 07 	call	0xe0e	; 0xe0e <draw_digit>
	
	//draws "[ {deg}E ]"
	send_data(0x00);
    2008:	80 e0       	ldi	r24, 0x00	; 0
    200a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    200e:	80 e0       	ldi	r24, 0x00	; 0
    2010:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    2014:	80 e0       	ldi	r24, 0x00	; 0
    2016:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    201a:	80 e0       	ldi	r24, 0x00	; 0
    201c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    2020:	80 e0       	ldi	r24, 0x00	; 0
    2022:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    2026:	80 e0       	ldi	r24, 0x00	; 0
    2028:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	
	send_data(0x3E);
    202c:	8e e3       	ldi	r24, 0x3E	; 62
    202e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
    2032:	82 e2       	ldi	r24, 0x22	; 34
    2034:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	
	send_data(0x00);
    2038:	80 e0       	ldi	r24, 0x00	; 0
    203a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    203e:	80 e0       	ldi	r24, 0x00	; 0
    2040:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	
	send_data(0x02);
    2044:	82 e0       	ldi	r24, 0x02	; 2
    2046:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x05);
    204a:	85 e0       	ldi	r24, 0x05	; 5
    204c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
    2050:	82 e0       	ldi	r24, 0x02	; 2
    2052:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    2056:	80 e0       	ldi	r24, 0x00	; 0
    2058:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	
	draw_letter(4);
    205c:	84 e0       	ldi	r24, 0x04	; 4
    205e:	0e 94 00 08 	call	0x1000	; 0x1000 <draw_letter>
	
	send_data(0x00);
    2062:	80 e0       	ldi	r24, 0x00	; 0
    2064:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
    2068:	82 e2       	ldi	r24, 0x22	; 34
    206a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    206e:	8e e3       	ldi	r24, 0x3E	; 62
    2070:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    2074:	80 e0       	ldi	r24, 0x00	; 0
    2076:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    207a:	80 e0       	ldi	r24, 0x00	; 0
    207c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    2080:	80 e0       	ldi	r24, 0x00	; 0
    2082:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    2086:	80 e0       	ldi	r24, 0x00	; 0
    2088:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
}
    208c:	df 91       	pop	r29
    208e:	cf 91       	pop	r28
    2090:	1f 91       	pop	r17
    2092:	ff 90       	pop	r15
    2094:	ef 90       	pop	r14
    2096:	df 90       	pop	r13
    2098:	cf 90       	pop	r12
    209a:	bf 90       	pop	r11
    209c:	af 90       	pop	r10
    209e:	9f 90       	pop	r9
    20a0:	8f 90       	pop	r8
    20a2:	7f 90       	pop	r7
    20a4:	6f 90       	pop	r6
    20a6:	5f 90       	pop	r5
    20a8:	4f 90       	pop	r4
    20aa:	08 95       	ret

000020ac <draw_getxxxx>:
	
void draw_getxxxx(uint8_t current_or_past){ //1=current, 2=past
    20ac:	cf 93       	push	r28
    20ae:	df 93       	push	r29
    20b0:	d8 2f       	mov	r29, r24
    20b2:	c5 e0       	ldi	r28, 0x05	; 5
	uint8_t i=0;
	for(i=0;i<5;i++){
		send_data(0x00);
    20b4:	80 e0       	ldi	r24, 0x00	; 0
    20b6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    20ba:	c1 50       	subi	r28, 0x01	; 1
	send_data(0x00);
}
	
void draw_getxxxx(uint8_t current_or_past){ //1=current, 2=past
	uint8_t i=0;
	for(i=0;i<5;i++){
    20bc:	d9 f7       	brne	.-10     	; 0x20b4 <draw_getxxxx+0x8>
		send_data(0x00);
	}
	send_data(0x3E);
    20be:	8e e3       	ldi	r24, 0x3E	; 62
    20c0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
    20c4:	82 e2       	ldi	r24, 0x22	; 34
    20c6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3A);
    20ca:	8a e3       	ldi	r24, 0x3A	; 58
    20cc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    20d0:	80 e0       	ldi	r24, 0x00	; 0
    20d2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    20d6:	8e e3       	ldi	r24, 0x3E	; 62
    20d8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
    20dc:	8a e2       	ldi	r24, 0x2A	; 42
    20de:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    20e2:	80 e0       	ldi	r24, 0x00	; 0
    20e4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
    20e8:	82 e0       	ldi	r24, 0x02	; 2
    20ea:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    20ee:	8e e3       	ldi	r24, 0x3E	; 62
    20f0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
    20f4:	82 e0       	ldi	r24, 0x02	; 2
    20f6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    20fa:	c0 e1       	ldi	r28, 0x10	; 16
	for(i=0;i<16;i++){
		send_data(0x00);
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    2102:	c1 50       	subi	r28, 0x01	; 1
	send_data(0x2A);
	send_data(0x00);
	send_data(0x02);
	send_data(0x3E);
	send_data(0x02);
	for(i=0;i<16;i++){
    2104:	d9 f7       	brne	.-10     	; 0x20fc <draw_getxxxx+0x50>
		send_data(0x00);
	}
	
	if(current_or_past == 1){//if current
    2106:	d1 30       	cpi	r29, 0x01	; 1
    2108:	09 f0       	breq	.+2      	; 0x210c <draw_getxxxx+0x60>
    210a:	52 c0       	rjmp	.+164    	; 0x21b0 <draw_getxxxx+0x104>
		draw_letter(current_MEHC_order[2] % 26);
    210c:	80 91 18 02 	lds	r24, 0x0218
    2110:	df e4       	ldi	r29, 0x4F	; 79
    2112:	8d 9f       	mul	r24, r29
    2114:	91 2d       	mov	r25, r1
    2116:	11 24       	eor	r1, r1
    2118:	96 95       	lsr	r25
    211a:	96 95       	lsr	r25
    211c:	96 95       	lsr	r25
    211e:	ca e1       	ldi	r28, 0x1A	; 26
    2120:	9c 9f       	mul	r25, r28
    2122:	80 19       	sub	r24, r0
    2124:	11 24       	eor	r1, r1
    2126:	0e 94 00 08 	call	0x1000	; 0x1000 <draw_letter>
		send_data(0x00);
    212a:	80 e0       	ldi	r24, 0x00	; 0
    212c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    2130:	80 e0       	ldi	r24, 0x00	; 0
    2132:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    2136:	80 e0       	ldi	r24, 0x00	; 0
    2138:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		draw_letter(current_MEHC_order[3] % 26);
    213c:	80 91 19 02 	lds	r24, 0x0219
    2140:	8d 9f       	mul	r24, r29
    2142:	91 2d       	mov	r25, r1
    2144:	11 24       	eor	r1, r1
    2146:	96 95       	lsr	r25
    2148:	96 95       	lsr	r25
    214a:	96 95       	lsr	r25
    214c:	9c 9f       	mul	r25, r28
    214e:	80 19       	sub	r24, r0
    2150:	11 24       	eor	r1, r1
    2152:	0e 94 00 08 	call	0x1000	; 0x1000 <draw_letter>
		send_data(0x00);
    2156:	80 e0       	ldi	r24, 0x00	; 0
    2158:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    215c:	80 e0       	ldi	r24, 0x00	; 0
    215e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    2162:	80 e0       	ldi	r24, 0x00	; 0
    2164:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		draw_letter(current_MEHC_order[4] % 26);
    2168:	80 91 1a 02 	lds	r24, 0x021A
    216c:	8d 9f       	mul	r24, r29
    216e:	91 2d       	mov	r25, r1
    2170:	11 24       	eor	r1, r1
    2172:	96 95       	lsr	r25
    2174:	96 95       	lsr	r25
    2176:	96 95       	lsr	r25
    2178:	9c 9f       	mul	r25, r28
    217a:	80 19       	sub	r24, r0
    217c:	11 24       	eor	r1, r1
    217e:	0e 94 00 08 	call	0x1000	; 0x1000 <draw_letter>
		send_data(0x00);
    2182:	80 e0       	ldi	r24, 0x00	; 0
    2184:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    2188:	80 e0       	ldi	r24, 0x00	; 0
    218a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    218e:	80 e0       	ldi	r24, 0x00	; 0
    2190:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		draw_letter(current_MEHC_order[5] % 26);
    2194:	80 91 1b 02 	lds	r24, 0x021B
    2198:	8d 9f       	mul	r24, r29
    219a:	d1 2d       	mov	r29, r1
    219c:	11 24       	eor	r1, r1
    219e:	d6 95       	lsr	r29
    21a0:	d6 95       	lsr	r29
    21a2:	d6 95       	lsr	r29
    21a4:	dc 9f       	mul	r29, r28
    21a6:	80 19       	sub	r24, r0
    21a8:	11 24       	eor	r1, r1
    21aa:	0e 94 00 08 	call	0x1000	; 0x1000 <draw_letter>
    21ae:	54 c0       	rjmp	.+168    	; 0x2258 <draw_getxxxx+0x1ac>
	}
	if(current_or_past == 2){//if past
    21b0:	d2 30       	cpi	r29, 0x02	; 2
    21b2:	09 f0       	breq	.+2      	; 0x21b6 <draw_getxxxx+0x10a>
    21b4:	51 c0       	rjmp	.+162    	; 0x2258 <draw_getxxxx+0x1ac>
		draw_letter(previous_MEHC_order[2] % 26);
    21b6:	80 91 0e 02 	lds	r24, 0x020E
    21ba:	df e4       	ldi	r29, 0x4F	; 79
    21bc:	8d 9f       	mul	r24, r29
    21be:	91 2d       	mov	r25, r1
    21c0:	11 24       	eor	r1, r1
    21c2:	96 95       	lsr	r25
    21c4:	96 95       	lsr	r25
    21c6:	96 95       	lsr	r25
    21c8:	ca e1       	ldi	r28, 0x1A	; 26
    21ca:	9c 9f       	mul	r25, r28
    21cc:	80 19       	sub	r24, r0
    21ce:	11 24       	eor	r1, r1
    21d0:	0e 94 00 08 	call	0x1000	; 0x1000 <draw_letter>
		send_data(0x00);
    21d4:	80 e0       	ldi	r24, 0x00	; 0
    21d6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    21da:	80 e0       	ldi	r24, 0x00	; 0
    21dc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    21e0:	80 e0       	ldi	r24, 0x00	; 0
    21e2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		draw_letter(previous_MEHC_order[3] % 26);
    21e6:	80 91 0f 02 	lds	r24, 0x020F
    21ea:	8d 9f       	mul	r24, r29
    21ec:	91 2d       	mov	r25, r1
    21ee:	11 24       	eor	r1, r1
    21f0:	96 95       	lsr	r25
    21f2:	96 95       	lsr	r25
    21f4:	96 95       	lsr	r25
    21f6:	9c 9f       	mul	r25, r28
    21f8:	80 19       	sub	r24, r0
    21fa:	11 24       	eor	r1, r1
    21fc:	0e 94 00 08 	call	0x1000	; 0x1000 <draw_letter>
		send_data(0x00);
    2200:	80 e0       	ldi	r24, 0x00	; 0
    2202:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    2206:	80 e0       	ldi	r24, 0x00	; 0
    2208:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    220c:	80 e0       	ldi	r24, 0x00	; 0
    220e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		draw_letter(previous_MEHC_order[4] % 26);
    2212:	80 91 10 02 	lds	r24, 0x0210
    2216:	8d 9f       	mul	r24, r29
    2218:	91 2d       	mov	r25, r1
    221a:	11 24       	eor	r1, r1
    221c:	96 95       	lsr	r25
    221e:	96 95       	lsr	r25
    2220:	96 95       	lsr	r25
    2222:	9c 9f       	mul	r25, r28
    2224:	80 19       	sub	r24, r0
    2226:	11 24       	eor	r1, r1
    2228:	0e 94 00 08 	call	0x1000	; 0x1000 <draw_letter>
		send_data(0x00);
    222c:	80 e0       	ldi	r24, 0x00	; 0
    222e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    2232:	80 e0       	ldi	r24, 0x00	; 0
    2234:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    2238:	80 e0       	ldi	r24, 0x00	; 0
    223a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		draw_letter(previous_MEHC_order[5] % 26);
    223e:	80 91 11 02 	lds	r24, 0x0211
    2242:	8d 9f       	mul	r24, r29
    2244:	d1 2d       	mov	r29, r1
    2246:	11 24       	eor	r1, r1
    2248:	d6 95       	lsr	r29
    224a:	d6 95       	lsr	r29
    224c:	d6 95       	lsr	r29
    224e:	dc 9f       	mul	r29, r28
    2250:	80 19       	sub	r24, r0
    2252:	11 24       	eor	r1, r1
    2254:	0e 94 00 08 	call	0x1000	; 0x1000 <draw_letter>
	}
}
    2258:	df 91       	pop	r29
    225a:	cf 91       	pop	r28
    225c:	08 95       	ret

0000225e <draw_changebearing>:
	
	
void draw_changebearing(void){
    225e:	cf 93       	push	r28
	uint8_t i=0;
	for(i=0;i<4;i++){
		send_data(0x00);
    2260:	80 e0       	ldi	r24, 0x00	; 0
    2262:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    2266:	80 e0       	ldi	r24, 0x00	; 0
    2268:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    226c:	80 e0       	ldi	r24, 0x00	; 0
    226e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    2272:	80 e0       	ldi	r24, 0x00	; 0
    2274:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	}
	send_data(0x3E);
    2278:	8e e3       	ldi	r24, 0x3E	; 62
    227a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
    227e:	82 e2       	ldi	r24, 0x22	; 34
    2280:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    2284:	80 e0       	ldi	r24, 0x00	; 0
    2286:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    228a:	8e e3       	ldi	r24, 0x3E	; 62
    228c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
    2290:	88 e0       	ldi	r24, 0x08	; 8
    2292:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    2296:	8e e3       	ldi	r24, 0x3E	; 62
    2298:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    229c:	80 e0       	ldi	r24, 0x00	; 0
    229e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    22a2:	8e e3       	ldi	r24, 0x3E	; 62
    22a4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0A);
    22a8:	8a e0       	ldi	r24, 0x0A	; 10
    22aa:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    22ae:	8e e3       	ldi	r24, 0x3E	; 62
    22b0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    22b4:	80 e0       	ldi	r24, 0x00	; 0
    22b6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    22ba:	8e e3       	ldi	r24, 0x3E	; 62
    22bc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
    22c0:	84 e0       	ldi	r24, 0x04	; 4
    22c2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
    22c6:	88 e0       	ldi	r24, 0x08	; 8
    22c8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    22cc:	8e e3       	ldi	r24, 0x3E	; 62
    22ce:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    22d2:	80 e0       	ldi	r24, 0x00	; 0
    22d4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    22d8:	8e e3       	ldi	r24, 0x3E	; 62
    22da:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
    22de:	82 e2       	ldi	r24, 0x22	; 34
    22e0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3A);
    22e4:	8a e3       	ldi	r24, 0x3A	; 58
    22e6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    22ea:	80 e0       	ldi	r24, 0x00	; 0
    22ec:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    22f0:	8e e3       	ldi	r24, 0x3E	; 62
    22f2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
    22f6:	8a e2       	ldi	r24, 0x2A	; 42
    22f8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    22fc:	c8 e0       	ldi	r28, 0x08	; 8
	for(i=0;i<8;i++){
		send_data(0x00);
    22fe:	80 e0       	ldi	r24, 0x00	; 0
    2300:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    2304:	c1 50       	subi	r28, 0x01	; 1
	send_data(0x22);
	send_data(0x3A);
	send_data(0x00);
	send_data(0x3E);
	send_data(0x2A);
	for(i=0;i<8;i++){
    2306:	d9 f7       	brne	.-10     	; 0x22fe <draw_changebearing+0xa0>
		send_data(0x00);
	}
	send_data(0x3E);
    2308:	8e e3       	ldi	r24, 0x3E	; 62
    230a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
    230e:	8a e2       	ldi	r24, 0x2A	; 42
    2310:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x14);
    2314:	84 e1       	ldi	r24, 0x14	; 20
    2316:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    231a:	80 e0       	ldi	r24, 0x00	; 0
    231c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    2320:	8e e3       	ldi	r24, 0x3E	; 62
    2322:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
    2326:	8a e2       	ldi	r24, 0x2A	; 42
    2328:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    232c:	80 e0       	ldi	r24, 0x00	; 0
    232e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    2332:	8e e3       	ldi	r24, 0x3E	; 62
    2334:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0A);
    2338:	8a e0       	ldi	r24, 0x0A	; 10
    233a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    233e:	8e e3       	ldi	r24, 0x3E	; 62
    2340:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    2344:	80 e0       	ldi	r24, 0x00	; 0
    2346:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    234a:	8e e3       	ldi	r24, 0x3E	; 62
    234c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x1A);
    2350:	8a e1       	ldi	r24, 0x1A	; 26
    2352:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2E);
    2356:	8e e2       	ldi	r24, 0x2E	; 46
    2358:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    235c:	80 e0       	ldi	r24, 0x00	; 0
    235e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    2362:	8e e3       	ldi	r24, 0x3E	; 62
    2364:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    2368:	80 e0       	ldi	r24, 0x00	; 0
    236a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    236e:	8e e3       	ldi	r24, 0x3E	; 62
    2370:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
    2374:	84 e0       	ldi	r24, 0x04	; 4
    2376:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
    237a:	88 e0       	ldi	r24, 0x08	; 8
    237c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    2380:	8e e3       	ldi	r24, 0x3E	; 62
    2382:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    2386:	80 e0       	ldi	r24, 0x00	; 0
    2388:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    238c:	8e e3       	ldi	r24, 0x3E	; 62
    238e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
    2392:	82 e2       	ldi	r24, 0x22	; 34
    2394:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3A);
    2398:	8a e3       	ldi	r24, 0x3A	; 58
    239a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    239e:	c5 e0       	ldi	r28, 0x05	; 5
	for(i=0;i<5;i++){
		send_data(0x00);
    23a0:	80 e0       	ldi	r24, 0x00	; 0
    23a2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    23a6:	c1 50       	subi	r28, 0x01	; 1
	send_data(0x3E);
	send_data(0x00);
	send_data(0x3E);
	send_data(0x22);
	send_data(0x3A);
	for(i=0;i<5;i++){
    23a8:	d9 f7       	brne	.-10     	; 0x23a0 <draw_changebearing+0x142>
		send_data(0x00);
	}	
}
    23aa:	cf 91       	pop	r28
    23ac:	08 95       	ret

000023ae <draw_toxx>:
	
void draw_toxx(uint8_t current_or_past){//1=current, 2=past
    23ae:	cf 93       	push	r28
    23b0:	df 93       	push	r29
    23b2:	d8 2f       	mov	r29, r24
    23b4:	cc e0       	ldi	r28, 0x0C	; 12
	uint8_t i=0;
	uint8_t k = 0;
	for(i=0;i<12;i++){
		send_data(0x00);
    23b6:	80 e0       	ldi	r24, 0x00	; 0
    23b8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    23bc:	c1 50       	subi	r28, 0x01	; 1
}
	
void draw_toxx(uint8_t current_or_past){//1=current, 2=past
	uint8_t i=0;
	uint8_t k = 0;
	for(i=0;i<12;i++){
    23be:	d9 f7       	brne	.-10     	; 0x23b6 <draw_toxx+0x8>
		send_data(0x00);
	}
	send_data(0x02);
    23c0:	82 e0       	ldi	r24, 0x02	; 2
    23c2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    23c6:	8e e3       	ldi	r24, 0x3E	; 62
    23c8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
    23cc:	82 e0       	ldi	r24, 0x02	; 2
    23ce:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    23d2:	80 e0       	ldi	r24, 0x00	; 0
    23d4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    23d8:	8e e3       	ldi	r24, 0x3E	; 62
    23da:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
    23de:	82 e2       	ldi	r24, 0x22	; 34
    23e0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    23e4:	8e e3       	ldi	r24, 0x3E	; 62
    23e6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    23ea:	c1 e1       	ldi	r28, 0x11	; 17
	for(i=0;i<17;i++){
		send_data(0x00);
    23ec:	80 e0       	ldi	r24, 0x00	; 0
    23ee:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    23f2:	c1 50       	subi	r28, 0x01	; 1
	send_data(0x02);
	send_data(0x00);
	send_data(0x3E);
	send_data(0x22);
	send_data(0x3E);
	for(i=0;i<17;i++){
    23f4:	d9 f7       	brne	.-10     	; 0x23ec <draw_toxx+0x3e>
		send_data(0x00);
	}
	
	if(current_or_past == 1){ // current
    23f6:	d1 30       	cpi	r29, 0x01	; 1
    23f8:	09 f0       	breq	.+2      	; 0x23fc <draw_toxx+0x4e>
    23fa:	65 c0       	rjmp	.+202    	; 0x24c6 <draw_toxx+0x118>
		//N S E W NE NW SE SW go here
		if((current_MEHC_order[2] % 8) == 0){
    23fc:	80 91 18 02 	lds	r24, 0x0218
    2400:	87 70       	andi	r24, 0x07	; 7
    2402:	49 f4       	brne	.+18     	; 0x2416 <draw_toxx+0x68>
			//n
			draw_letter(13);
    2404:	8d e0       	ldi	r24, 0x0D	; 13
    2406:	0e 94 00 08 	call	0x1000	; 0x1000 <draw_letter>
    240a:	c6 e0       	ldi	r28, 0x06	; 6
			for(k=0;k<6;k++){
				send_data(0x00);
    240c:	80 e0       	ldi	r24, 0x00	; 0
    240e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    2412:	c1 50       	subi	r28, 0x01	; 1
	if(current_or_past == 1){ // current
		//N S E W NE NW SE SW go here
		if((current_MEHC_order[2] % 8) == 0){
			//n
			draw_letter(13);
			for(k=0;k<6;k++){
    2414:	d9 f7       	brne	.-10     	; 0x240c <draw_toxx+0x5e>
				send_data(0x00);
			}
		}
		if((current_MEHC_order[2] % 8) == 1){
    2416:	80 91 18 02 	lds	r24, 0x0218
    241a:	87 70       	andi	r24, 0x07	; 7
    241c:	81 30       	cpi	r24, 0x01	; 1
    241e:	49 f4       	brne	.+18     	; 0x2432 <draw_toxx+0x84>
			//s
			draw_letter(18);
    2420:	82 e1       	ldi	r24, 0x12	; 18
    2422:	0e 94 00 08 	call	0x1000	; 0x1000 <draw_letter>
    2426:	c6 e0       	ldi	r28, 0x06	; 6
			for(k=0;k<6;k++){
				send_data(0x00);
    2428:	80 e0       	ldi	r24, 0x00	; 0
    242a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    242e:	c1 50       	subi	r28, 0x01	; 1
			}
		}
		if((current_MEHC_order[2] % 8) == 1){
			//s
			draw_letter(18);
			for(k=0;k<6;k++){
    2430:	d9 f7       	brne	.-10     	; 0x2428 <draw_toxx+0x7a>
				send_data(0x00);
			}
		}
		if((current_MEHC_order[2] % 8) == 2){
    2432:	80 91 18 02 	lds	r24, 0x0218
    2436:	87 70       	andi	r24, 0x07	; 7
    2438:	82 30       	cpi	r24, 0x02	; 2
    243a:	49 f4       	brne	.+18     	; 0x244e <draw_toxx+0xa0>
			//e
			draw_letter(4);
    243c:	84 e0       	ldi	r24, 0x04	; 4
    243e:	0e 94 00 08 	call	0x1000	; 0x1000 <draw_letter>
    2442:	c6 e0       	ldi	r28, 0x06	; 6
			for(k=0;k<6;k++){
				send_data(0x00);
    2444:	80 e0       	ldi	r24, 0x00	; 0
    2446:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    244a:	c1 50       	subi	r28, 0x01	; 1
			}
		}
		if((current_MEHC_order[2] % 8) == 2){
			//e
			draw_letter(4);
			for(k=0;k<6;k++){
    244c:	d9 f7       	brne	.-10     	; 0x2444 <draw_toxx+0x96>
				send_data(0x00);
			}
		}
		if((current_MEHC_order[2] % 8) == 3){
    244e:	80 91 18 02 	lds	r24, 0x0218
    2452:	87 70       	andi	r24, 0x07	; 7
    2454:	83 30       	cpi	r24, 0x03	; 3
    2456:	49 f4       	brne	.+18     	; 0x246a <draw_toxx+0xbc>
			//w
			draw_letter(22);
    2458:	86 e1       	ldi	r24, 0x16	; 22
    245a:	0e 94 00 08 	call	0x1000	; 0x1000 <draw_letter>
    245e:	c6 e0       	ldi	r28, 0x06	; 6
			for(k=0;k<6;k++){
				send_data(0x00);
    2460:	80 e0       	ldi	r24, 0x00	; 0
    2462:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    2466:	c1 50       	subi	r28, 0x01	; 1
			}
		}
		if((current_MEHC_order[2] % 8) == 3){
			//w
			draw_letter(22);
			for(k=0;k<6;k++){
    2468:	d9 f7       	brne	.-10     	; 0x2460 <draw_toxx+0xb2>
				send_data(0x00);
			}
		}
		if((current_MEHC_order[2] % 8) == 4){
    246a:	80 91 18 02 	lds	r24, 0x0218
    246e:	87 70       	andi	r24, 0x07	; 7
    2470:	84 30       	cpi	r24, 0x04	; 4
    2472:	31 f4       	brne	.+12     	; 0x2480 <draw_toxx+0xd2>
			//ne
			draw_letter(13);
    2474:	8d e0       	ldi	r24, 0x0D	; 13
    2476:	0e 94 00 08 	call	0x1000	; 0x1000 <draw_letter>
			draw_letter(4);
    247a:	84 e0       	ldi	r24, 0x04	; 4
    247c:	0e 94 00 08 	call	0x1000	; 0x1000 <draw_letter>
		}
		if((current_MEHC_order[2] % 8) == 5){
    2480:	80 91 18 02 	lds	r24, 0x0218
    2484:	87 70       	andi	r24, 0x07	; 7
    2486:	85 30       	cpi	r24, 0x05	; 5
    2488:	31 f4       	brne	.+12     	; 0x2496 <draw_toxx+0xe8>
			//nw
			draw_letter(13);
    248a:	8d e0       	ldi	r24, 0x0D	; 13
    248c:	0e 94 00 08 	call	0x1000	; 0x1000 <draw_letter>
			draw_letter(22);
    2490:	86 e1       	ldi	r24, 0x16	; 22
    2492:	0e 94 00 08 	call	0x1000	; 0x1000 <draw_letter>
		}
		if((current_MEHC_order[2] % 8) == 6){
    2496:	80 91 18 02 	lds	r24, 0x0218
    249a:	87 70       	andi	r24, 0x07	; 7
    249c:	86 30       	cpi	r24, 0x06	; 6
    249e:	31 f4       	brne	.+12     	; 0x24ac <draw_toxx+0xfe>
			//se
			draw_letter(18);
    24a0:	82 e1       	ldi	r24, 0x12	; 18
    24a2:	0e 94 00 08 	call	0x1000	; 0x1000 <draw_letter>
			draw_letter(4);
    24a6:	84 e0       	ldi	r24, 0x04	; 4
    24a8:	0e 94 00 08 	call	0x1000	; 0x1000 <draw_letter>
		}
		if((current_MEHC_order[2] % 8) == 7){
    24ac:	80 91 18 02 	lds	r24, 0x0218
    24b0:	87 70       	andi	r24, 0x07	; 7
    24b2:	87 30       	cpi	r24, 0x07	; 7
    24b4:	09 f0       	breq	.+2      	; 0x24b8 <draw_toxx+0x10a>
    24b6:	74 c0       	rjmp	.+232    	; 0x25a0 <draw_toxx+0x1f2>
			//sw
			draw_letter(18);
    24b8:	82 e1       	ldi	r24, 0x12	; 18
    24ba:	0e 94 00 08 	call	0x1000	; 0x1000 <draw_letter>
			draw_letter(22);
    24be:	86 e1       	ldi	r24, 0x16	; 22
    24c0:	0e 94 00 08 	call	0x1000	; 0x1000 <draw_letter>
    24c4:	6d c0       	rjmp	.+218    	; 0x25a0 <draw_toxx+0x1f2>
		}
	}
	
	if(current_or_past == 2){ //past
    24c6:	d2 30       	cpi	r29, 0x02	; 2
    24c8:	09 f0       	breq	.+2      	; 0x24cc <draw_toxx+0x11e>
    24ca:	6a c0       	rjmp	.+212    	; 0x25a0 <draw_toxx+0x1f2>
		//N S E W NE NW SE SW go here
		if((previous_MEHC_order[2] % 8) == 0){
    24cc:	80 91 0e 02 	lds	r24, 0x020E
    24d0:	87 70       	andi	r24, 0x07	; 7
    24d2:	49 f4       	brne	.+18     	; 0x24e6 <draw_toxx+0x138>
			//n
			draw_letter(13);
    24d4:	8d e0       	ldi	r24, 0x0D	; 13
    24d6:	0e 94 00 08 	call	0x1000	; 0x1000 <draw_letter>
    24da:	c6 e0       	ldi	r28, 0x06	; 6
			for(k=0;k<6;k++){
				send_data(0x00);
    24dc:	80 e0       	ldi	r24, 0x00	; 0
    24de:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    24e2:	c1 50       	subi	r28, 0x01	; 1
	if(current_or_past == 2){ //past
		//N S E W NE NW SE SW go here
		if((previous_MEHC_order[2] % 8) == 0){
			//n
			draw_letter(13);
			for(k=0;k<6;k++){
    24e4:	d9 f7       	brne	.-10     	; 0x24dc <draw_toxx+0x12e>
				send_data(0x00);
			}
		}
		if((previous_MEHC_order[2] % 8) == 1){
    24e6:	80 91 0e 02 	lds	r24, 0x020E
    24ea:	87 70       	andi	r24, 0x07	; 7
    24ec:	81 30       	cpi	r24, 0x01	; 1
    24ee:	49 f4       	brne	.+18     	; 0x2502 <draw_toxx+0x154>
			//s
			draw_letter(18);
    24f0:	82 e1       	ldi	r24, 0x12	; 18
    24f2:	0e 94 00 08 	call	0x1000	; 0x1000 <draw_letter>
    24f6:	c6 e0       	ldi	r28, 0x06	; 6
			for(k=0;k<6;k++){
				send_data(0x00);
    24f8:	80 e0       	ldi	r24, 0x00	; 0
    24fa:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    24fe:	c1 50       	subi	r28, 0x01	; 1
			}
		}
		if((previous_MEHC_order[2] % 8) == 1){
			//s
			draw_letter(18);
			for(k=0;k<6;k++){
    2500:	d9 f7       	brne	.-10     	; 0x24f8 <draw_toxx+0x14a>
				send_data(0x00);
			}
		}
		if((previous_MEHC_order[2] % 8) == 2){
    2502:	80 91 0e 02 	lds	r24, 0x020E
    2506:	87 70       	andi	r24, 0x07	; 7
    2508:	82 30       	cpi	r24, 0x02	; 2
    250a:	49 f4       	brne	.+18     	; 0x251e <draw_toxx+0x170>
			//e
			draw_letter(4);
    250c:	84 e0       	ldi	r24, 0x04	; 4
    250e:	0e 94 00 08 	call	0x1000	; 0x1000 <draw_letter>
    2512:	c6 e0       	ldi	r28, 0x06	; 6
			for(k=0;k<6;k++){
				send_data(0x00);
    2514:	80 e0       	ldi	r24, 0x00	; 0
    2516:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    251a:	c1 50       	subi	r28, 0x01	; 1
			}
		}
		if((previous_MEHC_order[2] % 8) == 2){
			//e
			draw_letter(4);
			for(k=0;k<6;k++){
    251c:	d9 f7       	brne	.-10     	; 0x2514 <draw_toxx+0x166>
				send_data(0x00);
			}
		}
		if((previous_MEHC_order[2] % 8) == 3){
    251e:	80 91 0e 02 	lds	r24, 0x020E
    2522:	87 70       	andi	r24, 0x07	; 7
    2524:	83 30       	cpi	r24, 0x03	; 3
    2526:	49 f4       	brne	.+18     	; 0x253a <draw_toxx+0x18c>
			//w
			draw_letter(22);
    2528:	86 e1       	ldi	r24, 0x16	; 22
    252a:	0e 94 00 08 	call	0x1000	; 0x1000 <draw_letter>
    252e:	c6 e0       	ldi	r28, 0x06	; 6
			for(k=0;k<6;k++){
				send_data(0x00);
    2530:	80 e0       	ldi	r24, 0x00	; 0
    2532:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    2536:	c1 50       	subi	r28, 0x01	; 1
			}
		}
		if((previous_MEHC_order[2] % 8) == 3){
			//w
			draw_letter(22);
			for(k=0;k<6;k++){
    2538:	d9 f7       	brne	.-10     	; 0x2530 <draw_toxx+0x182>
				send_data(0x00);
			}
		}
		if((previous_MEHC_order[2] % 8) == 4){
    253a:	80 91 0e 02 	lds	r24, 0x020E
    253e:	87 70       	andi	r24, 0x07	; 7
    2540:	84 30       	cpi	r24, 0x04	; 4
    2542:	31 f4       	brne	.+12     	; 0x2550 <draw_toxx+0x1a2>
			//ne
			draw_letter(13);
    2544:	8d e0       	ldi	r24, 0x0D	; 13
    2546:	0e 94 00 08 	call	0x1000	; 0x1000 <draw_letter>
			draw_letter(4);
    254a:	84 e0       	ldi	r24, 0x04	; 4
    254c:	0e 94 00 08 	call	0x1000	; 0x1000 <draw_letter>
		}
		if((previous_MEHC_order[2] % 8) == 5){
    2550:	80 91 0e 02 	lds	r24, 0x020E
    2554:	87 70       	andi	r24, 0x07	; 7
    2556:	85 30       	cpi	r24, 0x05	; 5
    2558:	31 f4       	brne	.+12     	; 0x2566 <draw_toxx+0x1b8>
			//nw
			draw_letter(13);
    255a:	8d e0       	ldi	r24, 0x0D	; 13
    255c:	0e 94 00 08 	call	0x1000	; 0x1000 <draw_letter>
			draw_letter(22);
    2560:	86 e1       	ldi	r24, 0x16	; 22
    2562:	0e 94 00 08 	call	0x1000	; 0x1000 <draw_letter>
		}
		if((previous_MEHC_order[2] % 8) == 6){
    2566:	80 91 0e 02 	lds	r24, 0x020E
    256a:	87 70       	andi	r24, 0x07	; 7
    256c:	86 30       	cpi	r24, 0x06	; 6
    256e:	31 f4       	brne	.+12     	; 0x257c <draw_toxx+0x1ce>
			//se
			draw_letter(18);
    2570:	82 e1       	ldi	r24, 0x12	; 18
    2572:	0e 94 00 08 	call	0x1000	; 0x1000 <draw_letter>
			draw_letter(3);
    2576:	83 e0       	ldi	r24, 0x03	; 3
    2578:	0e 94 00 08 	call	0x1000	; 0x1000 <draw_letter>
		}
		if((previous_MEHC_order[2] % 8) == 7){
    257c:	80 91 0e 02 	lds	r24, 0x020E
    2580:	87 70       	andi	r24, 0x07	; 7
    2582:	87 30       	cpi	r24, 0x07	; 7
    2584:	69 f4       	brne	.+26     	; 0x25a0 <draw_toxx+0x1f2>
			//sw
			draw_letter(18);
    2586:	82 e1       	ldi	r24, 0x12	; 18
    2588:	0e 94 00 08 	call	0x1000	; 0x1000 <draw_letter>
			draw_letter(22);
    258c:	86 e1       	ldi	r24, 0x16	; 22
    258e:	0e 94 00 08 	call	0x1000	; 0x1000 <draw_letter>
    2592:	06 c0       	rjmp	.+12     	; 0x25a0 <draw_toxx+0x1f2>
		}
	}
	
	for(i=0;i<16;i++){
		send_data(0x00);
    2594:	80 e0       	ldi	r24, 0x00	; 0
    2596:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    259a:	c1 50       	subi	r28, 0x01	; 1
			draw_letter(18);
			draw_letter(22);
		}
	}
	
	for(i=0;i<16;i++){
    259c:	d9 f7       	brne	.-10     	; 0x2594 <draw_toxx+0x1e6>
    259e:	02 c0       	rjmp	.+4      	; 0x25a4 <draw_toxx+0x1f6>
				send_data(0x00);
			}
		}
		if((previous_MEHC_order[2] % 8) == 3){
			//w
			draw_letter(22);
    25a0:	c0 e1       	ldi	r28, 0x10	; 16
    25a2:	f8 cf       	rjmp	.-16     	; 0x2594 <draw_toxx+0x1e6>
	}
	
	for(i=0;i<16;i++){
		send_data(0x00);
	}
}
    25a4:	df 91       	pop	r29
    25a6:	cf 91       	pop	r28
    25a8:	08 95       	ret

000025aa <refresh_screen>:
6) Get [ randomly generated 4-letter word ] (GET is chosen because it can mean "become", "obtain", or "comprehend") 
7) Change bearing to (N, S, E, W, NE, NW, SE, SW) until mission is clear 
*/

//void refresh_screen(void); refreshes the screen
void refresh_screen(void){
    25aa:	ef 92       	push	r14
    25ac:	ff 92       	push	r15
    25ae:	1f 93       	push	r17
    25b0:	cf 93       	push	r28
    25b2:	df 93       	push	r29
	uint8_t j=0;
	for(j=0;j<6;j++){
    25b4:	10 e0       	ldi	r17, 0x00	; 0
				draw_deg_n(2);
			}
			if((displayvar == 2) && (previous_MEHC_order[0] == 6)){
				draw_getxxxx(2); //1=current, 2=past
			}
			if((displayvar == 2) && (previous_MEHC_order[0] == 7)){
    25b6:	0f 2e       	mov	r0, r31
    25b8:	fc e0       	ldi	r31, 0x0C	; 12
    25ba:	ef 2e       	mov	r14, r31
    25bc:	f2 e0       	ldi	r31, 0x02	; 2
    25be:	ff 2e       	mov	r15, r31
    25c0:	f0 2d       	mov	r31, r0
				draw_deg_n(1);
			}
			if((displayvar == 1) && (current_MEHC_order[0] == 6)){
				draw_getxxxx(1); //1=current, 2=past | oh boy I get to learn about feeding pointers to arrays into functions!!! ^.^ (BUT NOT TODAY JUST MORE KLUDGES)
			}
			if((displayvar == 1) && (current_MEHC_order[0] == 7)){
    25c2:	c6 e1       	ldi	r28, 0x16	; 22
    25c4:	d2 e0       	ldi	r29, 0x02	; 2

//void refresh_screen(void); refreshes the screen
void refresh_screen(void){
	uint8_t j=0;
	for(j=0;j<6;j++){
		send_command(0xB0 | j); //set page address (0xb0 | address)
    25c6:	81 2f       	mov	r24, r17
    25c8:	80 6b       	ori	r24, 0xB0	; 176
    25ca:	0e 94 61 00 	call	0xc2	; 0xc2 <send_command>
		
		uint8_t add = 0x00; //column address
		send_command((0x10|(add>>4))+0x02); //set column address part one
    25ce:	82 e1       	ldi	r24, 0x12	; 18
    25d0:	0e 94 61 00 	call	0xc2	; 0xc2 <send_command>
		send_command((0x0f&add));//set column address part two
    25d4:	80 e0       	ldi	r24, 0x00	; 0
    25d6:	0e 94 61 00 	call	0xc2	; 0xc2 <send_command>
		uint8_t i=0;
		for(i=0;i<64;i++){
			send_data(screenmemory[i+64*j]);
		}
		*/
		if(j == 0){
    25da:	11 11       	cpse	r17, r1
    25dc:	31 c0       	rjmp	.+98     	; 0x2640 <refresh_screen+0x96>
			displaytimeunit(AB);
    25de:	80 91 07 02 	lds	r24, 0x0207
    25e2:	0e 94 9d 07 	call	0xf3a	; 0xf3a <displaytimeunit>
			draw_period();
    25e6:	0e 94 ed 00 	call	0x1da	; 0x1da <draw_period>
			displaytimeunit(CD);
    25ea:	80 91 06 02 	lds	r24, 0x0206
    25ee:	0e 94 9d 07 	call	0xf3a	; 0xf3a <displaytimeunit>
			displaytimeunit(EF);
    25f2:	80 91 05 02 	lds	r24, 0x0205
    25f6:	0e 94 9d 07 	call	0xf3a	; 0xf3a <displaytimeunit>
			displaytimeunit(GH);
    25fa:	80 91 04 02 	lds	r24, 0x0204
    25fe:	0e 94 9d 07 	call	0xf3a	; 0xf3a <displaytimeunit>
			displaytimeunit(IJ);	
    2602:	80 91 26 02 	lds	r24, 0x0226
    2606:	0e 94 9d 07 	call	0xf3a	; 0xf3a <displaytimeunit>
			
			for(uint8_t i=0;i<2;i++){
				send_data(0x00);
    260a:	80 e0       	ldi	r24, 0x00	; 0
    260c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
				send_data(0x00);
    2610:	80 e0       	ldi	r24, 0x00	; 0
    2612:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
				send_data(0x00);
    2616:	80 e0       	ldi	r24, 0x00	; 0
    2618:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
				send_data(0x00);
    261c:	80 e0       	ldi	r24, 0x00	; 0
    261e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			displaytimeunit(EF);
			displaytimeunit(GH);
			displaytimeunit(IJ);	
			
			for(uint8_t i=0;i<2;i++){
				send_data(0x00);
    2622:	80 e0       	ldi	r24, 0x00	; 0
    2624:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
				send_data(0x00);
    2628:	80 e0       	ldi	r24, 0x00	; 0
    262a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
				send_data(0x00);
    262e:	80 e0       	ldi	r24, 0x00	; 0
    2630:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
				send_data(0x00);
    2634:	80 e0       	ldi	r24, 0x00	; 0
    2636:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			}
			draw_percent();
    263a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <draw_percent>
    263e:	50 c0       	rjmp	.+160    	; 0x26e0 <refresh_screen+0x136>
		}
		if(j==1){
    2640:	11 30       	cpi	r17, 0x01	; 1
    2642:	19 f4       	brne	.+6      	; 0x264a <refresh_screen+0xa0>
			draw_timeisrunningout();
    2644:	0e 94 46 06 	call	0xc8c	; 0xc8c <draw_timeisrunningout>
    2648:	89 c0       	rjmp	.+274    	; 0x275c <refresh_screen+0x1b2>
		}
		if(j==2){
    264a:	12 30       	cpi	r17, 0x02	; 2
    264c:	09 f0       	breq	.+2      	; 0x2650 <refresh_screen+0xa6>
    264e:	48 c0       	rjmp	.+144    	; 0x26e0 <refresh_screen+0x136>
			displaytimeunit(20);
    2650:	84 e1       	ldi	r24, 0x14	; 20
    2652:	0e 94 9d 07 	call	0xf3a	; 0xf3a <displaytimeunit>
			displaytimeunit(years);
    2656:	80 91 00 02 	lds	r24, 0x0200
    265a:	0e 94 9d 07 	call	0xf3a	; 0xf3a <displaytimeunit>
			send_data(0x00);
    265e:	80 e0       	ldi	r24, 0x00	; 0
    2660:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			send_data(0x08);
    2664:	88 e0       	ldi	r24, 0x08	; 8
    2666:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			send_data(0x08);
    266a:	88 e0       	ldi	r24, 0x08	; 8
    266c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			displaytimeunit(months);
    2670:	80 91 01 02 	lds	r24, 0x0201
    2674:	0e 94 9d 07 	call	0xf3a	; 0xf3a <displaytimeunit>
			send_data(0x00);
    2678:	80 e0       	ldi	r24, 0x00	; 0
    267a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			send_data(0x08);
    267e:	88 e0       	ldi	r24, 0x08	; 8
    2680:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			send_data(0x08);
    2684:	88 e0       	ldi	r24, 0x08	; 8
    2686:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			displaytimeunit(days);
    268a:	80 91 02 02 	lds	r24, 0x0202
    268e:	0e 94 9d 07 	call	0xf3a	; 0xf3a <displaytimeunit>
			send_data(0x00);
    2692:	80 e0       	ldi	r24, 0x00	; 0
    2694:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			send_data(0x00);
    2698:	80 e0       	ldi	r24, 0x00	; 0
    269a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			send_data(0x00);
    269e:	80 e0       	ldi	r24, 0x00	; 0
    26a0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			send_data(0x00);
    26a4:	80 e0       	ldi	r24, 0x00	; 0
    26a6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			send_data(0x00);
    26aa:	80 e0       	ldi	r24, 0x00	; 0
    26ac:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			send_data(0x00);
    26b0:	80 e0       	ldi	r24, 0x00	; 0
    26b2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			displaytimeunit(hours);
    26b6:	80 91 08 02 	lds	r24, 0x0208
    26ba:	0e 94 9d 07 	call	0xf3a	; 0xf3a <displaytimeunit>
			send_data(0x00);
    26be:	80 e0       	ldi	r24, 0x00	; 0
    26c0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			send_data(0x38);
    26c4:	88 e3       	ldi	r24, 0x38	; 56
    26c6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			send_data(0x10);
    26ca:	80 e1       	ldi	r24, 0x10	; 16
    26cc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			send_data(0x38);
    26d0:	88 e3       	ldi	r24, 0x38	; 56
    26d2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			displaytimeunit(minutes);
    26d6:	80 91 03 02 	lds	r24, 0x0203
    26da:	0e 94 9d 07 	call	0xf3a	; 0xf3a <displaytimeunit>
    26de:	2a c1       	rjmp	.+596    	; 0x2934 <refresh_screen+0x38a>
		}		
		if(j==3){
    26e0:	13 30       	cpi	r17, 0x03	; 3
    26e2:	e1 f5       	brne	.+120    	; 0x275c <refresh_screen+0x1b2>
			if((displayvar == 0) && (hours_until_next_MEHC_order > 0)){
    26e4:	80 91 25 02 	lds	r24, 0x0225
    26e8:	81 11       	cpse	r24, r1
    26ea:	05 c0       	rjmp	.+10     	; 0x26f6 <refresh_screen+0x14c>
    26ec:	80 91 20 02 	lds	r24, 0x0220
    26f0:	81 11       	cpse	r24, r1
				draw_blankline();
    26f2:	0e 94 22 0a 	call	0x1444	; 0x1444 <draw_blankline>
			}
			if((displayvar == 0) && (hours_until_next_MEHC_order == 0)){
    26f6:	80 91 25 02 	lds	r24, 0x0225
    26fa:	81 11       	cpse	r24, r1
    26fc:	06 c0       	rjmp	.+12     	; 0x270a <refresh_screen+0x160>
    26fe:	80 91 20 02 	lds	r24, 0x0220
    2702:	81 11       	cpse	r24, r1
    2704:	02 c0       	rjmp	.+4      	; 0x270a <refresh_screen+0x160>
				draw_newordersfrom();
    2706:	0e 94 03 04 	call	0x806	; 0x806 <draw_newordersfrom>
			}
			if((displayvar == 1) && (current_MEHC_order[0] != 5)){
    270a:	80 91 25 02 	lds	r24, 0x0225
    270e:	81 30       	cpi	r24, 0x01	; 1
    2710:	29 f4       	brne	.+10     	; 0x271c <refresh_screen+0x172>
    2712:	88 81       	ld	r24, Y
    2714:	85 30       	cpi	r24, 0x05	; 5
    2716:	11 f0       	breq	.+4      	; 0x271c <refresh_screen+0x172>
				draw_blankline();
    2718:	0e 94 22 0a 	call	0x1444	; 0x1444 <draw_blankline>
			}
			if((displayvar == 2) && (previous_MEHC_order[0] != 5)){
    271c:	80 91 25 02 	lds	r24, 0x0225
    2720:	82 30       	cpi	r24, 0x02	; 2
    2722:	31 f4       	brne	.+12     	; 0x2730 <refresh_screen+0x186>
    2724:	f7 01       	movw	r30, r14
    2726:	80 81       	ld	r24, Z
    2728:	85 30       	cpi	r24, 0x05	; 5
    272a:	11 f0       	breq	.+4      	; 0x2730 <refresh_screen+0x186>
				draw_blankline();
    272c:	0e 94 22 0a 	call	0x1444	; 0x1444 <draw_blankline>
			}
			if((displayvar == 1) && (current_MEHC_order[0] == 5)){
    2730:	80 91 25 02 	lds	r24, 0x0225
    2734:	81 30       	cpi	r24, 0x01	; 1
    2736:	29 f4       	brne	.+10     	; 0x2742 <refresh_screen+0x198>
    2738:	88 81       	ld	r24, Y
    273a:	85 30       	cpi	r24, 0x05	; 5
    273c:	11 f4       	brne	.+4      	; 0x2742 <refresh_screen+0x198>
				draw_goto();
    273e:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <draw_goto>
			}
			if((displayvar == 2) && (previous_MEHC_order[0] == 5)){
    2742:	80 91 25 02 	lds	r24, 0x0225
    2746:	82 30       	cpi	r24, 0x02	; 2
    2748:	09 f0       	breq	.+2      	; 0x274c <refresh_screen+0x1a2>
    274a:	e6 c1       	rjmp	.+972    	; 0x2b18 <refresh_screen+0x56e>
    274c:	f7 01       	movw	r30, r14
    274e:	80 81       	ld	r24, Z
    2750:	85 30       	cpi	r24, 0x05	; 5
    2752:	09 f0       	breq	.+2      	; 0x2756 <refresh_screen+0x1ac>
    2754:	e1 c1       	rjmp	.+962    	; 0x2b18 <refresh_screen+0x56e>
				draw_goto();
    2756:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <draw_goto>
    275a:	de c1       	rjmp	.+956    	; 0x2b18 <refresh_screen+0x56e>
			}			
		}
		
		if(j==4){
    275c:	14 30       	cpi	r17, 0x04	; 4
    275e:	09 f0       	breq	.+2      	; 0x2762 <refresh_screen+0x1b8>
    2760:	e9 c0       	rjmp	.+466    	; 0x2934 <refresh_screen+0x38a>
			if((displayvar == 0) && (hours_until_next_MEHC_order > 0)){
    2762:	80 91 25 02 	lds	r24, 0x0225
    2766:	81 11       	cpse	r24, r1
    2768:	3c c0       	rjmp	.+120    	; 0x27e2 <refresh_screen+0x238>
    276a:	80 91 20 02 	lds	r24, 0x0220
    276e:	88 23       	and	r24, r24
    2770:	c1 f1       	breq	.+112    	; 0x27e2 <refresh_screen+0x238>
				display_top_timeunit(hours);
    2772:	80 91 08 02 	lds	r24, 0x0208
    2776:	0e 94 be 07 	call	0xf7c	; 0xf7c <display_top_timeunit>
				send_data(0x00);
    277a:	80 e0       	ldi	r24, 0x00	; 0
    277c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
				send_data(0x00);
    2780:	80 e0       	ldi	r24, 0x00	; 0
    2782:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
				send_data(0x00);
    2786:	80 e0       	ldi	r24, 0x00	; 0
    2788:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
				send_data(0x80);
    278c:	80 e8       	ldi	r24, 0x80	; 128
    278e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
				send_data(0x80);
    2792:	80 e8       	ldi	r24, 0x80	; 128
    2794:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
				send_data(0x80);
    2798:	80 e8       	ldi	r24, 0x80	; 128
    279a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
				send_data(0x00);
    279e:	80 e0       	ldi	r24, 0x00	; 0
    27a0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
				send_data(0x00);
    27a4:	80 e0       	ldi	r24, 0x00	; 0
    27a6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
				send_data(0x00);
    27aa:	80 e0       	ldi	r24, 0x00	; 0
    27ac:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
				send_data(0x80);
    27b0:	80 e8       	ldi	r24, 0x80	; 128
    27b2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
				send_data(0x80);
    27b6:	80 e8       	ldi	r24, 0x80	; 128
    27b8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
				send_data(0x80);
    27bc:	80 e8       	ldi	r24, 0x80	; 128
    27be:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
				display_top_timeunit(minutes);
    27c2:	80 91 03 02 	lds	r24, 0x0203
    27c6:	0e 94 be 07 	call	0xf7c	; 0xf7c <display_top_timeunit>
				send_data(0x00);
    27ca:	80 e0       	ldi	r24, 0x00	; 0
    27cc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
				send_data(0x00);
    27d0:	80 e0       	ldi	r24, 0x00	; 0
    27d2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
				send_data(0x00);
    27d6:	80 e0       	ldi	r24, 0x00	; 0
    27d8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
				send_data(0x00);
    27dc:	80 e0       	ldi	r24, 0x00	; 0
    27de:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			}
			if((displayvar == 0) && (hours_until_next_MEHC_order == 0)){
    27e2:	80 91 25 02 	lds	r24, 0x0225
    27e6:	81 11       	cpse	r24, r1
    27e8:	06 c0       	rjmp	.+12     	; 0x27f6 <refresh_screen+0x24c>
    27ea:	80 91 20 02 	lds	r24, 0x0220
    27ee:	81 11       	cpse	r24, r1
    27f0:	02 c0       	rjmp	.+4      	; 0x27f6 <refresh_screen+0x24c>
				draw_machineempire();
    27f2:	0e 94 c4 04 	call	0x988	; 0x988 <draw_machineempire>
			}
			//current order
			if((displayvar == 1) && (current_MEHC_order[0] == 0)){
    27f6:	80 91 25 02 	lds	r24, 0x0225
    27fa:	81 30       	cpi	r24, 0x01	; 1
    27fc:	29 f4       	brne	.+10     	; 0x2808 <refresh_screen+0x25e>
    27fe:	88 81       	ld	r24, Y
    2800:	81 11       	cpse	r24, r1
    2802:	02 c0       	rjmp	.+4      	; 0x2808 <refresh_screen+0x25e>
				draw_stopandmeditate();
    2804:	0e 94 2b 0a 	call	0x1456	; 0x1456 <draw_stopandmeditate>
			}
			if((displayvar == 1) && (current_MEHC_order[0] == 1)){
    2808:	80 91 25 02 	lds	r24, 0x0225
    280c:	81 30       	cpi	r24, 0x01	; 1
    280e:	29 f4       	brne	.+10     	; 0x281a <refresh_screen+0x270>
    2810:	88 81       	ld	r24, Y
    2812:	81 30       	cpi	r24, 0x01	; 1
    2814:	11 f4       	brne	.+4      	; 0x281a <refresh_screen+0x270>
				draw_tendself();
    2816:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <draw_tendself>
			}
			if((displayvar == 1) && (current_MEHC_order[0] == 2)){
    281a:	80 91 25 02 	lds	r24, 0x0225
    281e:	81 30       	cpi	r24, 0x01	; 1
    2820:	29 f4       	brne	.+10     	; 0x282c <refresh_screen+0x282>
    2822:	88 81       	ld	r24, Y
    2824:	82 30       	cpi	r24, 0x02	; 2
    2826:	11 f4       	brne	.+4      	; 0x282c <refresh_screen+0x282>
				draw_climbmarshill();
    2828:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <draw_climbmarshill>
			}
			if((displayvar == 1) && (current_MEHC_order[0] == 3)){
    282c:	80 91 25 02 	lds	r24, 0x0225
    2830:	81 30       	cpi	r24, 0x01	; 1
    2832:	29 f4       	brne	.+10     	; 0x283e <refresh_screen+0x294>
    2834:	88 81       	ld	r24, Y
    2836:	83 30       	cpi	r24, 0x03	; 3
    2838:	11 f4       	brne	.+4      	; 0x283e <refresh_screen+0x294>
				draw_benefitnearest();
    283a:	0e 94 09 0c 	call	0x1812	; 0x1812 <draw_benefitnearest>
			}
			if((displayvar == 1) && (current_MEHC_order[0] == 4)){
    283e:	80 91 25 02 	lds	r24, 0x0225
    2842:	81 30       	cpi	r24, 0x01	; 1
    2844:	29 f4       	brne	.+10     	; 0x2850 <refresh_screen+0x2a6>
    2846:	88 81       	ld	r24, Y
    2848:	84 30       	cpi	r24, 0x04	; 4
    284a:	11 f4       	brne	.+4      	; 0x2850 <refresh_screen+0x2a6>
				draw_fixsomething();
    284c:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <draw_fixsomething>
			}
			if((displayvar == 1) && (current_MEHC_order[0] == 5)){
    2850:	80 91 25 02 	lds	r24, 0x0225
    2854:	81 30       	cpi	r24, 0x01	; 1
    2856:	31 f4       	brne	.+12     	; 0x2864 <refresh_screen+0x2ba>
    2858:	88 81       	ld	r24, Y
    285a:	85 30       	cpi	r24, 0x05	; 5
    285c:	19 f4       	brne	.+6      	; 0x2864 <refresh_screen+0x2ba>
				draw_deg_n(1);
    285e:	81 e0       	ldi	r24, 0x01	; 1
    2860:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <draw_deg_n>
			}
			if((displayvar == 1) && (current_MEHC_order[0] == 6)){
    2864:	80 91 25 02 	lds	r24, 0x0225
    2868:	81 30       	cpi	r24, 0x01	; 1
    286a:	31 f4       	brne	.+12     	; 0x2878 <refresh_screen+0x2ce>
    286c:	88 81       	ld	r24, Y
    286e:	86 30       	cpi	r24, 0x06	; 6
    2870:	19 f4       	brne	.+6      	; 0x2878 <refresh_screen+0x2ce>
				draw_getxxxx(1); //1=current, 2=past | oh boy I get to learn about feeding pointers to arrays into functions!!! ^.^ (BUT NOT TODAY JUST MORE KLUDGES)
    2872:	81 e0       	ldi	r24, 0x01	; 1
    2874:	0e 94 56 10 	call	0x20ac	; 0x20ac <draw_getxxxx>
			}
			if((displayvar == 1) && (current_MEHC_order[0] == 7)){
    2878:	80 91 25 02 	lds	r24, 0x0225
    287c:	81 30       	cpi	r24, 0x01	; 1
    287e:	29 f4       	brne	.+10     	; 0x288a <refresh_screen+0x2e0>
    2880:	88 81       	ld	r24, Y
    2882:	87 30       	cpi	r24, 0x07	; 7
    2884:	11 f4       	brne	.+4      	; 0x288a <refresh_screen+0x2e0>
				draw_changebearing();
    2886:	0e 94 2f 11 	call	0x225e	; 0x225e <draw_changebearing>
			}
			//previous order
			if((displayvar == 2) && (previous_MEHC_order[0] == 0)){
    288a:	80 91 25 02 	lds	r24, 0x0225
    288e:	82 30       	cpi	r24, 0x02	; 2
    2890:	31 f4       	brne	.+12     	; 0x289e <refresh_screen+0x2f4>
    2892:	f7 01       	movw	r30, r14
    2894:	80 81       	ld	r24, Z
    2896:	81 11       	cpse	r24, r1
    2898:	02 c0       	rjmp	.+4      	; 0x289e <refresh_screen+0x2f4>
				draw_stopandmeditate();
    289a:	0e 94 2b 0a 	call	0x1456	; 0x1456 <draw_stopandmeditate>
			}
			if((displayvar == 2) && (previous_MEHC_order[0] == 1)){
    289e:	80 91 25 02 	lds	r24, 0x0225
    28a2:	82 30       	cpi	r24, 0x02	; 2
    28a4:	31 f4       	brne	.+12     	; 0x28b2 <refresh_screen+0x308>
    28a6:	f7 01       	movw	r30, r14
    28a8:	80 81       	ld	r24, Z
    28aa:	81 30       	cpi	r24, 0x01	; 1
    28ac:	11 f4       	brne	.+4      	; 0x28b2 <refresh_screen+0x308>
				draw_tendself();
    28ae:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <draw_tendself>
			}
			if((displayvar == 2) && (previous_MEHC_order[0] == 2)){
    28b2:	80 91 25 02 	lds	r24, 0x0225
    28b6:	82 30       	cpi	r24, 0x02	; 2
    28b8:	31 f4       	brne	.+12     	; 0x28c6 <refresh_screen+0x31c>
    28ba:	f7 01       	movw	r30, r14
    28bc:	80 81       	ld	r24, Z
    28be:	82 30       	cpi	r24, 0x02	; 2
    28c0:	11 f4       	brne	.+4      	; 0x28c6 <refresh_screen+0x31c>
				draw_climbmarshill();
    28c2:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <draw_climbmarshill>
			}
			if((displayvar == 2) && (previous_MEHC_order[0] == 3)){
    28c6:	80 91 25 02 	lds	r24, 0x0225
    28ca:	82 30       	cpi	r24, 0x02	; 2
    28cc:	31 f4       	brne	.+12     	; 0x28da <refresh_screen+0x330>
    28ce:	f7 01       	movw	r30, r14
    28d0:	80 81       	ld	r24, Z
    28d2:	83 30       	cpi	r24, 0x03	; 3
    28d4:	11 f4       	brne	.+4      	; 0x28da <refresh_screen+0x330>
				draw_benefitnearest();
    28d6:	0e 94 09 0c 	call	0x1812	; 0x1812 <draw_benefitnearest>
			}
			if((displayvar == 2) && (previous_MEHC_order[0] == 4)){
    28da:	80 91 25 02 	lds	r24, 0x0225
    28de:	82 30       	cpi	r24, 0x02	; 2
    28e0:	31 f4       	brne	.+12     	; 0x28ee <refresh_screen+0x344>
    28e2:	f7 01       	movw	r30, r14
    28e4:	80 81       	ld	r24, Z
    28e6:	84 30       	cpi	r24, 0x04	; 4
    28e8:	11 f4       	brne	.+4      	; 0x28ee <refresh_screen+0x344>
				draw_fixsomething();
    28ea:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <draw_fixsomething>
			}
			if((displayvar == 2) && (previous_MEHC_order[0] == 5)){
    28ee:	80 91 25 02 	lds	r24, 0x0225
    28f2:	82 30       	cpi	r24, 0x02	; 2
    28f4:	39 f4       	brne	.+14     	; 0x2904 <refresh_screen+0x35a>
    28f6:	f7 01       	movw	r30, r14
    28f8:	80 81       	ld	r24, Z
    28fa:	85 30       	cpi	r24, 0x05	; 5
    28fc:	19 f4       	brne	.+6      	; 0x2904 <refresh_screen+0x35a>
				draw_deg_n(2);
    28fe:	82 e0       	ldi	r24, 0x02	; 2
    2900:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <draw_deg_n>
			}
			if((displayvar == 2) && (previous_MEHC_order[0] == 6)){
    2904:	80 91 25 02 	lds	r24, 0x0225
    2908:	82 30       	cpi	r24, 0x02	; 2
    290a:	39 f4       	brne	.+14     	; 0x291a <refresh_screen+0x370>
    290c:	f7 01       	movw	r30, r14
    290e:	80 81       	ld	r24, Z
    2910:	86 30       	cpi	r24, 0x06	; 6
    2912:	19 f4       	brne	.+6      	; 0x291a <refresh_screen+0x370>
				draw_getxxxx(2); //1=current, 2=past
    2914:	82 e0       	ldi	r24, 0x02	; 2
    2916:	0e 94 56 10 	call	0x20ac	; 0x20ac <draw_getxxxx>
			}
			if((displayvar == 2) && (previous_MEHC_order[0] == 7)){
    291a:	80 91 25 02 	lds	r24, 0x0225
    291e:	82 30       	cpi	r24, 0x02	; 2
    2920:	09 f0       	breq	.+2      	; 0x2924 <refresh_screen+0x37a>
    2922:	ff c0       	rjmp	.+510    	; 0x2b22 <refresh_screen+0x578>
    2924:	f7 01       	movw	r30, r14
    2926:	80 81       	ld	r24, Z
    2928:	87 30       	cpi	r24, 0x07	; 7
    292a:	09 f0       	breq	.+2      	; 0x292e <refresh_screen+0x384>
    292c:	fa c0       	rjmp	.+500    	; 0x2b22 <refresh_screen+0x578>
				draw_changebearing();
    292e:	0e 94 2f 11 	call	0x225e	; 0x225e <draw_changebearing>
    2932:	f7 c0       	rjmp	.+494    	; 0x2b22 <refresh_screen+0x578>
			}
		}
		
		if(j==5){
    2934:	15 30       	cpi	r17, 0x05	; 5
    2936:	09 f0       	breq	.+2      	; 0x293a <refresh_screen+0x390>
    2938:	ef c0       	rjmp	.+478    	; 0x2b18 <refresh_screen+0x56e>
			
			if((displayvar == 0) && (hours_until_next_MEHC_order > 0)){
    293a:	80 91 25 02 	lds	r24, 0x0225
    293e:	81 11       	cpse	r24, r1
    2940:	3c c0       	rjmp	.+120    	; 0x29ba <refresh_screen+0x410>
    2942:	80 91 20 02 	lds	r24, 0x0220
    2946:	88 23       	and	r24, r24
    2948:	c1 f1       	breq	.+112    	; 0x29ba <refresh_screen+0x410>
				display_bottom_timeunit(hours);
    294a:	80 91 08 02 	lds	r24, 0x0208
    294e:	0e 94 df 07 	call	0xfbe	; 0xfbe <display_bottom_timeunit>
				send_data(0x00);
    2952:	80 e0       	ldi	r24, 0x00	; 0
    2954:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
				send_data(0x00);
    2958:	80 e0       	ldi	r24, 0x00	; 0
    295a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
				send_data(0x00);
    295e:	80 e0       	ldi	r24, 0x00	; 0
    2960:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
				send_data(0xFF);
    2964:	8f ef       	ldi	r24, 0xFF	; 255
    2966:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
				send_data(0xFF);
    296a:	8f ef       	ldi	r24, 0xFF	; 255
    296c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
				send_data(0xFF);
    2970:	8f ef       	ldi	r24, 0xFF	; 255
    2972:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
				send_data(0x1C);
    2976:	8c e1       	ldi	r24, 0x1C	; 28
    2978:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
				send_data(0x1C);
    297c:	8c e1       	ldi	r24, 0x1C	; 28
    297e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
				send_data(0x1C);
    2982:	8c e1       	ldi	r24, 0x1C	; 28
    2984:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
				send_data(0xFF);
    2988:	8f ef       	ldi	r24, 0xFF	; 255
    298a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
				send_data(0xFF);
    298e:	8f ef       	ldi	r24, 0xFF	; 255
    2990:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
				send_data(0xFF);
    2994:	8f ef       	ldi	r24, 0xFF	; 255
    2996:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
				display_bottom_timeunit(minutes);
    299a:	80 91 03 02 	lds	r24, 0x0203
    299e:	0e 94 df 07 	call	0xfbe	; 0xfbe <display_bottom_timeunit>
				send_data(0x00);
    29a2:	80 e0       	ldi	r24, 0x00	; 0
    29a4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
				send_data(0x00);
    29a8:	80 e0       	ldi	r24, 0x00	; 0
    29aa:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
				send_data(0x00);
    29ae:	80 e0       	ldi	r24, 0x00	; 0
    29b0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
				send_data(0x00);
    29b4:	80 e0       	ldi	r24, 0x00	; 0
    29b6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			}
			if((displayvar == 0) && (hours_until_next_MEHC_order == 0)){
    29ba:	80 91 25 02 	lds	r24, 0x0225
    29be:	81 11       	cpse	r24, r1
    29c0:	06 c0       	rjmp	.+12     	; 0x29ce <refresh_screen+0x424>
    29c2:	80 91 20 02 	lds	r24, 0x0220
    29c6:	81 11       	cpse	r24, r1
    29c8:	02 c0       	rjmp	.+4      	; 0x29ce <refresh_screen+0x424>
				draw_highcommand();
    29ca:	0e 94 85 05 	call	0xb0a	; 0xb0a <draw_highcommand>
			}
			//current order
			if((displayvar == 1) && (current_MEHC_order[0] == 0)){
    29ce:	80 91 25 02 	lds	r24, 0x0225
    29d2:	81 30       	cpi	r24, 0x01	; 1
    29d4:	31 f4       	brne	.+12     	; 0x29e2 <refresh_screen+0x438>
    29d6:	80 91 16 02 	lds	r24, 0x0216
    29da:	81 11       	cpse	r24, r1
    29dc:	02 c0       	rjmp	.+4      	; 0x29e2 <refresh_screen+0x438>
				draw_blankline();
    29de:	0e 94 22 0a 	call	0x1444	; 0x1444 <draw_blankline>
			}
			if((displayvar == 1) && (current_MEHC_order[0] == 1)){
    29e2:	80 91 25 02 	lds	r24, 0x0225
    29e6:	81 30       	cpi	r24, 0x01	; 1
    29e8:	31 f4       	brne	.+12     	; 0x29f6 <refresh_screen+0x44c>
    29ea:	80 91 16 02 	lds	r24, 0x0216
    29ee:	81 30       	cpi	r24, 0x01	; 1
    29f0:	11 f4       	brne	.+4      	; 0x29f6 <refresh_screen+0x44c>
				draw_blankline();
    29f2:	0e 94 22 0a 	call	0x1444	; 0x1444 <draw_blankline>
			}
			if((displayvar == 1) && (current_MEHC_order[0] == 2)){
    29f6:	80 91 25 02 	lds	r24, 0x0225
    29fa:	81 30       	cpi	r24, 0x01	; 1
    29fc:	31 f4       	brne	.+12     	; 0x2a0a <refresh_screen+0x460>
    29fe:	80 91 16 02 	lds	r24, 0x0216
    2a02:	82 30       	cpi	r24, 0x02	; 2
    2a04:	11 f4       	brne	.+4      	; 0x2a0a <refresh_screen+0x460>
				draw_blankline();
    2a06:	0e 94 22 0a 	call	0x1444	; 0x1444 <draw_blankline>
			}
			if((displayvar == 1) && (current_MEHC_order[0] == 3)){
    2a0a:	80 91 25 02 	lds	r24, 0x0225
    2a0e:	81 30       	cpi	r24, 0x01	; 1
    2a10:	31 f4       	brne	.+12     	; 0x2a1e <refresh_screen+0x474>
    2a12:	80 91 16 02 	lds	r24, 0x0216
    2a16:	83 30       	cpi	r24, 0x03	; 3
    2a18:	11 f4       	brne	.+4      	; 0x2a1e <refresh_screen+0x474>
				draw_person();
    2a1a:	0e 94 c0 0c 	call	0x1980	; 0x1980 <draw_person>
			}
			if((displayvar == 1) && (current_MEHC_order[0] == 4)){
    2a1e:	80 91 25 02 	lds	r24, 0x0225
    2a22:	81 30       	cpi	r24, 0x01	; 1
    2a24:	31 f4       	brne	.+12     	; 0x2a32 <refresh_screen+0x488>
    2a26:	80 91 16 02 	lds	r24, 0x0216
    2a2a:	84 30       	cpi	r24, 0x04	; 4
    2a2c:	11 f4       	brne	.+4      	; 0x2a32 <refresh_screen+0x488>
				draw_blankline();
    2a2e:	0e 94 22 0a 	call	0x1444	; 0x1444 <draw_blankline>
			}
			if((displayvar == 1) && (current_MEHC_order[0] == 5)){
    2a32:	80 91 25 02 	lds	r24, 0x0225
    2a36:	81 30       	cpi	r24, 0x01	; 1
    2a38:	39 f4       	brne	.+14     	; 0x2a48 <refresh_screen+0x49e>
    2a3a:	80 91 16 02 	lds	r24, 0x0216
    2a3e:	85 30       	cpi	r24, 0x05	; 5
    2a40:	19 f4       	brne	.+6      	; 0x2a48 <refresh_screen+0x49e>
				draw_deg_e(1);
    2a42:	81 e0       	ldi	r24, 0x01	; 1
    2a44:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <draw_deg_e>
			}
			if((displayvar == 1) && (current_MEHC_order[0] == 6)){
    2a48:	80 91 25 02 	lds	r24, 0x0225
    2a4c:	81 30       	cpi	r24, 0x01	; 1
    2a4e:	31 f4       	brne	.+12     	; 0x2a5c <refresh_screen+0x4b2>
    2a50:	80 91 16 02 	lds	r24, 0x0216
    2a54:	86 30       	cpi	r24, 0x06	; 6
    2a56:	11 f4       	brne	.+4      	; 0x2a5c <refresh_screen+0x4b2>
				draw_blankline();
    2a58:	0e 94 22 0a 	call	0x1444	; 0x1444 <draw_blankline>
			}
			if((displayvar == 1) && (current_MEHC_order[0] == 7)){
    2a5c:	80 91 25 02 	lds	r24, 0x0225
    2a60:	81 30       	cpi	r24, 0x01	; 1
    2a62:	39 f4       	brne	.+14     	; 0x2a72 <refresh_screen+0x4c8>
    2a64:	80 91 16 02 	lds	r24, 0x0216
    2a68:	87 30       	cpi	r24, 0x07	; 7
    2a6a:	19 f4       	brne	.+6      	; 0x2a72 <refresh_screen+0x4c8>
				draw_toxx(1);
    2a6c:	81 e0       	ldi	r24, 0x01	; 1
    2a6e:	0e 94 d7 11 	call	0x23ae	; 0x23ae <draw_toxx>
			}
			//previous order
			if((displayvar == 2) && (previous_MEHC_order[0] == 0)){
    2a72:	80 91 25 02 	lds	r24, 0x0225
    2a76:	82 30       	cpi	r24, 0x02	; 2
    2a78:	31 f4       	brne	.+12     	; 0x2a86 <refresh_screen+0x4dc>
    2a7a:	80 91 0c 02 	lds	r24, 0x020C
    2a7e:	81 11       	cpse	r24, r1
    2a80:	02 c0       	rjmp	.+4      	; 0x2a86 <refresh_screen+0x4dc>
				draw_blankline();
    2a82:	0e 94 22 0a 	call	0x1444	; 0x1444 <draw_blankline>
			}
			if((displayvar == 2) && (previous_MEHC_order[0] == 1)){
    2a86:	80 91 25 02 	lds	r24, 0x0225
    2a8a:	82 30       	cpi	r24, 0x02	; 2
    2a8c:	31 f4       	brne	.+12     	; 0x2a9a <refresh_screen+0x4f0>
    2a8e:	80 91 0c 02 	lds	r24, 0x020C
    2a92:	81 30       	cpi	r24, 0x01	; 1
    2a94:	11 f4       	brne	.+4      	; 0x2a9a <refresh_screen+0x4f0>
				draw_blankline();
    2a96:	0e 94 22 0a 	call	0x1444	; 0x1444 <draw_blankline>
			}
			if((displayvar == 2) && (previous_MEHC_order[0] == 2)){
    2a9a:	80 91 25 02 	lds	r24, 0x0225
    2a9e:	82 30       	cpi	r24, 0x02	; 2
    2aa0:	31 f4       	brne	.+12     	; 0x2aae <refresh_screen+0x504>
    2aa2:	80 91 0c 02 	lds	r24, 0x020C
    2aa6:	82 30       	cpi	r24, 0x02	; 2
    2aa8:	11 f4       	brne	.+4      	; 0x2aae <refresh_screen+0x504>
				draw_blankline();
    2aaa:	0e 94 22 0a 	call	0x1444	; 0x1444 <draw_blankline>
			}
			if((displayvar == 2) && (previous_MEHC_order[0] == 3)){
    2aae:	80 91 25 02 	lds	r24, 0x0225
    2ab2:	82 30       	cpi	r24, 0x02	; 2
    2ab4:	31 f4       	brne	.+12     	; 0x2ac2 <refresh_screen+0x518>
    2ab6:	80 91 0c 02 	lds	r24, 0x020C
    2aba:	83 30       	cpi	r24, 0x03	; 3
    2abc:	11 f4       	brne	.+4      	; 0x2ac2 <refresh_screen+0x518>
				draw_person();
    2abe:	0e 94 c0 0c 	call	0x1980	; 0x1980 <draw_person>
			}
			if((displayvar == 2) && (previous_MEHC_order[0] == 4)){
    2ac2:	80 91 25 02 	lds	r24, 0x0225
    2ac6:	82 30       	cpi	r24, 0x02	; 2
    2ac8:	31 f4       	brne	.+12     	; 0x2ad6 <refresh_screen+0x52c>
    2aca:	80 91 0c 02 	lds	r24, 0x020C
    2ace:	84 30       	cpi	r24, 0x04	; 4
    2ad0:	11 f4       	brne	.+4      	; 0x2ad6 <refresh_screen+0x52c>
				draw_blankline();
    2ad2:	0e 94 22 0a 	call	0x1444	; 0x1444 <draw_blankline>
			}
			if((displayvar == 2) && (previous_MEHC_order[0] == 5)){
    2ad6:	80 91 25 02 	lds	r24, 0x0225
    2ada:	82 30       	cpi	r24, 0x02	; 2
    2adc:	39 f4       	brne	.+14     	; 0x2aec <refresh_screen+0x542>
    2ade:	80 91 0c 02 	lds	r24, 0x020C
    2ae2:	85 30       	cpi	r24, 0x05	; 5
    2ae4:	19 f4       	brne	.+6      	; 0x2aec <refresh_screen+0x542>
				draw_deg_e(2);
    2ae6:	82 e0       	ldi	r24, 0x02	; 2
    2ae8:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <draw_deg_e>
			}
			if((displayvar == 2) && (previous_MEHC_order[0] == 6)){
    2aec:	80 91 25 02 	lds	r24, 0x0225
    2af0:	82 30       	cpi	r24, 0x02	; 2
    2af2:	31 f4       	brne	.+12     	; 0x2b00 <refresh_screen+0x556>
    2af4:	80 91 0c 02 	lds	r24, 0x020C
    2af8:	86 30       	cpi	r24, 0x06	; 6
    2afa:	11 f4       	brne	.+4      	; 0x2b00 <refresh_screen+0x556>
				draw_blankline();
    2afc:	0e 94 22 0a 	call	0x1444	; 0x1444 <draw_blankline>
			}
			if((displayvar == 2) && (previous_MEHC_order[0] == 7)){
    2b00:	80 91 25 02 	lds	r24, 0x0225
    2b04:	82 30       	cpi	r24, 0x02	; 2
    2b06:	79 f4       	brne	.+30     	; 0x2b26 <refresh_screen+0x57c>
    2b08:	80 91 0c 02 	lds	r24, 0x020C
    2b0c:	87 30       	cpi	r24, 0x07	; 7
    2b0e:	59 f4       	brne	.+22     	; 0x2b26 <refresh_screen+0x57c>
				draw_toxx(2);
    2b10:	82 e0       	ldi	r24, 0x02	; 2
    2b12:	0e 94 d7 11 	call	0x23ae	; 0x23ae <draw_toxx>
    2b16:	07 c0       	rjmp	.+14     	; 0x2b26 <refresh_screen+0x57c>
*/

//void refresh_screen(void); refreshes the screen
void refresh_screen(void){
	uint8_t j=0;
	for(j=0;j<6;j++){
    2b18:	1f 5f       	subi	r17, 0xFF	; 255
    2b1a:	16 30       	cpi	r17, 0x06	; 6
    2b1c:	09 f0       	breq	.+2      	; 0x2b20 <refresh_screen+0x576>
    2b1e:	53 cd       	rjmp	.-1370   	; 0x25c6 <refresh_screen+0x1c>
    2b20:	02 c0       	rjmp	.+4      	; 0x2b26 <refresh_screen+0x57c>
    2b22:	1f 5f       	subi	r17, 0xFF	; 255
    2b24:	50 cd       	rjmp	.-1376   	; 0x25c6 <refresh_screen+0x1c>
			}
			
		}
		//---
	}
}
    2b26:	df 91       	pop	r29
    2b28:	cf 91       	pop	r28
    2b2a:	1f 91       	pop	r17
    2b2c:	ff 90       	pop	r15
    2b2e:	ef 90       	pop	r14
    2b30:	08 95       	ret

00002b32 <__vector_5>:

//INTERRUPT SERVICE ROUTINE FOR PIN CHANGE (BUTTON PRESS)
ISR(PCINT2_vect) {
    2b32:	1f 92       	push	r1
    2b34:	0f 92       	push	r0
    2b36:	0f b6       	in	r0, 0x3f	; 63
    2b38:	0f 92       	push	r0
    2b3a:	11 24       	eor	r1, r1
	
	number_of_frames_displayed = 0;
    2b3c:	10 92 0b 02 	sts	0x020B, r1
	//resetting this variable to zero causes the screen to be turned on for a bit while it's re-incremented
}
    2b40:	0f 90       	pop	r0
    2b42:	0f be       	out	0x3f, r0	; 63
    2b44:	0f 90       	pop	r0
    2b46:	1f 90       	pop	r1
    2b48:	18 95       	reti

00002b4a <RTCInit>:

//Timer2 init according to datasheet
void RTCInit(void){
	//Disable timer2 interrupts
	TIMSK2  = 0;
    2b4a:	10 92 70 00 	sts	0x0070, r1
	//Enable asynchronous mode
	ASSR  = (1<<AS2);
    2b4e:	80 e2       	ldi	r24, 0x20	; 32
    2b50:	80 93 b6 00 	sts	0x00B6, r24
	//set initial counter value
	TCNT2=0;
    2b54:	10 92 b2 00 	sts	0x00B2, r1
	//set prescaler 32 (update every 1/4 second)
	TCCR2B |= (1<<CS21)|(1<<CS00);
    2b58:	e1 eb       	ldi	r30, 0xB1	; 177
    2b5a:	f0 e0       	ldi	r31, 0x00	; 0
    2b5c:	80 81       	ld	r24, Z
    2b5e:	83 60       	ori	r24, 0x03	; 3
    2b60:	80 83       	st	Z, r24
	//wait for registers update
	while (ASSR & ((1<<TCN2UB)|(1<<TCR2BUB)));
    2b62:	e6 eb       	ldi	r30, 0xB6	; 182
    2b64:	f0 e0       	ldi	r31, 0x00	; 0
    2b66:	80 81       	ld	r24, Z
    2b68:	81 71       	andi	r24, 0x11	; 17
    2b6a:	e9 f7       	brne	.-6      	; 0x2b66 <RTCInit+0x1c>
	//clear interrupt flags
	TIFR2  = (1<<TOV2);
    2b6c:	81 e0       	ldi	r24, 0x01	; 1
    2b6e:	87 bb       	out	0x17, r24	; 23
	//enable TOV2 interrupt
	TIMSK2  = (1<<TOIE2);
    2b70:	80 93 70 00 	sts	0x0070, r24
    2b74:	08 95       	ret

00002b76 <__vector_9>:
}

//Overflow ISR
ISR(TIMER2_OVF_vect){
    2b76:	1f 92       	push	r1
    2b78:	0f 92       	push	r0
    2b7a:	0f b6       	in	r0, 0x3f	; 63
    2b7c:	0f 92       	push	r0
    2b7e:	11 24       	eor	r1, r1
    2b80:	2f 93       	push	r18
    2b82:	3f 93       	push	r19
    2b84:	4f 93       	push	r20
    2b86:	5f 93       	push	r21
    2b88:	6f 93       	push	r22
    2b8a:	7f 93       	push	r23
    2b8c:	8f 93       	push	r24
    2b8e:	9f 93       	push	r25
    2b90:	af 93       	push	r26
    2b92:	bf 93       	push	r27
    2b94:	ef 93       	push	r30
    2b96:	ff 93       	push	r31
	uint8_t frames_until_turnoff = 35;
	
	if(((PIND & 0x02) == 0x02) && (hours_until_next_MEHC_order == 0)){ //whatever trigger condition for order entry mode goes here
    2b98:	49 9b       	sbis	0x09, 1	; 9
    2b9a:	09 c0       	rjmp	.+18     	; 0x2bae <__vector_9+0x38>
    2b9c:	80 91 20 02 	lds	r24, 0x0220
    2ba0:	81 11       	cpse	r24, r1
    2ba2:	05 c0       	rjmp	.+10     	; 0x2bae <__vector_9+0x38>
		order_array_index = 0;
    2ba4:	10 92 21 02 	sts	0x0221, r1
		order_entry_mode_flag = 1;
    2ba8:	81 e0       	ldi	r24, 0x01	; 1
    2baa:	80 93 24 02 	sts	0x0224, r24
		
//		sleep_disable();
	}
	
	if(((PIND & 0x08) == 0x08) && (order_entry_mode_flag == 0)){
    2bae:	4b 9b       	sbis	0x09, 3	; 9
    2bb0:	0f c0       	rjmp	.+30     	; 0x2bd0 <__vector_9+0x5a>
    2bb2:	80 91 24 02 	lds	r24, 0x0224
    2bb6:	81 11       	cpse	r24, r1
    2bb8:	0b c0       	rjmp	.+22     	; 0x2bd0 <__vector_9+0x5a>
		displayvar++;
    2bba:	80 91 25 02 	lds	r24, 0x0225
    2bbe:	8f 5f       	subi	r24, 0xFF	; 255
    2bc0:	80 93 25 02 	sts	0x0225, r24
		if(displayvar >= 3){
    2bc4:	80 91 25 02 	lds	r24, 0x0225
    2bc8:	83 30       	cpi	r24, 0x03	; 3
    2bca:	10 f0       	brcs	.+4      	; 0x2bd0 <__vector_9+0x5a>
			displayvar = 0;
    2bcc:	10 92 25 02 	sts	0x0225, r1
		}
	}
	
	
	if((rand_int_loaded == 1) && (order_entry_mode_flag == 1)){
    2bd0:	80 91 22 02 	lds	r24, 0x0222
    2bd4:	81 30       	cpi	r24, 0x01	; 1
    2bd6:	09 f0       	breq	.+2      	; 0x2bda <__vector_9+0x64>
    2bd8:	47 c0       	rjmp	.+142    	; 0x2c68 <__vector_9+0xf2>
    2bda:	80 91 24 02 	lds	r24, 0x0224
    2bde:	81 30       	cpi	r24, 0x01	; 1
    2be0:	09 f0       	breq	.+2      	; 0x2be4 <__vector_9+0x6e>
    2be2:	42 c0       	rjmp	.+132    	; 0x2c68 <__vector_9+0xf2>
		if(order_array_index == 0){
    2be4:	80 91 21 02 	lds	r24, 0x0221
    2be8:	81 11       	cpse	r24, r1
    2bea:	1c c0       	rjmp	.+56     	; 0x2c24 <__vector_9+0xae>
    2bec:	80 e0       	ldi	r24, 0x00	; 0
    2bee:	90 e0       	ldi	r25, 0x00	; 0
			uint8_t r = 0;
			for(r=0;r<10;r++){
				previous_MEHC_order[r] = current_MEHC_order[r];
    2bf0:	fc 01       	movw	r30, r24
    2bf2:	ea 5e       	subi	r30, 0xEA	; 234
    2bf4:	fd 4f       	sbci	r31, 0xFD	; 253
    2bf6:	20 81       	ld	r18, Z
    2bf8:	fc 01       	movw	r30, r24
    2bfa:	e4 5f       	subi	r30, 0xF4	; 244
    2bfc:	fd 4f       	sbci	r31, 0xFD	; 253
    2bfe:	20 83       	st	Z, r18
    2c00:	01 96       	adiw	r24, 0x01	; 1
	
	
	if((rand_int_loaded == 1) && (order_entry_mode_flag == 1)){
		if(order_array_index == 0){
			uint8_t r = 0;
			for(r=0;r<10;r++){
    2c02:	8a 30       	cpi	r24, 0x0A	; 10
    2c04:	91 05       	cpc	r25, r1
    2c06:	a1 f7       	brne	.-24     	; 0x2bf0 <__vector_9+0x7a>
				previous_MEHC_order[r] = current_MEHC_order[r];
			}			
		current_MEHC_order[order_array_index] = (rand_int_locked % 8);
    2c08:	e0 91 21 02 	lds	r30, 0x0221
    2c0c:	f0 e0       	ldi	r31, 0x00	; 0
    2c0e:	80 91 23 02 	lds	r24, 0x0223
    2c12:	87 70       	andi	r24, 0x07	; 7
    2c14:	ea 5e       	subi	r30, 0xEA	; 234
    2c16:	fd 4f       	sbci	r31, 0xFD	; 253
    2c18:	80 83       	st	Z, r24
		order_array_index++;
    2c1a:	80 91 21 02 	lds	r24, 0x0221
    2c1e:	8f 5f       	subi	r24, 0xFF	; 255
    2c20:	80 93 21 02 	sts	0x0221, r24
		}
		if(order_array_index > 0){
    2c24:	80 91 21 02 	lds	r24, 0x0221
    2c28:	88 23       	and	r24, r24
    2c2a:	69 f0       	breq	.+26     	; 0x2c46 <__vector_9+0xd0>
			current_MEHC_order[order_array_index] = rand_int_locked;
    2c2c:	e0 91 21 02 	lds	r30, 0x0221
    2c30:	f0 e0       	ldi	r31, 0x00	; 0
    2c32:	80 91 23 02 	lds	r24, 0x0223
    2c36:	ea 5e       	subi	r30, 0xEA	; 234
    2c38:	fd 4f       	sbci	r31, 0xFD	; 253
    2c3a:	80 83       	st	Z, r24
			order_array_index++;
    2c3c:	80 91 21 02 	lds	r24, 0x0221
    2c40:	8f 5f       	subi	r24, 0xFF	; 255
    2c42:	80 93 21 02 	sts	0x0221, r24
		}
		
		///*uncommenting this will set the timer to actually delay the orders
		if(order_array_index >= 7){
    2c46:	80 91 21 02 	lds	r24, 0x0221
    2c4a:	87 30       	cpi	r24, 0x07	; 7
    2c4c:	28 f0       	brcs	.+10     	; 0x2c58 <__vector_9+0xe2>
			hours_until_next_MEHC_order = (current_MEHC_order[6] % 128);			
    2c4e:	80 91 1c 02 	lds	r24, 0x021C
    2c52:	8f 77       	andi	r24, 0x7F	; 127
    2c54:	80 93 20 02 	sts	0x0220, r24
		}
		//uncommenting the above snippet sets timer to actually delay orders*/
		
		if(order_array_index >= 8){ 
    2c58:	80 91 21 02 	lds	r24, 0x0221
    2c5c:	88 30       	cpi	r24, 0x08	; 8
    2c5e:	10 f0       	brcs	.+4      	; 0x2c64 <__vector_9+0xee>
			//this was a 5 before, but it caused me to write outside of the array and mess up the variable hours_until_next_MEHC_order...
			//so I've kludgily extended the array size to work around the effect
			order_entry_mode_flag = 0;
    2c60:	10 92 24 02 	sts	0x0224, r1
		}
		rand_int_loaded = 0;
    2c64:	10 92 22 02 	sts	0x0222, r1
	}
	
	if(number_of_frames_displayed == 0){
    2c68:	80 91 0b 02 	lds	r24, 0x020B
    2c6c:	81 11       	cpse	r24, r1
    2c6e:	03 c0       	rjmp	.+6      	; 0x2c76 <__vector_9+0x100>
		send_command(0xAF); //turn the display on
    2c70:	8f ea       	ldi	r24, 0xAF	; 175
    2c72:	0e 94 61 00 	call	0xc2	; 0xc2 <send_command>
	}	
	if(number_of_frames_displayed < frames_until_turnoff){
    2c76:	80 91 0b 02 	lds	r24, 0x020B
    2c7a:	83 32       	cpi	r24, 0x23	; 35
    2c7c:	40 f4       	brcc	.+16     	; 0x2c8e <__vector_9+0x118>
		refresh_screen();
    2c7e:	0e 94 d5 12 	call	0x25aa	; 0x25aa <refresh_screen>
		number_of_frames_displayed++;
    2c82:	80 91 0b 02 	lds	r24, 0x020B
    2c86:	8f 5f       	subi	r24, 0xFF	; 255
    2c88:	80 93 0b 02 	sts	0x020B, r24
    2c8c:	0b c0       	rjmp	.+22     	; 0x2ca4 <__vector_9+0x12e>
	}else if((number_of_frames_displayed >= frames_until_turnoff) && (order_entry_mode_flag == 0)){
    2c8e:	80 91 0b 02 	lds	r24, 0x020B
    2c92:	83 32       	cpi	r24, 0x23	; 35
    2c94:	38 f0       	brcs	.+14     	; 0x2ca4 <__vector_9+0x12e>
    2c96:	80 91 24 02 	lds	r24, 0x0224
    2c9a:	81 11       	cpse	r24, r1
    2c9c:	03 c0       	rjmp	.+6      	; 0x2ca4 <__vector_9+0x12e>
		send_command(0xAE); //display off command
    2c9e:	8e ea       	ldi	r24, 0xAE	; 174
    2ca0:	0e 94 61 00 	call	0xc2	; 0xc2 <send_command>
	}
	
	IJ--;
    2ca4:	80 91 26 02 	lds	r24, 0x0226
    2ca8:	81 50       	subi	r24, 0x01	; 1
    2caa:	80 93 26 02 	sts	0x0226, r24
	if(IJ == 255){
    2cae:	80 91 26 02 	lds	r24, 0x0226
    2cb2:	8f 3f       	cpi	r24, 0xFF	; 255
    2cb4:	61 f5       	brne	.+88     	; 0x2d0e <__vector_9+0x198>
		IJ = 99;
    2cb6:	83 e6       	ldi	r24, 0x63	; 99
    2cb8:	80 93 26 02 	sts	0x0226, r24
		GH--;
    2cbc:	80 91 04 02 	lds	r24, 0x0204
    2cc0:	81 50       	subi	r24, 0x01	; 1
    2cc2:	80 93 04 02 	sts	0x0204, r24
		if(GH == 255){
    2cc6:	80 91 04 02 	lds	r24, 0x0204
    2cca:	8f 3f       	cpi	r24, 0xFF	; 255
    2ccc:	01 f5       	brne	.+64     	; 0x2d0e <__vector_9+0x198>
			GH = 99;
    2cce:	83 e6       	ldi	r24, 0x63	; 99
    2cd0:	80 93 04 02 	sts	0x0204, r24
			EF--;
    2cd4:	80 91 05 02 	lds	r24, 0x0205
    2cd8:	81 50       	subi	r24, 0x01	; 1
    2cda:	80 93 05 02 	sts	0x0205, r24
			if(EF == 255){
    2cde:	80 91 05 02 	lds	r24, 0x0205
    2ce2:	8f 3f       	cpi	r24, 0xFF	; 255
    2ce4:	a1 f4       	brne	.+40     	; 0x2d0e <__vector_9+0x198>
				EF = 99;
    2ce6:	83 e6       	ldi	r24, 0x63	; 99
    2ce8:	80 93 05 02 	sts	0x0205, r24
				CD--;
    2cec:	80 91 06 02 	lds	r24, 0x0206
    2cf0:	81 50       	subi	r24, 0x01	; 1
    2cf2:	80 93 06 02 	sts	0x0206, r24
				if(CD == 255){
    2cf6:	80 91 06 02 	lds	r24, 0x0206
    2cfa:	8f 3f       	cpi	r24, 0xFF	; 255
    2cfc:	41 f4       	brne	.+16     	; 0x2d0e <__vector_9+0x198>
					CD = 99;
    2cfe:	83 e6       	ldi	r24, 0x63	; 99
    2d00:	80 93 06 02 	sts	0x0206, r24
					AB--; //I should be dead by the time this function breaks
    2d04:	80 91 07 02 	lds	r24, 0x0207
    2d08:	81 50       	subi	r24, 0x01	; 1
    2d0a:	80 93 07 02 	sts	0x0207, r24
			}
		}
	}
	
	
	num_overflows++; //overflows happen every quarter second
    2d0e:	80 91 0a 02 	lds	r24, 0x020A
    2d12:	8f 5f       	subi	r24, 0xFF	; 255
    2d14:	80 93 0a 02 	sts	0x020A, r24
	if(num_overflows % 4 == 0){
    2d18:	80 91 0a 02 	lds	r24, 0x020A
    2d1c:	83 70       	andi	r24, 0x03	; 3
    2d1e:	09 f0       	breq	.+2      	; 0x2d22 <__vector_9+0x1ac>
    2d20:	76 c0       	rjmp	.+236    	; 0x2e0e <__vector_9+0x298>
		seconds++;
    2d22:	80 91 09 02 	lds	r24, 0x0209
    2d26:	8f 5f       	subi	r24, 0xFF	; 255
    2d28:	80 93 09 02 	sts	0x0209, r24
		if(seconds == 60){
    2d2c:	80 91 09 02 	lds	r24, 0x0209
    2d30:	8c 33       	cpi	r24, 0x3C	; 60
    2d32:	09 f0       	breq	.+2      	; 0x2d36 <__vector_9+0x1c0>
    2d34:	6c c0       	rjmp	.+216    	; 0x2e0e <__vector_9+0x298>
			seconds = 0;
    2d36:	10 92 09 02 	sts	0x0209, r1
			minutes++;
    2d3a:	80 91 03 02 	lds	r24, 0x0203
    2d3e:	8f 5f       	subi	r24, 0xFF	; 255
    2d40:	80 93 03 02 	sts	0x0203, r24
			if(minutes == 60){
    2d44:	80 91 03 02 	lds	r24, 0x0203
    2d48:	8c 33       	cpi	r24, 0x3C	; 60
    2d4a:	09 f0       	breq	.+2      	; 0x2d4e <__vector_9+0x1d8>
    2d4c:	60 c0       	rjmp	.+192    	; 0x2e0e <__vector_9+0x298>
				minutes = 0;
    2d4e:	10 92 03 02 	sts	0x0203, r1
				hours++;
    2d52:	80 91 08 02 	lds	r24, 0x0208
    2d56:	8f 5f       	subi	r24, 0xFF	; 255
    2d58:	80 93 08 02 	sts	0x0208, r24
				if(hours_until_next_MEHC_order != 0){
    2d5c:	80 91 20 02 	lds	r24, 0x0220
    2d60:	88 23       	and	r24, r24
    2d62:	29 f0       	breq	.+10     	; 0x2d6e <__vector_9+0x1f8>
					hours_until_next_MEHC_order--;
    2d64:	80 91 20 02 	lds	r24, 0x0220
    2d68:	81 50       	subi	r24, 0x01	; 1
    2d6a:	80 93 20 02 	sts	0x0220, r24
				}				
				if(hours == 24){
    2d6e:	80 91 08 02 	lds	r24, 0x0208
    2d72:	88 31       	cpi	r24, 0x18	; 24
    2d74:	09 f0       	breq	.+2      	; 0x2d78 <__vector_9+0x202>
    2d76:	4b c0       	rjmp	.+150    	; 0x2e0e <__vector_9+0x298>
					hours = 0;
    2d78:	10 92 08 02 	sts	0x0208, r1
					days++;
    2d7c:	80 91 02 02 	lds	r24, 0x0202
    2d80:	8f 5f       	subi	r24, 0xFF	; 255
    2d82:	80 93 02 02 	sts	0x0202, r24
					if((days == 32) || 
    2d86:	80 91 02 02 	lds	r24, 0x0202
    2d8a:	80 32       	cpi	r24, 0x20	; 32
    2d8c:	61 f1       	breq	.+88     	; 0x2de6 <__vector_9+0x270>
					((days == 31) && ((months == 4) || (months == 6) || (months == 9) || (months == 11))) ||
    2d8e:	80 91 02 02 	lds	r24, 0x0202
					hours_until_next_MEHC_order--;
				}				
				if(hours == 24){
					hours = 0;
					days++;
					if((days == 32) || 
    2d92:	8f 31       	cpi	r24, 0x1F	; 31
    2d94:	81 f4       	brne	.+32     	; 0x2db6 <__vector_9+0x240>
					((days == 31) && ((months == 4) || (months == 6) || (months == 9) || (months == 11))) ||
    2d96:	80 91 01 02 	lds	r24, 0x0201
    2d9a:	84 30       	cpi	r24, 0x04	; 4
    2d9c:	21 f1       	breq	.+72     	; 0x2de6 <__vector_9+0x270>
    2d9e:	80 91 01 02 	lds	r24, 0x0201
    2da2:	86 30       	cpi	r24, 0x06	; 6
    2da4:	01 f1       	breq	.+64     	; 0x2de6 <__vector_9+0x270>
    2da6:	80 91 01 02 	lds	r24, 0x0201
    2daa:	89 30       	cpi	r24, 0x09	; 9
    2dac:	e1 f0       	breq	.+56     	; 0x2de6 <__vector_9+0x270>
    2dae:	80 91 01 02 	lds	r24, 0x0201
    2db2:	8b 30       	cpi	r24, 0x0B	; 11
    2db4:	c1 f0       	breq	.+48     	; 0x2de6 <__vector_9+0x270>
					((months == 2) && (days == 29) && ((years % 4) != 0)) ||
    2db6:	80 91 01 02 	lds	r24, 0x0201
				}				
				if(hours == 24){
					hours = 0;
					days++;
					if((days == 32) || 
					((days == 31) && ((months == 4) || (months == 6) || (months == 9) || (months == 11))) ||
    2dba:	82 30       	cpi	r24, 0x02	; 2
    2dbc:	41 f4       	brne	.+16     	; 0x2dce <__vector_9+0x258>
					((months == 2) && (days == 29) && ((years % 4) != 0)) ||
    2dbe:	80 91 02 02 	lds	r24, 0x0202
    2dc2:	8d 31       	cpi	r24, 0x1D	; 29
    2dc4:	21 f4       	brne	.+8      	; 0x2dce <__vector_9+0x258>
    2dc6:	80 91 00 02 	lds	r24, 0x0200
    2dca:	83 70       	andi	r24, 0x03	; 3
    2dcc:	61 f4       	brne	.+24     	; 0x2de6 <__vector_9+0x270>
					((months == 2) && (days == 30) && (years % 4 == 0))){ // note that this code only checks if year % 4 == 0. I should be dead before it breaks.
    2dce:	80 91 01 02 	lds	r24, 0x0201
				if(hours == 24){
					hours = 0;
					days++;
					if((days == 32) || 
					((days == 31) && ((months == 4) || (months == 6) || (months == 9) || (months == 11))) ||
					((months == 2) && (days == 29) && ((years % 4) != 0)) ||
    2dd2:	82 30       	cpi	r24, 0x02	; 2
    2dd4:	e1 f4       	brne	.+56     	; 0x2e0e <__vector_9+0x298>
					((months == 2) && (days == 30) && (years % 4 == 0))){ // note that this code only checks if year % 4 == 0. I should be dead before it breaks.
    2dd6:	80 91 02 02 	lds	r24, 0x0202
    2dda:	8e 31       	cpi	r24, 0x1E	; 30
    2ddc:	c1 f4       	brne	.+48     	; 0x2e0e <__vector_9+0x298>
    2dde:	80 91 00 02 	lds	r24, 0x0200
    2de2:	83 70       	andi	r24, 0x03	; 3
    2de4:	a1 f4       	brne	.+40     	; 0x2e0e <__vector_9+0x298>
						days = 1;
    2de6:	81 e0       	ldi	r24, 0x01	; 1
    2de8:	80 93 02 02 	sts	0x0202, r24
						months ++;
    2dec:	80 91 01 02 	lds	r24, 0x0201
    2df0:	8f 5f       	subi	r24, 0xFF	; 255
    2df2:	80 93 01 02 	sts	0x0201, r24
						if(months == 13){
    2df6:	80 91 01 02 	lds	r24, 0x0201
    2dfa:	8d 30       	cpi	r24, 0x0D	; 13
    2dfc:	41 f4       	brne	.+16     	; 0x2e0e <__vector_9+0x298>
							months = 1;
    2dfe:	81 e0       	ldi	r24, 0x01	; 1
    2e00:	80 93 01 02 	sts	0x0201, r24
							years++;
    2e04:	80 91 00 02 	lds	r24, 0x0200
    2e08:	8f 5f       	subi	r24, 0xFF	; 255
    2e0a:	80 93 00 02 	sts	0x0200, r24
					}					
				}
			}
		}
	}
}
    2e0e:	ff 91       	pop	r31
    2e10:	ef 91       	pop	r30
    2e12:	bf 91       	pop	r27
    2e14:	af 91       	pop	r26
    2e16:	9f 91       	pop	r25
    2e18:	8f 91       	pop	r24
    2e1a:	7f 91       	pop	r23
    2e1c:	6f 91       	pop	r22
    2e1e:	5f 91       	pop	r21
    2e20:	4f 91       	pop	r20
    2e22:	3f 91       	pop	r19
    2e24:	2f 91       	pop	r18
    2e26:	0f 90       	pop	r0
    2e28:	0f be       	out	0x3f, r0	; 63
    2e2a:	0f 90       	pop	r0
    2e2c:	1f 90       	pop	r1
    2e2e:	18 95       	reti

00002e30 <main>:

int main(void){
	DDRB = 0x2F; //Set D/C, RST#, CS#, MOSI, SCK as Output
    2e30:	8f e2       	ldi	r24, 0x2F	; 47
    2e32:	84 b9       	out	0x04, r24	; 4
	DDRD = 0x00; //PIND3=BUTTON_A, PIND2=BUTTON_B, PIND3=BUTTIONC
    2e34:	1a b8       	out	0x0a, r1	; 10
	
	RTCInit();
    2e36:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <RTCInit>
	// Turn interrupts on.
	sei();
    2e3a:	78 94       	sei
	
	//set sleep mode to minimum power while allowing interrupt
	set_sleep_mode(SLEEP_MODE_PWR_SAVE);
    2e3c:	83 b7       	in	r24, 0x33	; 51
    2e3e:	81 7f       	andi	r24, 0xF1	; 241
    2e40:	86 60       	ori	r24, 0x06	; 6
    2e42:	83 bf       	out	0x33, r24	; 51
	PCICR |= _BV(PCIE2); //PIN CHANGE INTERRUPT CONTROL REGISTER (PIN BLOC PCINT16-23)
    2e44:	e8 e6       	ldi	r30, 0x68	; 104
    2e46:	f0 e0       	ldi	r31, 0x00	; 0
    2e48:	80 81       	ld	r24, Z
    2e4a:	84 60       	ori	r24, 0x04	; 4
    2e4c:	80 83       	st	Z, r24
	PCMSK2 |= _BV(PCINT18); //PIN CHANGE interrupt MASK activate pin for BUTTON_B
    2e4e:	ed e6       	ldi	r30, 0x6D	; 109
    2e50:	f0 e0       	ldi	r31, 0x00	; 0
    2e52:	80 81       	ld	r24, Z
    2e54:	84 60       	ori	r24, 0x04	; 4
    2e56:	80 83       	st	Z, r24
	
	//initialize master SPI
	SPIMasterInit();
    2e58:	0e 94 53 00 	call	0xa6	; 0xa6 <SPIMasterInit>

	// Display reset routine (before initialization)
	PORTB |= 0x02;	// Initially set RST HIGH
    2e5c:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2e5e:	81 ee       	ldi	r24, 0xE1	; 225
    2e60:	94 e0       	ldi	r25, 0x04	; 4
    2e62:	01 97       	sbiw	r24, 0x01	; 1
    2e64:	f1 f7       	brne	.-4      	; 0x2e62 <main+0x32>
    2e66:	00 c0       	rjmp	.+0      	; 0x2e68 <main+0x38>
    2e68:	00 00       	nop
	_delay_ms(5);	// VDD (3.3V) goes high at start, lets just chill for 5 ms
	PORTB &= 0xFC;	// Bring RST low, reset the display
    2e6a:	85 b1       	in	r24, 0x05	; 5
    2e6c:	8c 7f       	andi	r24, 0xFC	; 252
    2e6e:	85 b9       	out	0x05, r24	; 5
    2e70:	83 ec       	ldi	r24, 0xC3	; 195
    2e72:	99 e0       	ldi	r25, 0x09	; 9
    2e74:	01 97       	sbiw	r24, 0x01	; 1
    2e76:	f1 f7       	brne	.-4      	; 0x2e74 <main+0x44>
    2e78:	00 c0       	rjmp	.+0      	; 0x2e7a <main+0x4a>
    2e7a:	00 00       	nop
	_delay_ms(10);	// wait 10ms
	PORTB |= 0x02;	// Set RST HIGH, bring out of reset
    2e7c:	29 9a       	sbi	0x05, 1	; 5
	
	
	// Display initialization routine (after reset)
	send_command(0x8D); //set charge pump
    2e7e:	8d e8       	ldi	r24, 0x8D	; 141
    2e80:	0e 94 61 00 	call	0xc2	; 0xc2 <send_command>
	send_command(0x14); //to some setting that's default in the sparkfun arduino library
    2e84:	84 e1       	ldi	r24, 0x14	; 20
    2e86:	0e 94 61 00 	call	0xc2	; 0xc2 <send_command>
	
	send_command(0xAF); //turn the display on
    2e8a:	8f ea       	ldi	r24, 0xAF	; 175
    2e8c:	0e 94 61 00 	call	0xc2	; 0xc2 <send_command>
	
	send_command(0xB0); // sets to memory page 0 (0xB0 | desired page number)
    2e90:	80 eb       	ldi	r24, 0xB0	; 176
    2e92:	0e 94 61 00 	call	0xc2	; 0xc2 <send_command>
	
	uint8_t j=0;
	for(j=0;j<6;j++){
    2e96:	d0 e0       	ldi	r29, 0x00	; 0
	send_command(0xB0 | j);
	uint8_t i=0;
	for(i=0;i<128;i++){
    2e98:	10 e0       	ldi	r17, 0x00	; 0
	
	send_command(0xB0); // sets to memory page 0 (0xB0 | desired page number)
	
	uint8_t j=0;
	for(j=0;j<6;j++){
	send_command(0xB0 | j);
    2e9a:	8d 2f       	mov	r24, r29
    2e9c:	80 6b       	ori	r24, 0xB0	; 176
    2e9e:	0e 94 61 00 	call	0xc2	; 0xc2 <send_command>
	uint8_t i=0;
	for(i=0;i<128;i++){
    2ea2:	c1 2f       	mov	r28, r17
	send_data(i%16);
    2ea4:	8c 2f       	mov	r24, r28
    2ea6:	8f 70       	andi	r24, 0x0F	; 15
    2ea8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	
	uint8_t j=0;
	for(j=0;j<6;j++){
	send_command(0xB0 | j);
	uint8_t i=0;
	for(i=0;i<128;i++){
    2eac:	cf 5f       	subi	r28, 0xFF	; 255
    2eae:	c0 38       	cpi	r28, 0x80	; 128
    2eb0:	c9 f7       	brne	.-14     	; 0x2ea4 <main+0x74>
	send_command(0xAF); //turn the display on
	
	send_command(0xB0); // sets to memory page 0 (0xB0 | desired page number)
	
	uint8_t j=0;
	for(j=0;j<6;j++){
    2eb2:	df 5f       	subi	r29, 0xFF	; 255
    2eb4:	d6 30       	cpi	r29, 0x06	; 6
    2eb6:	89 f7       	brne	.-30     	; 0x2e9a <main+0x6a>
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
	send_data(i%16);
	}
	}
	
	while(1){
			uint8_t rand_int = 0;
    2eba:	20 e0       	ldi	r18, 0x00	; 0
			while(order_entry_mode_flag == 1){
				rand_int++;
				if(((PIND & 0x08) == 0x08) && (rand_int_loaded == 0)){
					rand_int_locked = rand_int;
					rand_int = 0;
					rand_int_loaded = 1;
    2ebc:	31 e0       	ldi	r19, 0x01	; 1
    2ebe:	0e c0       	rjmp	.+28     	; 0x2edc <main+0xac>
	
	while(1){
			uint8_t rand_int = 0;
			
			while(order_entry_mode_flag == 1){
				rand_int++;
    2ec0:	9f 5f       	subi	r25, 0xFF	; 255
				if(((PIND & 0x08) == 0x08) && (rand_int_loaded == 0)){
    2ec2:	4b 9b       	sbis	0x09, 3	; 9
    2ec4:	0b c0       	rjmp	.+22     	; 0x2edc <main+0xac>
    2ec6:	80 91 22 02 	lds	r24, 0x0222
    2eca:	81 11       	cpse	r24, r1
    2ecc:	07 c0       	rjmp	.+14     	; 0x2edc <main+0xac>
					rand_int_locked = rand_int;
    2ece:	90 93 23 02 	sts	0x0223, r25
					rand_int = 0;
					rand_int_loaded = 1;
    2ed2:	30 93 22 02 	sts	0x0222, r19
			
			while(order_entry_mode_flag == 1){
				rand_int++;
				if(((PIND & 0x08) == 0x08) && (rand_int_loaded == 0)){
					rand_int_locked = rand_int;
					rand_int = 0;
    2ed6:	92 2f       	mov	r25, r18
    2ed8:	01 c0       	rjmp	.+2      	; 0x2edc <main+0xac>
	send_data(i%16);
	}
	}
	
	while(1){
			uint8_t rand_int = 0;
    2eda:	92 2f       	mov	r25, r18
			
			while(order_entry_mode_flag == 1){
    2edc:	80 91 24 02 	lds	r24, 0x0224
    2ee0:	81 30       	cpi	r24, 0x01	; 1
    2ee2:	71 f3       	breq	.-36     	; 0x2ec0 <main+0x90>
					rand_int_loaded = 1;
				}
			}


			if(order_entry_mode_flag == 0){
    2ee4:	80 91 24 02 	lds	r24, 0x0224
    2ee8:	81 11       	cpse	r24, r1
    2eea:	f7 cf       	rjmp	.-18     	; 0x2eda <main+0xaa>
				sleep_mode();
    2eec:	83 b7       	in	r24, 0x33	; 51
    2eee:	81 60       	ori	r24, 0x01	; 1
    2ef0:	83 bf       	out	0x33, r24	; 51
    2ef2:	88 95       	sleep
    2ef4:	83 b7       	in	r24, 0x33	; 51
    2ef6:	8e 7f       	andi	r24, 0xFE	; 254
    2ef8:	83 bf       	out	0x33, r24	; 51
	send_data(i%16);
	}
	}
	
	while(1){
			uint8_t rand_int = 0;
    2efa:	92 2f       	mov	r25, r18
    2efc:	ef cf       	rjmp	.-34     	; 0x2edc <main+0xac>

00002efe <__divmodhi4>:
    2efe:	97 fb       	bst	r25, 7
    2f00:	07 2e       	mov	r0, r23
    2f02:	16 f4       	brtc	.+4      	; 0x2f08 <__divmodhi4+0xa>
    2f04:	00 94       	com	r0
    2f06:	07 d0       	rcall	.+14     	; 0x2f16 <__divmodhi4_neg1>
    2f08:	77 fd       	sbrc	r23, 7
    2f0a:	09 d0       	rcall	.+18     	; 0x2f1e <__divmodhi4_neg2>
    2f0c:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <__udivmodhi4>
    2f10:	07 fc       	sbrc	r0, 7
    2f12:	05 d0       	rcall	.+10     	; 0x2f1e <__divmodhi4_neg2>
    2f14:	3e f4       	brtc	.+14     	; 0x2f24 <__divmodhi4_exit>

00002f16 <__divmodhi4_neg1>:
    2f16:	90 95       	com	r25
    2f18:	81 95       	neg	r24
    2f1a:	9f 4f       	sbci	r25, 0xFF	; 255
    2f1c:	08 95       	ret

00002f1e <__divmodhi4_neg2>:
    2f1e:	70 95       	com	r23
    2f20:	61 95       	neg	r22
    2f22:	7f 4f       	sbci	r23, 0xFF	; 255

00002f24 <__divmodhi4_exit>:
    2f24:	08 95       	ret

00002f26 <__udivmodsi4>:
    2f26:	a1 e2       	ldi	r26, 0x21	; 33
    2f28:	1a 2e       	mov	r1, r26
    2f2a:	aa 1b       	sub	r26, r26
    2f2c:	bb 1b       	sub	r27, r27
    2f2e:	fd 01       	movw	r30, r26
    2f30:	0d c0       	rjmp	.+26     	; 0x2f4c <__udivmodsi4_ep>

00002f32 <__udivmodsi4_loop>:
    2f32:	aa 1f       	adc	r26, r26
    2f34:	bb 1f       	adc	r27, r27
    2f36:	ee 1f       	adc	r30, r30
    2f38:	ff 1f       	adc	r31, r31
    2f3a:	a2 17       	cp	r26, r18
    2f3c:	b3 07       	cpc	r27, r19
    2f3e:	e4 07       	cpc	r30, r20
    2f40:	f5 07       	cpc	r31, r21
    2f42:	20 f0       	brcs	.+8      	; 0x2f4c <__udivmodsi4_ep>
    2f44:	a2 1b       	sub	r26, r18
    2f46:	b3 0b       	sbc	r27, r19
    2f48:	e4 0b       	sbc	r30, r20
    2f4a:	f5 0b       	sbc	r31, r21

00002f4c <__udivmodsi4_ep>:
    2f4c:	66 1f       	adc	r22, r22
    2f4e:	77 1f       	adc	r23, r23
    2f50:	88 1f       	adc	r24, r24
    2f52:	99 1f       	adc	r25, r25
    2f54:	1a 94       	dec	r1
    2f56:	69 f7       	brne	.-38     	; 0x2f32 <__udivmodsi4_loop>
    2f58:	60 95       	com	r22
    2f5a:	70 95       	com	r23
    2f5c:	80 95       	com	r24
    2f5e:	90 95       	com	r25
    2f60:	9b 01       	movw	r18, r22
    2f62:	ac 01       	movw	r20, r24
    2f64:	bd 01       	movw	r22, r26
    2f66:	cf 01       	movw	r24, r30
    2f68:	08 95       	ret

00002f6a <__udivmodhi4>:
    2f6a:	aa 1b       	sub	r26, r26
    2f6c:	bb 1b       	sub	r27, r27
    2f6e:	51 e1       	ldi	r21, 0x11	; 17
    2f70:	07 c0       	rjmp	.+14     	; 0x2f80 <__udivmodhi4_ep>

00002f72 <__udivmodhi4_loop>:
    2f72:	aa 1f       	adc	r26, r26
    2f74:	bb 1f       	adc	r27, r27
    2f76:	a6 17       	cp	r26, r22
    2f78:	b7 07       	cpc	r27, r23
    2f7a:	10 f0       	brcs	.+4      	; 0x2f80 <__udivmodhi4_ep>
    2f7c:	a6 1b       	sub	r26, r22
    2f7e:	b7 0b       	sbc	r27, r23

00002f80 <__udivmodhi4_ep>:
    2f80:	88 1f       	adc	r24, r24
    2f82:	99 1f       	adc	r25, r25
    2f84:	5a 95       	dec	r21
    2f86:	a9 f7       	brne	.-22     	; 0x2f72 <__udivmodhi4_loop>
    2f88:	80 95       	com	r24
    2f8a:	90 95       	com	r25
    2f8c:	bc 01       	movw	r22, r24
    2f8e:	cd 01       	movw	r24, r26
    2f90:	08 95       	ret

00002f92 <_exit>:
    2f92:	f8 94       	cli

00002f94 <__stop_program>:
    2f94:	ff cf       	rjmp	.-2      	; 0x2f94 <__stop_program>
