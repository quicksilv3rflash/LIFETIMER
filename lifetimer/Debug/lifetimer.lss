
lifetimer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000005  00800100  00800100  0000074e  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  0000074e  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000d0  00000000  00000000  0000077e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000111a  00000000  00000000  0000084e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000237  00000000  00000000  00001968  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003e1  00000000  00000000  00001b9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001c4  00000000  00000000  00001f80  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002de  00000000  00000000  00002144  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000346  00000000  00000000  00002422  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000d8  00000000  00000000  00002768  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 85 02 	jmp	0x50a	; 0x50a <__vector_5>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__vector_9>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 30       	cpi	r26, 0x05	; 5
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <main>
  88:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <SPIMasterInit>:

//SPI init
void SPIMasterInit(void)
{
	//set MOSI, SCK and SS as output
	DDRB |= (1<<PB3)|(1<<PB5)|(1<<PB2);
  90:	84 b1       	in	r24, 0x04	; 4
  92:	8c 62       	ori	r24, 0x2C	; 44
  94:	84 b9       	out	0x04, r24	; 4
	//set SS to high
	PORTB |= (1<<PB2);
  96:	2a 9a       	sbi	0x05, 2	; 5
	//enable master SPI at clock rate Fck/16
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
  98:	81 e5       	ldi	r24, 0x51	; 81
  9a:	8c bd       	out	0x2c, r24	; 44
  9c:	08 95       	ret

0000009e <SPIMasterSend>:

//master send function
void SPIMasterSend(uint8_t data)
{
	//select slave
	PORTB &= ~(1<<PB2);
  9e:	2a 98       	cbi	0x05, 2	; 5
	//send data
	SPDR=data;
  a0:	8e bd       	out	0x2e, r24	; 46
	//wait for transmition complete
	while (!(SPSR &(1<<SPIF)));
  a2:	0d b4       	in	r0, 0x2d	; 45
  a4:	07 fe       	sbrs	r0, 7
  a6:	fd cf       	rjmp	.-6      	; 0xa2 <SPIMasterSend+0x4>
	//SS to high
	PORTB |= (1<<PB2);
  a8:	2a 9a       	sbi	0x05, 2	; 5
  aa:	08 95       	ret

000000ac <send_command>:
}

//send_command(uint8_t); send COMMAND to the screen
void send_command(uint8_t data){
PORTB &= 0xFE; // pull PORTB0 low to indicate command
  ac:	28 98       	cbi	0x05, 0	; 5
SPIMasterSend(data);
  ae:	0e 94 4f 00 	call	0x9e	; 0x9e <SPIMasterSend>
PORTB |= 0x01; // pull PORTB0 high to indicate data
  b2:	28 9a       	sbi	0x05, 0	; 5
  b4:	08 95       	ret

000000b6 <send_data>:
}


//send_data(uint8_t); send DATA to the screen
void send_data(uint8_t data){
PORTB |= 0x01; // pull PORTB0 high to indicate data
  b6:	28 9a       	sbi	0x05, 0	; 5
SPIMasterSend(data);
  b8:	0e 94 4f 00 	call	0x9e	; 0x9e <SPIMasterSend>
PORTB &= 0xFE; // pull PORTB0 low to indicate command	
  bc:	28 98       	cbi	0x05, 0	; 5
  be:	08 95       	ret

000000c0 <draw_zero>:


//below are draw functions. all start with a space.

void draw_zero(void){
	send_data(0x00);
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x3E);
  c6:	8e e3       	ldi	r24, 0x3E	; 62
  c8:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x22);
  cc:	82 e2       	ldi	r24, 0x22	; 34
  ce:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x3E);
  d2:	8e e3       	ldi	r24, 0x3E	; 62
  d4:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
  d8:	08 95       	ret

000000da <draw_one>:
}

void draw_one(void){
	send_data(0x00);
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x00);
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x00);
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x3E);
  ec:	8e e3       	ldi	r24, 0x3E	; 62
  ee:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
  f2:	08 95       	ret

000000f4 <draw_two>:
}

void draw_two(void){
	send_data(0x00);
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x3A);
  fa:	8a e3       	ldi	r24, 0x3A	; 58
  fc:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x2A);
 100:	8a e2       	ldi	r24, 0x2A	; 42
 102:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x2E);
 106:	8e e2       	ldi	r24, 0x2E	; 46
 108:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
 10c:	08 95       	ret

0000010e <draw_three>:
}

void draw_three(void){
	send_data(0x00);
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x2A);
 114:	8a e2       	ldi	r24, 0x2A	; 42
 116:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x2A);
 11a:	8a e2       	ldi	r24, 0x2A	; 42
 11c:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x3E);
 120:	8e e3       	ldi	r24, 0x3E	; 62
 122:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
 126:	08 95       	ret

00000128 <draw_four>:
}

void draw_four(void){
	send_data(0x00);
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x0E);
 12e:	8e e0       	ldi	r24, 0x0E	; 14
 130:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x08);
 134:	88 e0       	ldi	r24, 0x08	; 8
 136:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x3E);
 13a:	8e e3       	ldi	r24, 0x3E	; 62
 13c:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
 140:	08 95       	ret

00000142 <draw_five>:
}

void draw_five(void){
	send_data(0x00);
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x2E);
 148:	8e e2       	ldi	r24, 0x2E	; 46
 14a:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x2A);
 14e:	8a e2       	ldi	r24, 0x2A	; 42
 150:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x3A);
 154:	8a e3       	ldi	r24, 0x3A	; 58
 156:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
 15a:	08 95       	ret

0000015c <draw_six>:
}

void draw_six(void){
	send_data(0x00);
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x3E);
 162:	8e e3       	ldi	r24, 0x3E	; 62
 164:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x2A);
 168:	8a e2       	ldi	r24, 0x2A	; 42
 16a:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x3A);
 16e:	8a e3       	ldi	r24, 0x3A	; 58
 170:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
 174:	08 95       	ret

00000176 <draw_seven>:
}

void draw_seven(void){
	send_data(0x00);
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x02);
 17c:	82 e0       	ldi	r24, 0x02	; 2
 17e:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x02);
 182:	82 e0       	ldi	r24, 0x02	; 2
 184:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x3E);
 188:	8e e3       	ldi	r24, 0x3E	; 62
 18a:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
 18e:	08 95       	ret

00000190 <draw_eight>:
}

void draw_eight(void){
	send_data(0x00);
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x3E);
 196:	8e e3       	ldi	r24, 0x3E	; 62
 198:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x2A);
 19c:	8a e2       	ldi	r24, 0x2A	; 42
 19e:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x3E);
 1a2:	8e e3       	ldi	r24, 0x3E	; 62
 1a4:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
 1a8:	08 95       	ret

000001aa <draw_nine>:
}

void draw_nine(void){
	send_data(0x00);
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x0E);
 1b0:	8e e0       	ldi	r24, 0x0E	; 14
 1b2:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x0A);
 1b6:	8a e0       	ldi	r24, 0x0A	; 10
 1b8:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x3E);
 1bc:	8e e3       	ldi	r24, 0x3E	; 62
 1be:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
 1c2:	08 95       	ret

000001c4 <draw_period>:
}

void draw_period(void){
	send_data(0x00);
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x20);
 1ca:	80 e2       	ldi	r24, 0x20	; 32
 1cc:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
 1d0:	08 95       	ret

000001d2 <draw_percent>:
}

//draw_percent(void); draws a percent symbol on the screen
void draw_percent(void){
	send_data(0x00);
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x3E);
 1d8:	8e e3       	ldi	r24, 0x3E	; 62
 1da:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x22);
 1de:	82 e2       	ldi	r24, 0x22	; 34
 1e0:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x00);
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x42);
 1ea:	82 e4       	ldi	r24, 0x42	; 66
 1ec:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x25);
 1f0:	85 e2       	ldi	r24, 0x25	; 37
 1f2:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x12);
 1f6:	82 e1       	ldi	r24, 0x12	; 18
 1f8:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x08);
 1fc:	88 e0       	ldi	r24, 0x08	; 8
 1fe:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x24);
 202:	84 e2       	ldi	r24, 0x24	; 36
 204:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x52);
 208:	82 e5       	ldi	r24, 0x52	; 82
 20a:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x21);
 20e:	81 e2       	ldi	r24, 0x21	; 33
 210:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x00);
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x22);
 21a:	82 e2       	ldi	r24, 0x22	; 34
 21c:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x3E);
 220:	8e e3       	ldi	r24, 0x3E	; 62
 222:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
 226:	08 95       	ret

00000228 <draw_timeisrunningout>:
}

//fills one line with the message "TIME IS RUNNING OUT"
void draw_timeisrunningout(void){
	//time
	send_data(0x02);
 228:	82 e0       	ldi	r24, 0x02	; 2
 22a:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x3E);
 22e:	8e e3       	ldi	r24, 0x3E	; 62
 230:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x02);
 234:	82 e0       	ldi	r24, 0x02	; 2
 236:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x00);
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x3E);
 240:	8e e3       	ldi	r24, 0x3E	; 62
 242:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x00);
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x3E);
 24c:	8e e3       	ldi	r24, 0x3E	; 62
 24e:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x04);
 252:	84 e0       	ldi	r24, 0x04	; 4
 254:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x08);
 258:	88 e0       	ldi	r24, 0x08	; 8
 25a:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x04);
 25e:	84 e0       	ldi	r24, 0x04	; 4
 260:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x3E);
 264:	8e e3       	ldi	r24, 0x3E	; 62
 266:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x00);
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x3E);
 270:	8e e3       	ldi	r24, 0x3E	; 62
 272:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x2A);
 276:	8a e2       	ldi	r24, 0x2A	; 42
 278:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x00);
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x00);
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	
	//is
	send_data(0x3E);
 288:	8e e3       	ldi	r24, 0x3E	; 62
 28a:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x00);
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x2C);
 294:	8c e2       	ldi	r24, 0x2C	; 44
 296:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x2A);
 29a:	8a e2       	ldi	r24, 0x2A	; 42
 29c:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x1A);
 2a0:	8a e1       	ldi	r24, 0x1A	; 26
 2a2:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x00);
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x00);
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	
	//running
	send_data(0x3E);
 2b2:	8e e3       	ldi	r24, 0x3E	; 62
 2b4:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x1A);
 2b8:	8a e1       	ldi	r24, 0x1A	; 26
 2ba:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x2E);
 2be:	8e e2       	ldi	r24, 0x2E	; 46
 2c0:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x00);
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x3E);
 2ca:	8e e3       	ldi	r24, 0x3E	; 62
 2cc:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x20);
 2d0:	80 e2       	ldi	r24, 0x20	; 32
 2d2:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x3E);
 2d6:	8e e3       	ldi	r24, 0x3E	; 62
 2d8:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x00);
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x3E);
 2e2:	8e e3       	ldi	r24, 0x3E	; 62
 2e4:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x04);
 2e8:	84 e0       	ldi	r24, 0x04	; 4
 2ea:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x08);
 2ee:	88 e0       	ldi	r24, 0x08	; 8
 2f0:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x3E);
 2f4:	8e e3       	ldi	r24, 0x3E	; 62
 2f6:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x00);
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x3E);
 300:	8e e3       	ldi	r24, 0x3E	; 62
 302:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x04);
 306:	84 e0       	ldi	r24, 0x04	; 4
 308:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x08);
 30c:	88 e0       	ldi	r24, 0x08	; 8
 30e:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x3E);
 312:	8e e3       	ldi	r24, 0x3E	; 62
 314:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x00);
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x3E);
 31e:	8e e3       	ldi	r24, 0x3E	; 62
 320:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x00);
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x3E);
 32a:	8e e3       	ldi	r24, 0x3E	; 62
 32c:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x04);
 330:	84 e0       	ldi	r24, 0x04	; 4
 332:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x08);
 336:	88 e0       	ldi	r24, 0x08	; 8
 338:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x3E);
 33c:	8e e3       	ldi	r24, 0x3E	; 62
 33e:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x00);
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x3E);
 348:	8e e3       	ldi	r24, 0x3E	; 62
 34a:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x22);
 34e:	82 e2       	ldi	r24, 0x22	; 34
 350:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x3A);
 354:	8a e3       	ldi	r24, 0x3A	; 58
 356:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
		//out
	send_data(0x00);
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x00);
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x3E);
 366:	8e e3       	ldi	r24, 0x3E	; 62
 368:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x22);
 36c:	82 e2       	ldi	r24, 0x22	; 34
 36e:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x3E);
 372:	8e e3       	ldi	r24, 0x3E	; 62
 374:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x00);
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x3E);
 37e:	8e e3       	ldi	r24, 0x3E	; 62
 380:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x20);
 384:	80 e2       	ldi	r24, 0x20	; 32
 386:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x3E);
 38a:	8e e3       	ldi	r24, 0x3E	; 62
 38c:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x00);
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x02);
 396:	82 e0       	ldi	r24, 0x02	; 2
 398:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x3E);
 39c:	8e e3       	ldi	r24, 0x3E	; 62
 39e:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	send_data(0x02);
 3a2:	82 e0       	ldi	r24, 0x02	; 2
 3a4:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
 3a8:	08 95       	ret

000003aa <draw_digit>:
}

//draw digit selects the correct draw function for the given digit
void draw_digit(uint8_t digit){
	if(digit == 0){
 3aa:	81 11       	cpse	r24, r1
 3ac:	03 c0       	rjmp	.+6      	; 0x3b4 <draw_digit+0xa>
		draw_zero();
 3ae:	0e 94 60 00 	call	0xc0	; 0xc0 <draw_zero>
 3b2:	08 95       	ret
		}else if(digit == 1){
 3b4:	81 30       	cpi	r24, 0x01	; 1
 3b6:	19 f4       	brne	.+6      	; 0x3be <draw_digit+0x14>
		draw_one();
 3b8:	0e 94 6d 00 	call	0xda	; 0xda <draw_one>
 3bc:	08 95       	ret
		}else if(digit == 2){
 3be:	82 30       	cpi	r24, 0x02	; 2
 3c0:	19 f4       	brne	.+6      	; 0x3c8 <draw_digit+0x1e>
		draw_two();
 3c2:	0e 94 7a 00 	call	0xf4	; 0xf4 <draw_two>
 3c6:	08 95       	ret
		}else if(digit == 3){
 3c8:	83 30       	cpi	r24, 0x03	; 3
 3ca:	19 f4       	brne	.+6      	; 0x3d2 <draw_digit+0x28>
		draw_three();
 3cc:	0e 94 87 00 	call	0x10e	; 0x10e <draw_three>
 3d0:	08 95       	ret
		}else if(digit == 4){
 3d2:	84 30       	cpi	r24, 0x04	; 4
 3d4:	19 f4       	brne	.+6      	; 0x3dc <draw_digit+0x32>
		draw_four();
 3d6:	0e 94 94 00 	call	0x128	; 0x128 <draw_four>
 3da:	08 95       	ret
		}else if(digit == 5){
 3dc:	85 30       	cpi	r24, 0x05	; 5
 3de:	19 f4       	brne	.+6      	; 0x3e6 <draw_digit+0x3c>
		draw_five();
 3e0:	0e 94 a1 00 	call	0x142	; 0x142 <draw_five>
 3e4:	08 95       	ret
		}else if(digit == 6){
 3e6:	86 30       	cpi	r24, 0x06	; 6
 3e8:	19 f4       	brne	.+6      	; 0x3f0 <draw_digit+0x46>
		draw_six();
 3ea:	0e 94 ae 00 	call	0x15c	; 0x15c <draw_six>
 3ee:	08 95       	ret
		}else if(digit == 7){
 3f0:	87 30       	cpi	r24, 0x07	; 7
 3f2:	19 f4       	brne	.+6      	; 0x3fa <draw_digit+0x50>
		draw_seven();
 3f4:	0e 94 bb 00 	call	0x176	; 0x176 <draw_seven>
 3f8:	08 95       	ret
		}else if(digit == 8){
 3fa:	88 30       	cpi	r24, 0x08	; 8
 3fc:	19 f4       	brne	.+6      	; 0x404 <draw_digit+0x5a>
		draw_eight();
 3fe:	0e 94 c8 00 	call	0x190	; 0x190 <draw_eight>
 402:	08 95       	ret
		}else if(digit == 9){
 404:	89 30       	cpi	r24, 0x09	; 9
 406:	11 f4       	brne	.+4      	; 0x40c <draw_digit+0x62>
		draw_nine();
 408:	0e 94 d5 00 	call	0x1aa	; 0x1aa <draw_nine>
 40c:	08 95       	ret

0000040e <refresh_screen>:
	}
}


//void refresh_screen(void); refreshes the screen
void refresh_screen(void){
 40e:	df 92       	push	r13
 410:	ef 92       	push	r14
 412:	ff 92       	push	r15
 414:	0f 93       	push	r16
 416:	1f 93       	push	r17
 418:	cf 93       	push	r28
 41a:	df 93       	push	r29
 41c:	01 e0       	ldi	r16, 0x01	; 1
 41e:	10 e0       	ldi	r17, 0x00	; 0
		if(j==1){
			draw_timeisrunningout();
		}
		if(j==2){
			uint8_t seconds_now = seconds; //stores volatile SECONDS into seconds_now which will be manipulated for display
			draw_digit(seconds_now % 10);
 420:	0f 2e       	mov	r0, r31
 422:	fd ec       	ldi	r31, 0xCD	; 205
 424:	df 2e       	mov	r13, r31
 426:	f0 2d       	mov	r31, r0
			draw_digit((seconds_now - (seconds_now % 10))/10);
 428:	ca e0       	ldi	r28, 0x0A	; 10
 42a:	d0 e0       	ldi	r29, 0x00	; 0
 42c:	02 c0       	rjmp	.+4      	; 0x432 <refresh_screen+0x24>
 42e:	1f 5f       	subi	r17, 0xFF	; 255
 430:	0f 5f       	subi	r16, 0xFF	; 255

//void refresh_screen(void); refreshes the screen
void refresh_screen(void){
	uint8_t j=0;
	for(j=0;j<6;j++){
		send_command(0xB0 | j); //set page address (0xb0 | address)
 432:	81 2f       	mov	r24, r17
 434:	80 6b       	ori	r24, 0xB0	; 176
 436:	0e 94 56 00 	call	0xac	; 0xac <send_command>
		
		uint8_t add = 0x00; //column address
		send_command((0x10|(add>>4))+0x02); //set column address part one
 43a:	82 e1       	ldi	r24, 0x12	; 18
 43c:	0e 94 56 00 	call	0xac	; 0xac <send_command>
		send_command((0x0f&add));//set column address part two
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	0e 94 56 00 	call	0xac	; 0xac <send_command>
		uint8_t i=0;
		for(i=0;i<64;i++){
			send_data(screenmemory[i+64*j]);
		}
		*/
		if(j == 0){
 446:	11 11       	cpse	r17, r1
 448:	31 c0       	rjmp	.+98     	; 0x4ac <refresh_screen+0x9e>
			draw_zero();
 44a:	0e 94 60 00 	call	0xc0	; 0xc0 <draw_zero>
			draw_one();
 44e:	0e 94 6d 00 	call	0xda	; 0xda <draw_one>
			draw_period();
 452:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <draw_period>
			draw_two();
 456:	0e 94 7a 00 	call	0xf4	; 0xf4 <draw_two>
			draw_three();
 45a:	0e 94 87 00 	call	0x10e	; 0x10e <draw_three>
			draw_four();
 45e:	0e 94 94 00 	call	0x128	; 0x128 <draw_four>
			draw_five();
 462:	0e 94 a1 00 	call	0x142	; 0x142 <draw_five>
			draw_six();
 466:	0e 94 ae 00 	call	0x15c	; 0x15c <draw_six>
			draw_seven();
 46a:	0e 94 bb 00 	call	0x176	; 0x176 <draw_seven>
				
			draw_eight();
 46e:	0e 94 c8 00 	call	0x190	; 0x190 <draw_eight>
			draw_nine();
 472:	0e 94 d5 00 	call	0x1aa	; 0x1aa <draw_nine>
			for(uint8_t i=0;i<2;i++){
				send_data(0x00);
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
				send_data(0x00);
 47c:	80 e0       	ldi	r24, 0x00	; 0
 47e:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
				send_data(0x00);
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
				send_data(0x00);
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
			draw_seven();
				
			draw_eight();
			draw_nine();
			for(uint8_t i=0;i<2;i++){
				send_data(0x00);
 48e:	80 e0       	ldi	r24, 0x00	; 0
 490:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
				send_data(0x00);
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
				send_data(0x00);
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
				send_data(0x00);
 4a0:	80 e0       	ldi	r24, 0x00	; 0
 4a2:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
			}
			draw_percent();
 4a6:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <draw_percent>
 4aa:	24 c0       	rjmp	.+72     	; 0x4f4 <refresh_screen+0xe6>
		}
		if(j==1){
 4ac:	11 30       	cpi	r17, 0x01	; 1
 4ae:	19 f4       	brne	.+6      	; 0x4b6 <refresh_screen+0xa8>
			draw_timeisrunningout();
 4b0:	0e 94 14 01 	call	0x228	; 0x228 <draw_timeisrunningout>
 4b4:	1f c0       	rjmp	.+62     	; 0x4f4 <refresh_screen+0xe6>
		}
		if(j==2){
 4b6:	12 30       	cpi	r17, 0x02	; 2
 4b8:	e9 f4       	brne	.+58     	; 0x4f4 <refresh_screen+0xe6>
			uint8_t seconds_now = seconds; //stores volatile SECONDS into seconds_now which will be manipulated for display
 4ba:	e0 90 02 01 	lds	r14, 0x0102
			draw_digit(seconds_now % 10);
 4be:	ed 9c       	mul	r14, r13
 4c0:	f1 2c       	mov	r15, r1
 4c2:	11 24       	eor	r1, r1
 4c4:	f6 94       	lsr	r15
 4c6:	f6 94       	lsr	r15
 4c8:	f6 94       	lsr	r15
 4ca:	ff 0c       	add	r15, r15
 4cc:	8f 2d       	mov	r24, r15
 4ce:	88 0f       	add	r24, r24
 4d0:	88 0f       	add	r24, r24
 4d2:	f8 0e       	add	r15, r24
 4d4:	8e 2d       	mov	r24, r14
 4d6:	8f 19       	sub	r24, r15
 4d8:	f8 2e       	mov	r15, r24
 4da:	0e 94 d5 01 	call	0x3aa	; 0x3aa <draw_digit>
			draw_digit((seconds_now - (seconds_now % 10))/10);
 4de:	8e 2d       	mov	r24, r14
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	8f 19       	sub	r24, r15
 4e4:	91 09       	sbc	r25, r1
 4e6:	be 01       	movw	r22, r28
 4e8:	0e 94 43 03 	call	0x686	; 0x686 <__divmodhi4>
 4ec:	86 2f       	mov	r24, r22
 4ee:	0e 94 d5 01 	call	0x3aa	; 0x3aa <draw_digit>
 4f2:	9d cf       	rjmp	.-198    	; 0x42e <refresh_screen+0x20>


//void refresh_screen(void); refreshes the screen
void refresh_screen(void){
	uint8_t j=0;
	for(j=0;j<6;j++){
 4f4:	06 30       	cpi	r16, 0x06	; 6
 4f6:	08 f4       	brcc	.+2      	; 0x4fa <refresh_screen+0xec>
 4f8:	9a cf       	rjmp	.-204    	; 0x42e <refresh_screen+0x20>
			uint8_t seconds_now = seconds; //stores volatile SECONDS into seconds_now which will be manipulated for display
			draw_digit(seconds_now % 10);
			draw_digit((seconds_now - (seconds_now % 10))/10);
		}		
	}
}
 4fa:	df 91       	pop	r29
 4fc:	cf 91       	pop	r28
 4fe:	1f 91       	pop	r17
 500:	0f 91       	pop	r16
 502:	ff 90       	pop	r15
 504:	ef 90       	pop	r14
 506:	df 90       	pop	r13
 508:	08 95       	ret

0000050a <__vector_5>:

//INTERRUPT SERVICE ROUTINE FOR PIN CHANGE (BUTTON PRESS)
ISR(PCINT2_vect) {
 50a:	1f 92       	push	r1
 50c:	0f 92       	push	r0
 50e:	0f b6       	in	r0, 0x3f	; 63
 510:	0f 92       	push	r0
 512:	11 24       	eor	r1, r1
	number_of_frames_displayed=0;
 514:	10 92 04 01 	sts	0x0104, r1
	
}
 518:	0f 90       	pop	r0
 51a:	0f be       	out	0x3f, r0	; 63
 51c:	0f 90       	pop	r0
 51e:	1f 90       	pop	r1
 520:	18 95       	reti

00000522 <RTCInit>:

//Timer2 init according to datasheet
void RTCInit(void){
	//Disable timer2 interrupts
	TIMSK2  = 0;
 522:	10 92 70 00 	sts	0x0070, r1
	//Enable asynchronous mode
	ASSR  = (1<<AS2);
 526:	80 e2       	ldi	r24, 0x20	; 32
 528:	80 93 b6 00 	sts	0x00B6, r24
	//set initial counter value
	TCNT2=0;
 52c:	10 92 b2 00 	sts	0x00B2, r1
	//set prescaler 128
	TCCR2B |= (1<<CS22)|(1<<CS00);
 530:	e1 eb       	ldi	r30, 0xB1	; 177
 532:	f0 e0       	ldi	r31, 0x00	; 0
 534:	80 81       	ld	r24, Z
 536:	85 60       	ori	r24, 0x05	; 5
 538:	80 83       	st	Z, r24
	//wait for registers update
	while (ASSR & ((1<<TCN2UB)|(1<<TCR2BUB)));
 53a:	e6 eb       	ldi	r30, 0xB6	; 182
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	80 81       	ld	r24, Z
 540:	81 71       	andi	r24, 0x11	; 17
 542:	e9 f7       	brne	.-6      	; 0x53e <RTCInit+0x1c>
	//clear interrupt flags
	TIFR2  = (1<<TOV2);
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	87 bb       	out	0x17, r24	; 23
	//enable TOV2 interrupt
	TIMSK2  = (1<<TOIE2);
 548:	80 93 70 00 	sts	0x0070, r24
 54c:	08 95       	ret

0000054e <__vector_9>:
}

//Overflow ISR
ISR(TIMER2_OVF_vect){
 54e:	1f 92       	push	r1
 550:	0f 92       	push	r0
 552:	0f b6       	in	r0, 0x3f	; 63
 554:	0f 92       	push	r0
 556:	11 24       	eor	r1, r1
 558:	8f 93       	push	r24
	num_overflows++;
 55a:	80 91 03 01 	lds	r24, 0x0103
 55e:	8f 5f       	subi	r24, 0xFF	; 255
 560:	80 93 03 01 	sts	0x0103, r24
	if(/*num_overflows % 1 == 0*/ 1){
		seconds++;
 564:	80 91 02 01 	lds	r24, 0x0102
 568:	8f 5f       	subi	r24, 0xFF	; 255
 56a:	80 93 02 01 	sts	0x0102, r24
		if(seconds == 60){
 56e:	80 91 02 01 	lds	r24, 0x0102
 572:	8c 33       	cpi	r24, 0x3C	; 60
 574:	c1 f4       	brne	.+48     	; 0x5a6 <__vector_9+0x58>
			seconds = 0;
 576:	10 92 02 01 	sts	0x0102, r1
			minutes++;
 57a:	80 91 01 01 	lds	r24, 0x0101
 57e:	8f 5f       	subi	r24, 0xFF	; 255
 580:	80 93 01 01 	sts	0x0101, r24
			if(minutes == 60){
 584:	80 91 01 01 	lds	r24, 0x0101
 588:	8c 33       	cpi	r24, 0x3C	; 60
 58a:	69 f4       	brne	.+26     	; 0x5a6 <__vector_9+0x58>
				minutes = 0;
 58c:	10 92 01 01 	sts	0x0101, r1
				hours++;
 590:	80 91 00 01 	lds	r24, 0x0100
 594:	8f 5f       	subi	r24, 0xFF	; 255
 596:	80 93 00 01 	sts	0x0100, r24
				if(hours == 24){
 59a:	80 91 00 01 	lds	r24, 0x0100
 59e:	88 31       	cpi	r24, 0x18	; 24
 5a0:	11 f4       	brne	.+4      	; 0x5a6 <__vector_9+0x58>
					hours = 0;
 5a2:	10 92 00 01 	sts	0x0100, r1
				}
			}
		}
	}
}
 5a6:	8f 91       	pop	r24
 5a8:	0f 90       	pop	r0
 5aa:	0f be       	out	0x3f, r0	; 63
 5ac:	0f 90       	pop	r0
 5ae:	1f 90       	pop	r1
 5b0:	18 95       	reti

000005b2 <main>:

int main(void){
	DDRB = 0x2F; //Set D/C, RST#, CS#, MOSI, SCK as Output
 5b2:	8f e2       	ldi	r24, 0x2F	; 47
 5b4:	84 b9       	out	0x04, r24	; 4
	DDRD = 0x00; //PIND3=BUTTON_A, PIND2=BUTTON_B, PIND3=BUTTIONC
 5b6:	1a b8       	out	0x0a, r1	; 10
	
	RTCInit();
 5b8:	0e 94 91 02 	call	0x522	; 0x522 <RTCInit>
	// Turn interrupts on.
	sei();
 5bc:	78 94       	sei
	
	//set sleep mode to minimum power while allowing interrupt
	set_sleep_mode(SLEEP_MODE_PWR_SAVE);
 5be:	83 b7       	in	r24, 0x33	; 51
 5c0:	81 7f       	andi	r24, 0xF1	; 241
 5c2:	86 60       	ori	r24, 0x06	; 6
 5c4:	83 bf       	out	0x33, r24	; 51
	PCICR |= _BV(PCIE2); //PIN CHANGE INTERRUPT CONTROL REGISTER (PIN BLOC PCINT16-23)
 5c6:	e8 e6       	ldi	r30, 0x68	; 104
 5c8:	f0 e0       	ldi	r31, 0x00	; 0
 5ca:	80 81       	ld	r24, Z
 5cc:	84 60       	ori	r24, 0x04	; 4
 5ce:	80 83       	st	Z, r24
	PCMSK2 |= _BV(PCINT18); //PIN CHANGE interrupt MASK activate pin for BUTTON_B
 5d0:	ed e6       	ldi	r30, 0x6D	; 109
 5d2:	f0 e0       	ldi	r31, 0x00	; 0
 5d4:	80 81       	ld	r24, Z
 5d6:	84 60       	ori	r24, 0x04	; 4
 5d8:	80 83       	st	Z, r24
	
	//initialize master SPI
	SPIMasterInit();
 5da:	0e 94 48 00 	call	0x90	; 0x90 <SPIMasterInit>

	// Display reset routine (before initialization)
	PORTB |= 0x02;	// Initially set RST HIGH
 5de:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5e0:	81 ee       	ldi	r24, 0xE1	; 225
 5e2:	94 e0       	ldi	r25, 0x04	; 4
 5e4:	01 97       	sbiw	r24, 0x01	; 1
 5e6:	f1 f7       	brne	.-4      	; 0x5e4 <main+0x32>
 5e8:	00 c0       	rjmp	.+0      	; 0x5ea <main+0x38>
 5ea:	00 00       	nop
	_delay_ms(5);	// VDD (3.3V) goes high at start, lets just chill for 5 ms
	PORTB &= 0xFC;	// Bring RST low, reset the display
 5ec:	85 b1       	in	r24, 0x05	; 5
 5ee:	8c 7f       	andi	r24, 0xFC	; 252
 5f0:	85 b9       	out	0x05, r24	; 5
 5f2:	83 ec       	ldi	r24, 0xC3	; 195
 5f4:	99 e0       	ldi	r25, 0x09	; 9
 5f6:	01 97       	sbiw	r24, 0x01	; 1
 5f8:	f1 f7       	brne	.-4      	; 0x5f6 <main+0x44>
 5fa:	00 c0       	rjmp	.+0      	; 0x5fc <main+0x4a>
 5fc:	00 00       	nop
	_delay_ms(10);	// wait 10ms
	PORTB |= 0x02;	// Set RST HIGH, bring out of reset
 5fe:	29 9a       	sbi	0x05, 1	; 5
	
	
	// Display initialization routine (after reset)
	send_command(0x8D); //set charge pump
 600:	8d e8       	ldi	r24, 0x8D	; 141
 602:	0e 94 56 00 	call	0xac	; 0xac <send_command>
	send_command(0x14); //to some setting that's default in the sparkfun arduino library
 606:	84 e1       	ldi	r24, 0x14	; 20
 608:	0e 94 56 00 	call	0xac	; 0xac <send_command>
	
	send_command(0xAF); //turn the display on
 60c:	8f ea       	ldi	r24, 0xAF	; 175
 60e:	0e 94 56 00 	call	0xac	; 0xac <send_command>
	
	send_command(0xB0); // sets to memory page 0 (0xB0 | desired page number)
 612:	80 eb       	ldi	r24, 0xB0	; 176
 614:	0e 94 56 00 	call	0xac	; 0xac <send_command>
	
	uint8_t j=0;
	for(j=0;j<6;j++){
 618:	d0 e0       	ldi	r29, 0x00	; 0
	send_command(0xB0 | j);
	uint8_t i=0;
	for(i=0;i<128;i++){
 61a:	10 e0       	ldi	r17, 0x00	; 0
	
	send_command(0xB0); // sets to memory page 0 (0xB0 | desired page number)
	
	uint8_t j=0;
	for(j=0;j<6;j++){
	send_command(0xB0 | j);
 61c:	8d 2f       	mov	r24, r29
 61e:	80 6b       	ori	r24, 0xB0	; 176
 620:	0e 94 56 00 	call	0xac	; 0xac <send_command>
	uint8_t i=0;
	for(i=0;i<128;i++){
 624:	c1 2f       	mov	r28, r17
	send_data(i%16);
 626:	8c 2f       	mov	r24, r28
 628:	8f 70       	andi	r24, 0x0F	; 15
 62a:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_data>
	
	uint8_t j=0;
	for(j=0;j<6;j++){
	send_command(0xB0 | j);
	uint8_t i=0;
	for(i=0;i<128;i++){
 62e:	cf 5f       	subi	r28, 0xFF	; 255
 630:	c0 38       	cpi	r28, 0x80	; 128
 632:	c9 f7       	brne	.-14     	; 0x626 <main+0x74>
	send_command(0xAF); //turn the display on
	
	send_command(0xB0); // sets to memory page 0 (0xB0 | desired page number)
	
	uint8_t j=0;
	for(j=0;j<6;j++){
 634:	df 5f       	subi	r29, 0xFF	; 255
 636:	d6 30       	cpi	r29, 0x06	; 6
 638:	89 f7       	brne	.-30     	; 0x61c <main+0x6a>
	send_data(i%16);
	}
	}
	
	while(1){
send_command(0xAF); //turn the display on
 63a:	d5 e0       	ldi	r29, 0x05	; 5
 63c:	8f ea       	ldi	r24, 0xAF	; 175
 63e:	0e 94 56 00 	call	0xac	; 0xac <send_command>
 642:	cd 2f       	mov	r28, r29
		if(1){
			
			uint8_t j=0;
			for(j=0;j<5;j++){
			refresh_screen();
 644:	0e 94 07 02 	call	0x40e	; 0x40e <refresh_screen>
			number_of_frames_displayed++;
 648:	80 91 04 01 	lds	r24, 0x0104
 64c:	8f 5f       	subi	r24, 0xFF	; 255
 64e:	80 93 04 01 	sts	0x0104, r24
 652:	87 ea       	ldi	r24, 0xA7	; 167
 654:	91 e6       	ldi	r25, 0x61	; 97
 656:	01 97       	sbiw	r24, 0x01	; 1
 658:	f1 f7       	brne	.-4      	; 0x656 <main+0xa4>
 65a:	00 c0       	rjmp	.+0      	; 0x65c <main+0xaa>
 65c:	00 00       	nop
 65e:	c1 50       	subi	r28, 0x01	; 1
	while(1){
send_command(0xAF); //turn the display on
		if(1){
			
			uint8_t j=0;
			for(j=0;j<5;j++){
 660:	89 f7       	brne	.-30     	; 0x644 <main+0x92>
			number_of_frames_displayed++;
			_delay_ms(100); // Giant delay
			}
		}
		
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 662:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 664:	f8 94       	cli
		if(number_of_frames_displayed >= 10){
 666:	80 91 04 01 	lds	r24, 0x0104
 66a:	8a 30       	cpi	r24, 0x0A	; 10
 66c:	50 f0       	brcs	.+20     	; 0x682 <main+0xd0>
		send_command(0xAE); //display off command
 66e:	8e ea       	ldi	r24, 0xAE	; 174
 670:	0e 94 56 00 	call	0xac	; 0xac <send_command>
		sleep_mode();
 674:	83 b7       	in	r24, 0x33	; 51
 676:	81 60       	ori	r24, 0x01	; 1
 678:	83 bf       	out	0x33, r24	; 51
 67a:	88 95       	sleep
 67c:	83 b7       	in	r24, 0x33	; 51
 67e:	8e 7f       	andi	r24, 0xFE	; 254
 680:	83 bf       	out	0x33, r24	; 51
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 682:	cf bf       	out	0x3f, r28	; 63
						send_data(2*i + 1);
					}
				}
		}
		*/
	}
 684:	db cf       	rjmp	.-74     	; 0x63c <main+0x8a>

00000686 <__divmodhi4>:
 686:	97 fb       	bst	r25, 7
 688:	07 2e       	mov	r0, r23
 68a:	16 f4       	brtc	.+4      	; 0x690 <__divmodhi4+0xa>
 68c:	00 94       	com	r0
 68e:	07 d0       	rcall	.+14     	; 0x69e <__divmodhi4_neg1>
 690:	77 fd       	sbrc	r23, 7
 692:	09 d0       	rcall	.+18     	; 0x6a6 <__divmodhi4_neg2>
 694:	0e 94 57 03 	call	0x6ae	; 0x6ae <__udivmodhi4>
 698:	07 fc       	sbrc	r0, 7
 69a:	05 d0       	rcall	.+10     	; 0x6a6 <__divmodhi4_neg2>
 69c:	3e f4       	brtc	.+14     	; 0x6ac <__divmodhi4_exit>

0000069e <__divmodhi4_neg1>:
 69e:	90 95       	com	r25
 6a0:	81 95       	neg	r24
 6a2:	9f 4f       	sbci	r25, 0xFF	; 255
 6a4:	08 95       	ret

000006a6 <__divmodhi4_neg2>:
 6a6:	70 95       	com	r23
 6a8:	61 95       	neg	r22
 6aa:	7f 4f       	sbci	r23, 0xFF	; 255

000006ac <__divmodhi4_exit>:
 6ac:	08 95       	ret

000006ae <__udivmodhi4>:
 6ae:	aa 1b       	sub	r26, r26
 6b0:	bb 1b       	sub	r27, r27
 6b2:	51 e1       	ldi	r21, 0x11	; 17
 6b4:	07 c0       	rjmp	.+14     	; 0x6c4 <__udivmodhi4_ep>

000006b6 <__udivmodhi4_loop>:
 6b6:	aa 1f       	adc	r26, r26
 6b8:	bb 1f       	adc	r27, r27
 6ba:	a6 17       	cp	r26, r22
 6bc:	b7 07       	cpc	r27, r23
 6be:	10 f0       	brcs	.+4      	; 0x6c4 <__udivmodhi4_ep>
 6c0:	a6 1b       	sub	r26, r22
 6c2:	b7 0b       	sbc	r27, r23

000006c4 <__udivmodhi4_ep>:
 6c4:	88 1f       	adc	r24, r24
 6c6:	99 1f       	adc	r25, r25
 6c8:	5a 95       	dec	r21
 6ca:	a9 f7       	brne	.-22     	; 0x6b6 <__udivmodhi4_loop>
 6cc:	80 95       	com	r24
 6ce:	90 95       	com	r25
 6d0:	bc 01       	movw	r22, r24
 6d2:	cd 01       	movw	r24, r26
 6d4:	08 95       	ret

000006d6 <_exit>:
 6d6:	f8 94       	cli

000006d8 <__stop_program>:
 6d8:	ff cf       	rjmp	.-2      	; 0x6d8 <__stop_program>
