
lifetimer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000225c  000022f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000225c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  0080010a  0080010a  000022fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000022fa  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000160  00000000  00000000  0000232a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000529d  00000000  00000000  0000248a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000249  00000000  00000000  00007727  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b49  00000000  00000000  00007970  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000374  00000000  00000000  000084bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004a9  00000000  00000000  00008830  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001053  00000000  00000000  00008cd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000150  00000000  00000000  00009d2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__vector_5>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__vector_9>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec e5       	ldi	r30, 0x5C	; 92
      7c:	f2 e2       	ldi	r31, 0x22	; 34
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 30       	cpi	r26, 0x0A	; 10
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	aa e0       	ldi	r26, 0x0A	; 10
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a7 32       	cpi	r26, 0x27	; 39
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 9d 10 	call	0x213a	; 0x213a <main>
      9e:	0c 94 2c 11 	jmp	0x2258	; 0x2258 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SPIMasterInit>:

//SPI init
void SPIMasterInit(void)
{
	//set MOSI, SCK and SS as output
	DDRB |= (1<<PB3)|(1<<PB5)|(1<<PB2);
      a6:	84 b1       	in	r24, 0x04	; 4
      a8:	8c 62       	ori	r24, 0x2C	; 44
      aa:	84 b9       	out	0x04, r24	; 4
	//set SS to high
	PORTB |= (1<<PB2);
      ac:	2a 9a       	sbi	0x05, 2	; 5
	//enable master SPI at clock rate Fck/16
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
      ae:	81 e5       	ldi	r24, 0x51	; 81
      b0:	8c bd       	out	0x2c, r24	; 44
      b2:	08 95       	ret

000000b4 <SPIMasterSend>:

//master send function
void SPIMasterSend(uint8_t data)
{
	//select slave
	PORTB &= ~(1<<PB2);
      b4:	2a 98       	cbi	0x05, 2	; 5
	//send data
	SPDR=data;
      b6:	8e bd       	out	0x2e, r24	; 46
	//wait for transmition complete
	while (!(SPSR &(1<<SPIF)));
      b8:	0d b4       	in	r0, 0x2d	; 45
      ba:	07 fe       	sbrs	r0, 7
      bc:	fd cf       	rjmp	.-6      	; 0xb8 <SPIMasterSend+0x4>
	//SS to high
	PORTB |= (1<<PB2);
      be:	2a 9a       	sbi	0x05, 2	; 5
      c0:	08 95       	ret

000000c2 <send_command>:
}

//send_command(uint8_t); send COMMAND to the screen
void send_command(uint8_t data){
PORTB &= 0xFE; // pull PORTB0 low to indicate command
      c2:	28 98       	cbi	0x05, 0	; 5
SPIMasterSend(data);
      c4:	0e 94 5a 00 	call	0xb4	; 0xb4 <SPIMasterSend>
PORTB |= 0x01; // pull PORTB0 high to indicate data
      c8:	28 9a       	sbi	0x05, 0	; 5
      ca:	08 95       	ret

000000cc <send_data>:
}


//send_data(uint8_t); send DATA to the screen
void send_data(uint8_t data){
PORTB |= 0x01; // pull PORTB0 high to indicate data
      cc:	28 9a       	sbi	0x05, 0	; 5
SPIMasterSend(data);
      ce:	0e 94 5a 00 	call	0xb4	; 0xb4 <SPIMasterSend>
PORTB &= 0xFE; // pull PORTB0 low to indicate command	
      d2:	28 98       	cbi	0x05, 0	; 5
      d4:	08 95       	ret

000000d6 <draw_zero>:


//below are draw functions. all start with a space.

void draw_zero(void){
	send_data(0x00);
      d6:	80 e0       	ldi	r24, 0x00	; 0
      d8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
      dc:	8e e3       	ldi	r24, 0x3E	; 62
      de:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
      e2:	82 e2       	ldi	r24, 0x22	; 34
      e4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
      e8:	8e e3       	ldi	r24, 0x3E	; 62
      ea:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
      ee:	08 95       	ret

000000f0 <draw_one>:
}

void draw_one(void){
	send_data(0x00);
      f0:	80 e0       	ldi	r24, 0x00	; 0
      f2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
      f6:	80 e0       	ldi	r24, 0x00	; 0
      f8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
      fc:	80 e0       	ldi	r24, 0x00	; 0
      fe:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     102:	8e e3       	ldi	r24, 0x3E	; 62
     104:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     108:	08 95       	ret

0000010a <draw_two>:
}

void draw_two(void){
	send_data(0x00);
     10a:	80 e0       	ldi	r24, 0x00	; 0
     10c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3A);
     110:	8a e3       	ldi	r24, 0x3A	; 58
     112:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
     116:	8a e2       	ldi	r24, 0x2A	; 42
     118:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2E);
     11c:	8e e2       	ldi	r24, 0x2E	; 46
     11e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     122:	08 95       	ret

00000124 <draw_three>:
}

void draw_three(void){
	send_data(0x00);
     124:	80 e0       	ldi	r24, 0x00	; 0
     126:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
     12a:	8a e2       	ldi	r24, 0x2A	; 42
     12c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
     130:	8a e2       	ldi	r24, 0x2A	; 42
     132:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     136:	8e e3       	ldi	r24, 0x3E	; 62
     138:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     13c:	08 95       	ret

0000013e <draw_four>:
}

void draw_four(void){
	send_data(0x00);
     13e:	80 e0       	ldi	r24, 0x00	; 0
     140:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0E);
     144:	8e e0       	ldi	r24, 0x0E	; 14
     146:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
     14a:	88 e0       	ldi	r24, 0x08	; 8
     14c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     150:	8e e3       	ldi	r24, 0x3E	; 62
     152:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     156:	08 95       	ret

00000158 <draw_five>:
}

void draw_five(void){
	send_data(0x00);
     158:	80 e0       	ldi	r24, 0x00	; 0
     15a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2E);
     15e:	8e e2       	ldi	r24, 0x2E	; 46
     160:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
     164:	8a e2       	ldi	r24, 0x2A	; 42
     166:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3A);
     16a:	8a e3       	ldi	r24, 0x3A	; 58
     16c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     170:	08 95       	ret

00000172 <draw_six>:
}

void draw_six(void){
	send_data(0x00);
     172:	80 e0       	ldi	r24, 0x00	; 0
     174:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     178:	8e e3       	ldi	r24, 0x3E	; 62
     17a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
     17e:	8a e2       	ldi	r24, 0x2A	; 42
     180:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3A);
     184:	8a e3       	ldi	r24, 0x3A	; 58
     186:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     18a:	08 95       	ret

0000018c <draw_seven>:
}

void draw_seven(void){
	send_data(0x00);
     18c:	80 e0       	ldi	r24, 0x00	; 0
     18e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
     192:	82 e0       	ldi	r24, 0x02	; 2
     194:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
     198:	82 e0       	ldi	r24, 0x02	; 2
     19a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     19e:	8e e3       	ldi	r24, 0x3E	; 62
     1a0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     1a4:	08 95       	ret

000001a6 <draw_eight>:
}

void draw_eight(void){
	send_data(0x00);
     1a6:	80 e0       	ldi	r24, 0x00	; 0
     1a8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     1ac:	8e e3       	ldi	r24, 0x3E	; 62
     1ae:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
     1b2:	8a e2       	ldi	r24, 0x2A	; 42
     1b4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     1b8:	8e e3       	ldi	r24, 0x3E	; 62
     1ba:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     1be:	08 95       	ret

000001c0 <draw_nine>:
}

void draw_nine(void){
	send_data(0x00);
     1c0:	80 e0       	ldi	r24, 0x00	; 0
     1c2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0E);
     1c6:	8e e0       	ldi	r24, 0x0E	; 14
     1c8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0A);
     1cc:	8a e0       	ldi	r24, 0x0A	; 10
     1ce:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     1d2:	8e e3       	ldi	r24, 0x3E	; 62
     1d4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     1d8:	08 95       	ret

000001da <draw_period>:
}

void draw_period(void){
	send_data(0x00);
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x20);
     1e0:	80 e2       	ldi	r24, 0x20	; 32
     1e2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     1e6:	08 95       	ret

000001e8 <draw_percent>:
}

//draw_percent(void); draws a percent symbol on the screen
void draw_percent(void){
	send_data(0x00);
     1e8:	80 e0       	ldi	r24, 0x00	; 0
     1ea:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     1ee:	8e e3       	ldi	r24, 0x3E	; 62
     1f0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
     1f4:	82 e2       	ldi	r24, 0x22	; 34
     1f6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     1fa:	80 e0       	ldi	r24, 0x00	; 0
     1fc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x42);
     200:	82 e4       	ldi	r24, 0x42	; 66
     202:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x25);
     206:	85 e2       	ldi	r24, 0x25	; 37
     208:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x12);
     20c:	82 e1       	ldi	r24, 0x12	; 18
     20e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
     212:	88 e0       	ldi	r24, 0x08	; 8
     214:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x24);
     218:	84 e2       	ldi	r24, 0x24	; 36
     21a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x52);
     21e:	82 e5       	ldi	r24, 0x52	; 82
     220:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x21);
     224:	81 e2       	ldi	r24, 0x21	; 33
     226:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
     230:	82 e2       	ldi	r24, 0x22	; 34
     232:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     236:	8e e3       	ldi	r24, 0x3E	; 62
     238:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     23c:	08 95       	ret

0000023e <draw_newordersfrom>:
}

//fills one line with them message "NEW ORDERS FROM"
void draw_newordersfrom(void){
	send_data(0x00);
     23e:	80 e0       	ldi	r24, 0x00	; 0
     240:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     244:	80 e0       	ldi	r24, 0x00	; 0
     246:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     24a:	80 e0       	ldi	r24, 0x00	; 0
     24c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	
	//new
	send_data(0x3E);
     250:	8e e3       	ldi	r24, 0x3E	; 62
     252:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
     256:	84 e0       	ldi	r24, 0x04	; 4
     258:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
     25c:	88 e0       	ldi	r24, 0x08	; 8
     25e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     262:	8e e3       	ldi	r24, 0x3E	; 62
     264:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     268:	80 e0       	ldi	r24, 0x00	; 0
     26a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     26e:	8e e3       	ldi	r24, 0x3E	; 62
     270:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
     274:	8a e2       	ldi	r24, 0x2A	; 42
     276:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     27a:	80 e0       	ldi	r24, 0x00	; 0
     27c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     280:	8e e3       	ldi	r24, 0x3E	; 62
     282:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x10);
     286:	80 e1       	ldi	r24, 0x10	; 16
     288:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
     28c:	88 e0       	ldi	r24, 0x08	; 8
     28e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x10);
     292:	80 e1       	ldi	r24, 0x10	; 16
     294:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     298:	8e e3       	ldi	r24, 0x3E	; 62
     29a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     2aa:	80 e0       	ldi	r24, 0x00	; 0
     2ac:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	//orders
	send_data(0x3E);
     2b0:	8e e3       	ldi	r24, 0x3E	; 62
     2b2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
     2b6:	82 e2       	ldi	r24, 0x22	; 34
     2b8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     2bc:	8e e3       	ldi	r24, 0x3E	; 62
     2be:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     2c2:	80 e0       	ldi	r24, 0x00	; 0
     2c4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     2c8:	8e e3       	ldi	r24, 0x3E	; 62
     2ca:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x1A);
     2ce:	8a e1       	ldi	r24, 0x1A	; 26
     2d0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2E);
     2d4:	8e e2       	ldi	r24, 0x2E	; 46
     2d6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     2da:	80 e0       	ldi	r24, 0x00	; 0
     2dc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     2e0:	8e e3       	ldi	r24, 0x3E	; 62
     2e2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
     2e6:	82 e2       	ldi	r24, 0x22	; 34
     2e8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x1C);
     2ec:	8c e1       	ldi	r24, 0x1C	; 28
     2ee:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     2f8:	8e e3       	ldi	r24, 0x3E	; 62
     2fa:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
     2fe:	8a e2       	ldi	r24, 0x2A	; 42
     300:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     304:	80 e0       	ldi	r24, 0x00	; 0
     306:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     30a:	8e e3       	ldi	r24, 0x3E	; 62
     30c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x1A);
     310:	8a e1       	ldi	r24, 0x1A	; 26
     312:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2E);
     316:	8e e2       	ldi	r24, 0x2E	; 46
     318:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2C);
     322:	8c e2       	ldi	r24, 0x2C	; 44
     324:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
     328:	8a e2       	ldi	r24, 0x2A	; 42
     32a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x1A);
     32e:	8a e1       	ldi	r24, 0x1A	; 26
     330:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     334:	80 e0       	ldi	r24, 0x00	; 0
     336:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	
	//from
	send_data(0x3E);
     346:	8e e3       	ldi	r24, 0x3E	; 62
     348:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0A);
     34c:	8a e0       	ldi	r24, 0x0A	; 10
     34e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0A);
     352:	8a e0       	ldi	r24, 0x0A	; 10
     354:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     358:	80 e0       	ldi	r24, 0x00	; 0
     35a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     35e:	8e e3       	ldi	r24, 0x3E	; 62
     360:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x1A);
     364:	8a e1       	ldi	r24, 0x1A	; 26
     366:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2E);
     36a:	8e e2       	ldi	r24, 0x2E	; 46
     36c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     376:	8e e3       	ldi	r24, 0x3E	; 62
     378:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
     37c:	82 e2       	ldi	r24, 0x22	; 34
     37e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     382:	8e e3       	ldi	r24, 0x3E	; 62
     384:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     38e:	8e e3       	ldi	r24, 0x3E	; 62
     390:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
     394:	84 e0       	ldi	r24, 0x04	; 4
     396:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
     39a:	88 e0       	ldi	r24, 0x08	; 8
     39c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
     3a0:	84 e0       	ldi	r24, 0x04	; 4
     3a2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     3a6:	8e e3       	ldi	r24, 0x3E	; 62
     3a8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     3b2:	80 e0       	ldi	r24, 0x00	; 0
     3b4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     3be:	08 95       	ret

000003c0 <draw_machineempire>:
		
}

//fills one line with the message "MACHINE EMPIRE"
void draw_machineempire(void){
	send_data(0x00);
     3c0:	80 e0       	ldi	r24, 0x00	; 0
     3c2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     3c6:	80 e0       	ldi	r24, 0x00	; 0
     3c8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     3d2:	80 e0       	ldi	r24, 0x00	; 0
     3d4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     3d8:	80 e0       	ldi	r24, 0x00	; 0
     3da:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	//machine
	send_data(0x3E);
     3e4:	8e e3       	ldi	r24, 0x3E	; 62
     3e6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
     3ea:	84 e0       	ldi	r24, 0x04	; 4
     3ec:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
     3f0:	88 e0       	ldi	r24, 0x08	; 8
     3f2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
     3f6:	84 e0       	ldi	r24, 0x04	; 4
     3f8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     3fc:	8e e3       	ldi	r24, 0x3E	; 62
     3fe:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     402:	80 e0       	ldi	r24, 0x00	; 0
     404:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     408:	8e e3       	ldi	r24, 0x3E	; 62
     40a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0A);
     40e:	8a e0       	ldi	r24, 0x0A	; 10
     410:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     414:	8e e3       	ldi	r24, 0x3E	; 62
     416:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     420:	8e e3       	ldi	r24, 0x3E	; 62
     422:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
     426:	82 e2       	ldi	r24, 0x22	; 34
     428:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     42c:	80 e0       	ldi	r24, 0x00	; 0
     42e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     432:	8e e3       	ldi	r24, 0x3E	; 62
     434:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
     438:	88 e0       	ldi	r24, 0x08	; 8
     43a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     43e:	8e e3       	ldi	r24, 0x3E	; 62
     440:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     444:	80 e0       	ldi	r24, 0x00	; 0
     446:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     44a:	8e e3       	ldi	r24, 0x3E	; 62
     44c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     456:	8e e3       	ldi	r24, 0x3E	; 62
     458:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
     45c:	84 e0       	ldi	r24, 0x04	; 4
     45e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
     462:	88 e0       	ldi	r24, 0x08	; 8
     464:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     468:	8e e3       	ldi	r24, 0x3E	; 62
     46a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     474:	8e e3       	ldi	r24, 0x3E	; 62
     476:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
     47a:	8a e2       	ldi	r24, 0x2A	; 42
     47c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     480:	80 e0       	ldi	r24, 0x00	; 0
     482:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	
	
	//empire
	send_data(0x3E);
     49e:	8e e3       	ldi	r24, 0x3E	; 62
     4a0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
     4a4:	8a e2       	ldi	r24, 0x2A	; 42
     4a6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     4b0:	8e e3       	ldi	r24, 0x3E	; 62
     4b2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
     4b6:	84 e0       	ldi	r24, 0x04	; 4
     4b8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
     4bc:	88 e0       	ldi	r24, 0x08	; 8
     4be:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
     4c2:	84 e0       	ldi	r24, 0x04	; 4
     4c4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     4c8:	8e e3       	ldi	r24, 0x3E	; 62
     4ca:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     4ce:	80 e0       	ldi	r24, 0x00	; 0
     4d0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     4d4:	8e e3       	ldi	r24, 0x3E	; 62
     4d6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0A);
     4da:	8a e0       	ldi	r24, 0x0A	; 10
     4dc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0E);
     4e0:	8e e0       	ldi	r24, 0x0E	; 14
     4e2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     4ec:	8e e3       	ldi	r24, 0x3E	; 62
     4ee:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     4f8:	8e e3       	ldi	r24, 0x3E	; 62
     4fa:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x1A);
     4fe:	8a e1       	ldi	r24, 0x1A	; 26
     500:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2E);
     504:	8e e2       	ldi	r24, 0x2E	; 46
     506:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     510:	8e e3       	ldi	r24, 0x3E	; 62
     512:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
     516:	8a e2       	ldi	r24, 0x2A	; 42
     518:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     528:	80 e0       	ldi	r24, 0x00	; 0
     52a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     534:	80 e0       	ldi	r24, 0x00	; 0
     536:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     53a:	80 e0       	ldi	r24, 0x00	; 0
     53c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     540:	08 95       	ret

00000542 <draw_highcommand>:
	
}

//fills one line with the message "HIGH COMMAND"
void draw_highcommand(void){
	send_data(0x00);
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     554:	80 e0       	ldi	r24, 0x00	; 0
     556:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     560:	80 e0       	ldi	r24, 0x00	; 0
     562:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	//high
	send_data(0x3E);
     572:	8e e3       	ldi	r24, 0x3E	; 62
     574:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
     578:	88 e0       	ldi	r24, 0x08	; 8
     57a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     57e:	8e e3       	ldi	r24, 0x3E	; 62
     580:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     58a:	8e e3       	ldi	r24, 0x3E	; 62
     58c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     596:	8e e3       	ldi	r24, 0x3E	; 62
     598:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
     59c:	82 e2       	ldi	r24, 0x22	; 34
     59e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3A);
     5a2:	8a e3       	ldi	r24, 0x3A	; 58
     5a4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     5ae:	8e e3       	ldi	r24, 0x3E	; 62
     5b0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
     5b4:	88 e0       	ldi	r24, 0x08	; 8
     5b6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     5ba:	8e e3       	ldi	r24, 0x3E	; 62
     5bc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	//command
	send_data(0x3E);
     5de:	8e e3       	ldi	r24, 0x3E	; 62
     5e0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
     5e4:	82 e2       	ldi	r24, 0x22	; 34
     5e6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     5ea:	80 e0       	ldi	r24, 0x00	; 0
     5ec:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     5f0:	8e e3       	ldi	r24, 0x3E	; 62
     5f2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
     5f6:	82 e2       	ldi	r24, 0x22	; 34
     5f8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     5fc:	8e e3       	ldi	r24, 0x3E	; 62
     5fe:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     608:	8e e3       	ldi	r24, 0x3E	; 62
     60a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
     60e:	84 e0       	ldi	r24, 0x04	; 4
     610:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
     614:	88 e0       	ldi	r24, 0x08	; 8
     616:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
     61a:	84 e0       	ldi	r24, 0x04	; 4
     61c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     620:	8e e3       	ldi	r24, 0x3E	; 62
     622:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     626:	80 e0       	ldi	r24, 0x00	; 0
     628:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     62c:	8e e3       	ldi	r24, 0x3E	; 62
     62e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
     632:	84 e0       	ldi	r24, 0x04	; 4
     634:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
     638:	88 e0       	ldi	r24, 0x08	; 8
     63a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
     63e:	84 e0       	ldi	r24, 0x04	; 4
     640:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     644:	8e e3       	ldi	r24, 0x3E	; 62
     646:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     64a:	80 e0       	ldi	r24, 0x00	; 0
     64c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     650:	8e e3       	ldi	r24, 0x3E	; 62
     652:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0A);
     656:	8a e0       	ldi	r24, 0x0A	; 10
     658:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     65c:	8e e3       	ldi	r24, 0x3E	; 62
     65e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     668:	8e e3       	ldi	r24, 0x3E	; 62
     66a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
     66e:	84 e0       	ldi	r24, 0x04	; 4
     670:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
     674:	88 e0       	ldi	r24, 0x08	; 8
     676:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     67a:	8e e3       	ldi	r24, 0x3E	; 62
     67c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     680:	80 e0       	ldi	r24, 0x00	; 0
     682:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     686:	8e e3       	ldi	r24, 0x3E	; 62
     688:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
     68c:	82 e2       	ldi	r24, 0x22	; 34
     68e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x1C);
     692:	8c e1       	ldi	r24, 0x1C	; 28
     694:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     698:	80 e0       	ldi	r24, 0x00	; 0
     69a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     69e:	80 e0       	ldi	r24, 0x00	; 0
     6a0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     6b6:	80 e0       	ldi	r24, 0x00	; 0
     6b8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     6c2:	08 95       	ret

000006c4 <draw_timeisrunningout>:
		
}
//fills one line with the message "TIME IS RUNNING OUT"
void draw_timeisrunningout(void){
	//time
	send_data(0x02);
     6c4:	82 e0       	ldi	r24, 0x02	; 2
     6c6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     6ca:	8e e3       	ldi	r24, 0x3E	; 62
     6cc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
     6d0:	82 e0       	ldi	r24, 0x02	; 2
     6d2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     6d6:	80 e0       	ldi	r24, 0x00	; 0
     6d8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     6dc:	8e e3       	ldi	r24, 0x3E	; 62
     6de:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     6e8:	8e e3       	ldi	r24, 0x3E	; 62
     6ea:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
     6ee:	84 e0       	ldi	r24, 0x04	; 4
     6f0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
     6f4:	88 e0       	ldi	r24, 0x08	; 8
     6f6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
     6fa:	84 e0       	ldi	r24, 0x04	; 4
     6fc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     700:	8e e3       	ldi	r24, 0x3E	; 62
     702:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     706:	80 e0       	ldi	r24, 0x00	; 0
     708:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     70c:	8e e3       	ldi	r24, 0x3E	; 62
     70e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
     712:	8a e2       	ldi	r24, 0x2A	; 42
     714:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	
	//is
	send_data(0x3E);
     724:	8e e3       	ldi	r24, 0x3E	; 62
     726:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2C);
     730:	8c e2       	ldi	r24, 0x2C	; 44
     732:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
     736:	8a e2       	ldi	r24, 0x2A	; 42
     738:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x1A);
     73c:	8a e1       	ldi	r24, 0x1A	; 26
     73e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     742:	80 e0       	ldi	r24, 0x00	; 0
     744:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	
	//running
	send_data(0x3E);
     74e:	8e e3       	ldi	r24, 0x3E	; 62
     750:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x1A);
     754:	8a e1       	ldi	r24, 0x1A	; 26
     756:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2E);
     75a:	8e e2       	ldi	r24, 0x2E	; 46
     75c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     766:	8e e3       	ldi	r24, 0x3E	; 62
     768:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x20);
     76c:	80 e2       	ldi	r24, 0x20	; 32
     76e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     772:	8e e3       	ldi	r24, 0x3E	; 62
     774:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     77e:	8e e3       	ldi	r24, 0x3E	; 62
     780:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
     784:	84 e0       	ldi	r24, 0x04	; 4
     786:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
     78a:	88 e0       	ldi	r24, 0x08	; 8
     78c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     790:	8e e3       	ldi	r24, 0x3E	; 62
     792:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     79c:	8e e3       	ldi	r24, 0x3E	; 62
     79e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
     7a2:	84 e0       	ldi	r24, 0x04	; 4
     7a4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
     7a8:	88 e0       	ldi	r24, 0x08	; 8
     7aa:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     7ae:	8e e3       	ldi	r24, 0x3E	; 62
     7b0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     7ba:	8e e3       	ldi	r24, 0x3E	; 62
     7bc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     7c6:	8e e3       	ldi	r24, 0x3E	; 62
     7c8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
     7cc:	84 e0       	ldi	r24, 0x04	; 4
     7ce:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
     7d2:	88 e0       	ldi	r24, 0x08	; 8
     7d4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     7d8:	8e e3       	ldi	r24, 0x3E	; 62
     7da:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     7e4:	8e e3       	ldi	r24, 0x3E	; 62
     7e6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
     7ea:	82 e2       	ldi	r24, 0x22	; 34
     7ec:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3A);
     7f0:	8a e3       	ldi	r24, 0x3A	; 58
     7f2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		//out
	send_data(0x00);
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     7fc:	80 e0       	ldi	r24, 0x00	; 0
     7fe:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     802:	8e e3       	ldi	r24, 0x3E	; 62
     804:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
     808:	82 e2       	ldi	r24, 0x22	; 34
     80a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     80e:	8e e3       	ldi	r24, 0x3E	; 62
     810:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     814:	80 e0       	ldi	r24, 0x00	; 0
     816:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     81a:	8e e3       	ldi	r24, 0x3E	; 62
     81c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x20);
     820:	80 e2       	ldi	r24, 0x20	; 32
     822:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     826:	8e e3       	ldi	r24, 0x3E	; 62
     828:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
     832:	82 e0       	ldi	r24, 0x02	; 2
     834:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     838:	8e e3       	ldi	r24, 0x3E	; 62
     83a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
     83e:	82 e0       	ldi	r24, 0x02	; 2
     840:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     844:	08 95       	ret

00000846 <draw_digit>:
}

//draw digit selects the correct draw function for the given digit
void draw_digit(uint8_t digit){
	if(digit == 0){
     846:	81 11       	cpse	r24, r1
     848:	03 c0       	rjmp	.+6      	; 0x850 <draw_digit+0xa>
		draw_zero();
     84a:	0e 94 6b 00 	call	0xd6	; 0xd6 <draw_zero>
     84e:	08 95       	ret
		}else if(digit == 1){
     850:	81 30       	cpi	r24, 0x01	; 1
     852:	19 f4       	brne	.+6      	; 0x85a <draw_digit+0x14>
		draw_one();
     854:	0e 94 78 00 	call	0xf0	; 0xf0 <draw_one>
     858:	08 95       	ret
		}else if(digit == 2){
     85a:	82 30       	cpi	r24, 0x02	; 2
     85c:	19 f4       	brne	.+6      	; 0x864 <draw_digit+0x1e>
		draw_two();
     85e:	0e 94 85 00 	call	0x10a	; 0x10a <draw_two>
     862:	08 95       	ret
		}else if(digit == 3){
     864:	83 30       	cpi	r24, 0x03	; 3
     866:	19 f4       	brne	.+6      	; 0x86e <draw_digit+0x28>
		draw_three();
     868:	0e 94 92 00 	call	0x124	; 0x124 <draw_three>
     86c:	08 95       	ret
		}else if(digit == 4){
     86e:	84 30       	cpi	r24, 0x04	; 4
     870:	19 f4       	brne	.+6      	; 0x878 <draw_digit+0x32>
		draw_four();
     872:	0e 94 9f 00 	call	0x13e	; 0x13e <draw_four>
     876:	08 95       	ret
		}else if(digit == 5){
     878:	85 30       	cpi	r24, 0x05	; 5
     87a:	19 f4       	brne	.+6      	; 0x882 <draw_digit+0x3c>
		draw_five();
     87c:	0e 94 ac 00 	call	0x158	; 0x158 <draw_five>
     880:	08 95       	ret
		}else if(digit == 6){
     882:	86 30       	cpi	r24, 0x06	; 6
     884:	19 f4       	brne	.+6      	; 0x88c <draw_digit+0x46>
		draw_six();
     886:	0e 94 b9 00 	call	0x172	; 0x172 <draw_six>
     88a:	08 95       	ret
		}else if(digit == 7){
     88c:	87 30       	cpi	r24, 0x07	; 7
     88e:	19 f4       	brne	.+6      	; 0x896 <draw_digit+0x50>
		draw_seven();
     890:	0e 94 c6 00 	call	0x18c	; 0x18c <draw_seven>
     894:	08 95       	ret
		}else if(digit == 8){
     896:	88 30       	cpi	r24, 0x08	; 8
     898:	19 f4       	brne	.+6      	; 0x8a0 <draw_digit+0x5a>
		draw_eight();
     89a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <draw_eight>
     89e:	08 95       	ret
		}else if(digit == 9){
     8a0:	89 30       	cpi	r24, 0x09	; 9
     8a2:	11 f4       	brne	.+4      	; 0x8a8 <draw_digit+0x62>
		draw_nine();
     8a4:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <draw_nine>
     8a8:	08 95       	ret

000008aa <displaytimeunit>:
	}
}

//void displaytimeunit(uint8_t timeunit); displays time unit
void displaytimeunit(uint8_t timeunit){
     8aa:	cf 93       	push	r28
uint8_t timeunit_now = timeunit; //stores volatile into timeunit_now which will be manipulated for display
draw_digit((timeunit_now - (timeunit_now % 10))/10);
     8ac:	cd ec       	ldi	r28, 0xCD	; 205
     8ae:	8c 9f       	mul	r24, r28
     8b0:	c1 2d       	mov	r28, r1
     8b2:	11 24       	eor	r1, r1
     8b4:	c6 95       	lsr	r28
     8b6:	c6 95       	lsr	r28
     8b8:	c6 95       	lsr	r28
     8ba:	cc 0f       	add	r28, r28
     8bc:	9c 2f       	mov	r25, r28
     8be:	99 0f       	add	r25, r25
     8c0:	99 0f       	add	r25, r25
     8c2:	c9 0f       	add	r28, r25
     8c4:	98 2f       	mov	r25, r24
     8c6:	9c 1b       	sub	r25, r28
     8c8:	c9 2f       	mov	r28, r25
     8ca:	28 2f       	mov	r18, r24
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	c9 01       	movw	r24, r18
     8d0:	8c 1b       	sub	r24, r28
     8d2:	91 09       	sbc	r25, r1
     8d4:	6a e0       	ldi	r22, 0x0A	; 10
     8d6:	70 e0       	ldi	r23, 0x00	; 0
     8d8:	0e 94 04 11 	call	0x2208	; 0x2208 <__divmodhi4>
     8dc:	86 2f       	mov	r24, r22
     8de:	0e 94 23 04 	call	0x846	; 0x846 <draw_digit>
draw_digit(timeunit_now % 10);
     8e2:	8c 2f       	mov	r24, r28
     8e4:	0e 94 23 04 	call	0x846	; 0x846 <draw_digit>
}
     8e8:	cf 91       	pop	r28
     8ea:	08 95       	ret

000008ec <draw_letter>:

//void draw_letter(index); draws a letter corresponding to the index. 0=A, 1=B, etc. etc. 25=Z
//all letters are six pixels wide with the last pixel being a space
void draw_letter(uint8_t index){
	if(index == 0){//a
     8ec:	81 11       	cpse	r24, r1
     8ee:	13 c0       	rjmp	.+38     	; 0x916 <__stack+0x17>
		send_data(0x3E);
     8f0:	8e e3       	ldi	r24, 0x3E	; 62
     8f2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x0A);
     8f6:	8a e0       	ldi	r24, 0x0A	; 10
     8f8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x3E);
     8fc:	8e e3       	ldi	r24, 0x3E	; 62
     8fe:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     914:	08 95       	ret
	}else if(index == 1){//b
     916:	81 30       	cpi	r24, 0x01	; 1
     918:	99 f4       	brne	.+38     	; 0x940 <__stack+0x41>
		send_data(0x3E);
     91a:	8e e3       	ldi	r24, 0x3E	; 62
     91c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x2A);
     920:	8a e2       	ldi	r24, 0x2A	; 42
     922:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x14);
     926:	84 e1       	ldi	r24, 0x14	; 20
     928:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     93e:	08 95       	ret
	}else if(index == 2){//c
     940:	82 30       	cpi	r24, 0x02	; 2
     942:	99 f4       	brne	.+38     	; 0x96a <__stack+0x6b>
		send_data(0x3E);
     944:	8e e3       	ldi	r24, 0x3E	; 62
     946:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x22);
     94a:	82 e2       	ldi	r24, 0x22	; 34
     94c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);		
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     968:	08 95       	ret
	}else if(index == 3){//d
     96a:	83 30       	cpi	r24, 0x03	; 3
     96c:	99 f4       	brne	.+38     	; 0x994 <__stack+0x95>
		send_data(0x3E);
     96e:	8e e3       	ldi	r24, 0x3E	; 62
     970:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x22);
     974:	82 e2       	ldi	r24, 0x22	; 34
     976:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x1C);
     97a:	8c e1       	ldi	r24, 0x1C	; 28
     97c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     992:	08 95       	ret
	}else if(index == 4){//e
     994:	84 30       	cpi	r24, 0x04	; 4
     996:	99 f4       	brne	.+38     	; 0x9be <__stack+0xbf>
		send_data(0x3E);
     998:	8e e3       	ldi	r24, 0x3E	; 62
     99a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x2A);
     99e:	8a e2       	ldi	r24, 0x2A	; 42
     9a0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     9bc:	08 95       	ret
	}else if(index == 5){//f
     9be:	85 30       	cpi	r24, 0x05	; 5
     9c0:	99 f4       	brne	.+38     	; 0x9e8 <__stack+0xe9>
		send_data(0x3E);
     9c2:	8e e3       	ldi	r24, 0x3E	; 62
     9c4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x0A);
     9c8:	8a e0       	ldi	r24, 0x0A	; 10
     9ca:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x0A);
     9ce:	8a e0       	ldi	r24, 0x0A	; 10
     9d0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     9da:	80 e0       	ldi	r24, 0x00	; 0
     9dc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);		
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     9e6:	08 95       	ret
	}else if(index == 6){//g
     9e8:	86 30       	cpi	r24, 0x06	; 6
     9ea:	99 f4       	brne	.+38     	; 0xa12 <__stack+0x113>
		send_data(0x3E);
     9ec:	8e e3       	ldi	r24, 0x3E	; 62
     9ee:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x22);
     9f2:	82 e2       	ldi	r24, 0x22	; 34
     9f4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x3A);
     9f8:	8a e3       	ldi	r24, 0x3A	; 58
     9fa:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     a10:	08 95       	ret
	}else if(index == 7){//h
     a12:	87 30       	cpi	r24, 0x07	; 7
     a14:	99 f4       	brne	.+38     	; 0xa3c <__stack+0x13d>
		send_data(0x3E);
     a16:	8e e3       	ldi	r24, 0x3E	; 62
     a18:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x08);
     a1c:	88 e0       	ldi	r24, 0x08	; 8
     a1e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x3E);
     a22:	8e e3       	ldi	r24, 0x3E	; 62
     a24:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     a3a:	08 95       	ret
	}else if(index == 8){//i
     a3c:	88 30       	cpi	r24, 0x08	; 8
     a3e:	99 f4       	brne	.+38     	; 0xa66 <__stack+0x167>
		send_data(0x3E);
     a40:	8e e3       	ldi	r24, 0x3E	; 62
     a42:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     a64:	08 95       	ret
	}else if(index == 9){//j
     a66:	89 30       	cpi	r24, 0x09	; 9
     a68:	99 f4       	brne	.+38     	; 0xa90 <__stack+0x191>
		send_data(0x30);
     a6a:	80 e3       	ldi	r24, 0x30	; 48
     a6c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x20);
     a70:	80 e2       	ldi	r24, 0x20	; 32
     a72:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x3E);
     a76:	8e e3       	ldi	r24, 0x3E	; 62
     a78:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     a8e:	08 95       	ret
	}else if(index == 10){//k
     a90:	8a 30       	cpi	r24, 0x0A	; 10
     a92:	99 f4       	brne	.+38     	; 0xaba <__stack+0x1bb>
		send_data(0x3E);
     a94:	8e e3       	ldi	r24, 0x3E	; 62
     a96:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x1C);
     a9a:	8c e1       	ldi	r24, 0x1C	; 28
     a9c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x36);
     aa0:	86 e3       	ldi	r24, 0x36	; 54
     aa2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     ab8:	08 95       	ret
	}else if(index == 11){//L
     aba:	8b 30       	cpi	r24, 0x0B	; 11
     abc:	99 f4       	brne	.+38     	; 0xae4 <__stack+0x1e5>
		send_data(0x3E);
     abe:	8e e3       	ldi	r24, 0x3E	; 62
     ac0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x20);
     ac4:	80 e2       	ldi	r24, 0x20	; 32
     ac6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x20);
     aca:	80 e2       	ldi	r24, 0x20	; 32
     acc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     ae2:	08 95       	ret
	}else if(index == 12){//m
     ae4:	8c 30       	cpi	r24, 0x0C	; 12
     ae6:	99 f4       	brne	.+38     	; 0xb0e <__stack+0x20f>
		send_data(0x3E);
     ae8:	8e e3       	ldi	r24, 0x3E	; 62
     aea:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x04);
     aee:	84 e0       	ldi	r24, 0x04	; 4
     af0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x08);
     af4:	88 e0       	ldi	r24, 0x08	; 8
     af6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x04);
     afa:	84 e0       	ldi	r24, 0x04	; 4
     afc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x3E);
     b00:	8e e3       	ldi	r24, 0x3E	; 62
     b02:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);		
     b06:	80 e0       	ldi	r24, 0x00	; 0
     b08:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     b0c:	08 95       	ret
	}else if(index == 13){//n
     b0e:	8d 30       	cpi	r24, 0x0D	; 13
     b10:	99 f4       	brne	.+38     	; 0xb38 <__stack+0x239>
		send_data(0x3E);
     b12:	8e e3       	ldi	r24, 0x3E	; 62
     b14:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x04);
     b18:	84 e0       	ldi	r24, 0x04	; 4
     b1a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x08);
     b1e:	88 e0       	ldi	r24, 0x08	; 8
     b20:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x3E);
     b24:	8e e3       	ldi	r24, 0x3E	; 62
     b26:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     b36:	08 95       	ret
	}else if(index == 14){//o
     b38:	8e 30       	cpi	r24, 0x0E	; 14
     b3a:	99 f4       	brne	.+38     	; 0xb62 <__stack+0x263>
		send_data(0x3E);
     b3c:	8e e3       	ldi	r24, 0x3E	; 62
     b3e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x22);
     b42:	82 e2       	ldi	r24, 0x22	; 34
     b44:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x3E);
     b48:	8e e3       	ldi	r24, 0x3E	; 62
     b4a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     b54:	80 e0       	ldi	r24, 0x00	; 0
     b56:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     b60:	08 95       	ret
	}else if(index == 15){//p
     b62:	8f 30       	cpi	r24, 0x0F	; 15
     b64:	99 f4       	brne	.+38     	; 0xb8c <__stack+0x28d>
		send_data(0x3E);
     b66:	8e e3       	ldi	r24, 0x3E	; 62
     b68:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x0A);
     b6c:	8a e0       	ldi	r24, 0x0A	; 10
     b6e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x0E);
     b72:	8e e0       	ldi	r24, 0x0E	; 14
     b74:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     b8a:	08 95       	ret
	}else if(index == 16){//Q
     b8c:	80 31       	cpi	r24, 0x10	; 16
     b8e:	99 f4       	brne	.+38     	; 0xbb6 <__stack+0x2b7>
		send_data(0x3E);
     b90:	8e e3       	ldi	r24, 0x3E	; 62
     b92:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x72);
     b96:	82 e7       	ldi	r24, 0x72	; 114
     b98:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x26);
     b9c:	86 e2       	ldi	r24, 0x26	; 38
     b9e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x3C);
     ba2:	8c e3       	ldi	r24, 0x3C	; 60
     ba4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     bb4:	08 95       	ret
	}else if(index == 17){//r
     bb6:	81 31       	cpi	r24, 0x11	; 17
     bb8:	99 f4       	brne	.+38     	; 0xbe0 <__stack+0x2e1>
		send_data(0x3E);
     bba:	8e e3       	ldi	r24, 0x3E	; 62
     bbc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x1A);
     bc0:	8a e1       	ldi	r24, 0x1A	; 26
     bc2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x2E);
     bc6:	8e e2       	ldi	r24, 0x2E	; 46
     bc8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     bde:	08 95       	ret
	}else if(index == 18){//s
     be0:	82 31       	cpi	r24, 0x12	; 18
     be2:	99 f4       	brne	.+38     	; 0xc0a <__stack+0x30b>
		send_data(0x2C);
     be4:	8c e2       	ldi	r24, 0x2C	; 44
     be6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x2A);
     bea:	8a e2       	ldi	r24, 0x2A	; 42
     bec:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x1A);
     bf0:	8a e1       	ldi	r24, 0x1A	; 26
     bf2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     c08:	08 95       	ret
	}else if(index == 19){//T
     c0a:	83 31       	cpi	r24, 0x13	; 19
     c0c:	99 f4       	brne	.+38     	; 0xc34 <__stack+0x335>
		send_data(0x02);
     c0e:	82 e0       	ldi	r24, 0x02	; 2
     c10:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x3E);
     c14:	8e e3       	ldi	r24, 0x3E	; 62
     c16:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x02);
     c1a:	82 e0       	ldi	r24, 0x02	; 2
     c1c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     c20:	80 e0       	ldi	r24, 0x00	; 0
     c22:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     c32:	08 95       	ret
	}else if(index == 20){//u
     c34:	84 31       	cpi	r24, 0x14	; 20
     c36:	99 f4       	brne	.+38     	; 0xc5e <__stack+0x35f>
		send_data(0x3E);
     c38:	8e e3       	ldi	r24, 0x3E	; 62
     c3a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x20);
     c3e:	80 e2       	ldi	r24, 0x20	; 32
     c40:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x3E);
     c44:	8e e3       	ldi	r24, 0x3E	; 62
     c46:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     c5c:	08 95       	ret
	}else if(index == 21){//v
     c5e:	85 31       	cpi	r24, 0x15	; 21
     c60:	99 f4       	brne	.+38     	; 0xc88 <__stack+0x389>
		send_data(0x1E);
     c62:	8e e1       	ldi	r24, 0x1E	; 30
     c64:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x20);
     c68:	80 e2       	ldi	r24, 0x20	; 32
     c6a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x1E);
     c6e:	8e e1       	ldi	r24, 0x1E	; 30
     c70:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     c86:	08 95       	ret
	}else if(index == 22){//w
     c88:	86 31       	cpi	r24, 0x16	; 22
     c8a:	99 f4       	brne	.+38     	; 0xcb2 <__stack+0x3b3>
		send_data(0x3E);
     c8c:	8e e3       	ldi	r24, 0x3E	; 62
     c8e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x10);
     c92:	80 e1       	ldi	r24, 0x10	; 16
     c94:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x08);
     c98:	88 e0       	ldi	r24, 0x08	; 8
     c9a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x10);
     c9e:	80 e1       	ldi	r24, 0x10	; 16
     ca0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x3E);
     ca4:	8e e3       	ldi	r24, 0x3E	; 62
     ca6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     cb0:	08 95       	ret
	}else if(index == 23){//x
     cb2:	87 31       	cpi	r24, 0x17	; 23
     cb4:	99 f4       	brne	.+38     	; 0xcdc <__stack+0x3dd>
		send_data(0x22);
     cb6:	82 e2       	ldi	r24, 0x22	; 34
     cb8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x14);
     cbc:	84 e1       	ldi	r24, 0x14	; 20
     cbe:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x08);
     cc2:	88 e0       	ldi	r24, 0x08	; 8
     cc4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x14);
     cc8:	84 e1       	ldi	r24, 0x14	; 20
     cca:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x22);
     cce:	82 e2       	ldi	r24, 0x22	; 34
     cd0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     cd4:	80 e0       	ldi	r24, 0x00	; 0
     cd6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     cda:	08 95       	ret
	}else if(index == 24){//y
     cdc:	88 31       	cpi	r24, 0x18	; 24
     cde:	99 f4       	brne	.+38     	; 0xd06 <__stack+0x407>
		send_data(0x0E);
     ce0:	8e e0       	ldi	r24, 0x0E	; 14
     ce2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x38);
     ce6:	88 e3       	ldi	r24, 0x38	; 56
     ce8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x0E);
     cec:	8e e0       	ldi	r24, 0x0E	; 14
     cee:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     d04:	08 95       	ret
	}else if(index == 25){//z
     d06:	89 31       	cpi	r24, 0x19	; 25
     d08:	91 f4       	brne	.+36     	; 0xd2e <__stack+0x42f>
		send_data(0x32);
     d0a:	82 e3       	ldi	r24, 0x32	; 50
     d0c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x2A);
     d10:	8a e2       	ldi	r24, 0x2A	; 42
     d12:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x26);
     d16:	86 e2       	ldi	r24, 0x26	; 38
     d18:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     d2e:	08 95       	ret

00000d30 <draw_blankline>:
	}			
}
	
//void draw_blankline(void); draws a blank line
void draw_blankline(void){
     d30:	cf 93       	push	r28
     d32:	c0 e4       	ldi	r28, 0x40	; 64
	uint8_t k = 0;
	for(k=0;k<64;k++){
		send_data(0x00);
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     d3a:	c1 50       	subi	r28, 0x01	; 1
}
	
//void draw_blankline(void); draws a blank line
void draw_blankline(void){
	uint8_t k = 0;
	for(k=0;k<64;k++){
     d3c:	d9 f7       	brne	.-10     	; 0xd34 <draw_blankline+0x4>
		send_data(0x00);
	}
}
     d3e:	cf 91       	pop	r28
     d40:	08 95       	ret

00000d42 <draw_stopandmeditate>:

//void draw_stopandmeditate(void); fills one line with the message "STOP AND MEDITATE"	
void draw_stopandmeditate(void){
	//stop
	send_data(0x2C);
     d42:	8c e2       	ldi	r24, 0x2C	; 44
     d44:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
     d48:	8a e2       	ldi	r24, 0x2A	; 42
     d4a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x1A);
     d4e:	8a e1       	ldi	r24, 0x1A	; 26
     d50:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
     d5a:	82 e0       	ldi	r24, 0x02	; 2
     d5c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     d60:	8e e3       	ldi	r24, 0x3E	; 62
     d62:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
     d66:	82 e0       	ldi	r24, 0x02	; 2
     d68:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     d6c:	80 e0       	ldi	r24, 0x00	; 0
     d6e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     d72:	8e e3       	ldi	r24, 0x3E	; 62
     d74:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
     d78:	82 e2       	ldi	r24, 0x22	; 34
     d7a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     d7e:	8e e3       	ldi	r24, 0x3E	; 62
     d80:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     d8a:	8e e3       	ldi	r24, 0x3E	; 62
     d8c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0A);
     d90:	8a e0       	ldi	r24, 0x0A	; 10
     d92:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0E);
     d96:	8e e0       	ldi	r24, 0x0E	; 14
     d98:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     d9c:	80 e0       	ldi	r24, 0x00	; 0
     d9e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	//and
	send_data(0x3E);
     db4:	8e e3       	ldi	r24, 0x3E	; 62
     db6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0A);
     dba:	8a e0       	ldi	r24, 0x0A	; 10
     dbc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     dc0:	8e e3       	ldi	r24, 0x3E	; 62
     dc2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     dcc:	8e e3       	ldi	r24, 0x3E	; 62
     dce:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
     dd2:	84 e0       	ldi	r24, 0x04	; 4
     dd4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
     dd8:	88 e0       	ldi	r24, 0x08	; 8
     dda:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     dde:	8e e3       	ldi	r24, 0x3E	; 62
     de0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     dea:	8e e3       	ldi	r24, 0x3E	; 62
     dec:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
     df0:	82 e2       	ldi	r24, 0x22	; 34
     df2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x1C);
     df6:	8c e1       	ldi	r24, 0x1C	; 28
     df8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     e02:	80 e0       	ldi	r24, 0x00	; 0
     e04:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     e0e:	80 e0       	ldi	r24, 0x00	; 0
     e10:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	//meditate
	send_data(0x3E);
     e14:	8e e3       	ldi	r24, 0x3E	; 62
     e16:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
     e1a:	84 e0       	ldi	r24, 0x04	; 4
     e1c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
     e20:	88 e0       	ldi	r24, 0x08	; 8
     e22:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
     e26:	84 e0       	ldi	r24, 0x04	; 4
     e28:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     e2c:	8e e3       	ldi	r24, 0x3E	; 62
     e2e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     e38:	8e e3       	ldi	r24, 0x3E	; 62
     e3a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
     e3e:	8a e2       	ldi	r24, 0x2A	; 42
     e40:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     e4a:	8e e3       	ldi	r24, 0x3E	; 62
     e4c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
     e50:	82 e2       	ldi	r24, 0x22	; 34
     e52:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x1C);
     e56:	8c e1       	ldi	r24, 0x1C	; 28
     e58:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     e62:	8e e3       	ldi	r24, 0x3E	; 62
     e64:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     e68:	80 e0       	ldi	r24, 0x00	; 0
     e6a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
     e6e:	82 e0       	ldi	r24, 0x02	; 2
     e70:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     e74:	8e e3       	ldi	r24, 0x3E	; 62
     e76:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
     e7a:	82 e0       	ldi	r24, 0x02	; 2
     e7c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     e86:	8e e3       	ldi	r24, 0x3E	; 62
     e88:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0A);
     e8c:	8a e0       	ldi	r24, 0x0A	; 10
     e8e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     e92:	8e e3       	ldi	r24, 0x3E	; 62
     e94:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
     e9e:	82 e0       	ldi	r24, 0x02	; 2
     ea0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     ea4:	8e e3       	ldi	r24, 0x3E	; 62
     ea6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
     eaa:	82 e0       	ldi	r24, 0x02	; 2
     eac:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     eb6:	8e e3       	ldi	r24, 0x3E	; 62
     eb8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
     ebc:	8a e2       	ldi	r24, 0x2A	; 42
     ebe:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     ec2:	08 95       	ret

00000ec4 <draw_tendself>:
}

void draw_tendself(void){
     ec4:	cf 93       	push	r28
     ec6:	cd e0       	ldi	r28, 0x0D	; 13
	for(uint8_t s=0; s<13; s++){
		send_data(0x00);
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     ece:	c1 50       	subi	r28, 0x01	; 1
	send_data(0x3E);
	send_data(0x2A);
}

void draw_tendself(void){
	for(uint8_t s=0; s<13; s++){
     ed0:	d9 f7       	brne	.-10     	; 0xec8 <draw_tendself+0x4>
		send_data(0x00);
	}
	send_data(0x02);
     ed2:	82 e0       	ldi	r24, 0x02	; 2
     ed4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     ed8:	8e e3       	ldi	r24, 0x3E	; 62
     eda:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
     ede:	82 e0       	ldi	r24, 0x02	; 2
     ee0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     eea:	8e e3       	ldi	r24, 0x3E	; 62
     eec:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
     ef0:	8a e2       	ldi	r24, 0x2A	; 42
     ef2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     efc:	8e e3       	ldi	r24, 0x3E	; 62
     efe:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
     f02:	84 e0       	ldi	r24, 0x04	; 4
     f04:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
     f08:	88 e0       	ldi	r24, 0x08	; 8
     f0a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     f0e:	8e e3       	ldi	r24, 0x3E	; 62
     f10:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     f1a:	8e e3       	ldi	r24, 0x3E	; 62
     f1c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
     f20:	82 e2       	ldi	r24, 0x22	; 34
     f22:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x1C);
     f26:	8c e1       	ldi	r24, 0x1C	; 28
     f28:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     f32:	80 e0       	ldi	r24, 0x00	; 0
     f34:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2C);
     f50:	8c e2       	ldi	r24, 0x2C	; 44
     f52:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
     f56:	8a e2       	ldi	r24, 0x2A	; 42
     f58:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x1A);
     f5c:	8a e1       	ldi	r24, 0x1A	; 26
     f5e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     f68:	8e e3       	ldi	r24, 0x3E	; 62
     f6a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
     f6e:	8a e2       	ldi	r24, 0x2A	; 42
     f70:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     f7a:	8e e3       	ldi	r24, 0x3E	; 62
     f7c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x20);
     f80:	80 e2       	ldi	r24, 0x20	; 32
     f82:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x20);
     f86:	80 e2       	ldi	r24, 0x20	; 32
     f88:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     f92:	8e e3       	ldi	r24, 0x3E	; 62
     f94:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0A);
     f98:	8a e0       	ldi	r24, 0x0A	; 10
     f9a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0A);
     f9e:	8a e0       	ldi	r24, 0x0A	; 10
     fa0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     fa4:	c0 e1       	ldi	r28, 0x10	; 16
	for(uint8_t w=0;w<16;w++){
		send_data(0x00);
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
     fac:	c1 50       	subi	r28, 0x01	; 1
	send_data(0x20);
	send_data(0x00);
	send_data(0x3E);
	send_data(0x0A);
	send_data(0x0A);
	for(uint8_t w=0;w<16;w++){
     fae:	d9 f7       	brne	.-10     	; 0xfa6 <draw_tendself+0xe2>
		send_data(0x00);
	}
}
     fb0:	cf 91       	pop	r28
     fb2:	08 95       	ret

00000fb4 <draw_climbmarshill>:

void draw_climbmarshill(void){
     fb4:	cf 93       	push	r28
	uint8_t i=0;	
	send_data(0x00);
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     fbc:	8e e3       	ldi	r24, 0x3E	; 62
     fbe:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
     fc2:	82 e2       	ldi	r24, 0x22	; 34
     fc4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     fce:	8e e3       	ldi	r24, 0x3E	; 62
     fd0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x20);
     fd4:	80 e2       	ldi	r24, 0x20	; 32
     fd6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x20);
     fda:	80 e2       	ldi	r24, 0x20	; 32
     fdc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     fe6:	8e e3       	ldi	r24, 0x3E	; 62
     fe8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
     ff2:	8e e3       	ldi	r24, 0x3E	; 62
     ff4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
     ff8:	84 e0       	ldi	r24, 0x04	; 4
     ffa:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
     ffe:	88 e0       	ldi	r24, 0x08	; 8
    1000:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
    1004:	84 e0       	ldi	r24, 0x04	; 4
    1006:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    100a:	8e e3       	ldi	r24, 0x3E	; 62
    100c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1016:	8e e3       	ldi	r24, 0x3E	; 62
    1018:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
    101c:	8a e2       	ldi	r24, 0x2A	; 42
    101e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x14);
    1022:	84 e1       	ldi	r24, 0x14	; 20
    1024:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    1028:	c7 e0       	ldi	r28, 0x07	; 7
	for(i=0;i<7;i++){
		send_data(0x00);
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    1030:	c1 50       	subi	r28, 0x01	; 1
	send_data(0x3E);
	send_data(0x00);
	send_data(0x3E);
	send_data(0x2A);
	send_data(0x14);
	for(i=0;i<7;i++){
    1032:	d9 f7       	brne	.-10     	; 0x102a <draw_climbmarshill+0x76>
		send_data(0x00);
	}
	send_data(0x3E);
    1034:	8e e3       	ldi	r24, 0x3E	; 62
    1036:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
    103a:	84 e0       	ldi	r24, 0x04	; 4
    103c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
    1040:	88 e0       	ldi	r24, 0x08	; 8
    1042:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
    1046:	84 e0       	ldi	r24, 0x04	; 4
    1048:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    104c:	8e e3       	ldi	r24, 0x3E	; 62
    104e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1058:	8e e3       	ldi	r24, 0x3E	; 62
    105a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0A);
    105e:	8a e0       	ldi	r24, 0x0A	; 10
    1060:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1064:	8e e3       	ldi	r24, 0x3E	; 62
    1066:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1070:	8e e3       	ldi	r24, 0x3E	; 62
    1072:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x1A);
    1076:	8a e1       	ldi	r24, 0x1A	; 26
    1078:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2E);
    107c:	8e e2       	ldi	r24, 0x2E	; 46
    107e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2C);
    1088:	8c e2       	ldi	r24, 0x2C	; 44
    108a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
    108e:	8a e2       	ldi	r24, 0x2A	; 42
    1090:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x1A);
    1094:	8a e1       	ldi	r24, 0x1A	; 26
    1096:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    109a:	c7 e0       	ldi	r28, 0x07	; 7
	for(i=0;i<7;i++){
		send_data(0x00);
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    10a2:	c1 50       	subi	r28, 0x01	; 1
	send_data(0x2E);
	send_data(0x00);
	send_data(0x2C);
	send_data(0x2A);
	send_data(0x1A);
	for(i=0;i<7;i++){
    10a4:	d9 f7       	brne	.-10     	; 0x109c <draw_climbmarshill+0xe8>
		send_data(0x00);
	}
	send_data(0x3E);
    10a6:	8e e3       	ldi	r24, 0x3E	; 62
    10a8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
    10ac:	88 e0       	ldi	r24, 0x08	; 8
    10ae:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    10b2:	8e e3       	ldi	r24, 0x3E	; 62
    10b4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    10be:	8e e3       	ldi	r24, 0x3E	; 62
    10c0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    10ca:	8e e3       	ldi	r24, 0x3E	; 62
    10cc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x20);
    10d0:	80 e2       	ldi	r24, 0x20	; 32
    10d2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x20);
    10d6:	80 e2       	ldi	r24, 0x20	; 32
    10d8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    10e2:	8e e3       	ldi	r24, 0x3E	; 62
    10e4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x20);
    10e8:	80 e2       	ldi	r24, 0x20	; 32
    10ea:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x20);
    10ee:	80 e2       	ldi	r24, 0x20	; 32
    10f0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	
	send_data(0x00);
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
}
    10fa:	cf 91       	pop	r28
    10fc:	08 95       	ret

000010fe <draw_benefitnearest>:

void draw_benefitnearest(void){
    10fe:	cf 93       	push	r28
	for(uint8_t j=0;j<4;j++){
		send_data(0x00);
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    1112:	80 e0       	ldi	r24, 0x00	; 0
    1114:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	}
	send_data(0x3E);
    1118:	8e e3       	ldi	r24, 0x3E	; 62
    111a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
    111e:	8a e2       	ldi	r24, 0x2A	; 42
    1120:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x14);
    1124:	84 e1       	ldi	r24, 0x14	; 20
    1126:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1130:	8e e3       	ldi	r24, 0x3E	; 62
    1132:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
    1136:	8a e2       	ldi	r24, 0x2A	; 42
    1138:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1142:	8e e3       	ldi	r24, 0x3E	; 62
    1144:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
    1148:	84 e0       	ldi	r24, 0x04	; 4
    114a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
    114e:	88 e0       	ldi	r24, 0x08	; 8
    1150:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1154:	8e e3       	ldi	r24, 0x3E	; 62
    1156:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    115a:	80 e0       	ldi	r24, 0x00	; 0
    115c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1160:	8e e3       	ldi	r24, 0x3E	; 62
    1162:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
    1166:	8a e2       	ldi	r24, 0x2A	; 42
    1168:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1172:	8e e3       	ldi	r24, 0x3E	; 62
    1174:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0A);
    1178:	8a e0       	ldi	r24, 0x0A	; 10
    117a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0A);
    117e:	8a e0       	ldi	r24, 0x0A	; 10
    1180:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    118a:	8e e3       	ldi	r24, 0x3E	; 62
    118c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1190:	80 e0       	ldi	r24, 0x00	; 0
    1192:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
    1196:	82 e0       	ldi	r24, 0x02	; 2
    1198:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    119c:	8e e3       	ldi	r24, 0x3E	; 62
    119e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
    11a2:	82 e0       	ldi	r24, 0x02	; 2
    11a4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    11a8:	c6 e0       	ldi	r28, 0x06	; 6
	for(uint8_t r=0;r<6;r++){
		send_data(0x00);
    11aa:	80 e0       	ldi	r24, 0x00	; 0
    11ac:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    11b0:	c1 50       	subi	r28, 0x01	; 1
	send_data(0x3E);
	send_data(0x00);
	send_data(0x02);
	send_data(0x3E);
	send_data(0x02);
	for(uint8_t r=0;r<6;r++){
    11b2:	d9 f7       	brne	.-10     	; 0x11aa <draw_benefitnearest+0xac>
		send_data(0x00);
	}
	send_data(0x3E);
    11b4:	8e e3       	ldi	r24, 0x3E	; 62
    11b6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
    11ba:	84 e0       	ldi	r24, 0x04	; 4
    11bc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
    11c0:	88 e0       	ldi	r24, 0x08	; 8
    11c2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    11c6:	8e e3       	ldi	r24, 0x3E	; 62
    11c8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    11d2:	8e e3       	ldi	r24, 0x3E	; 62
    11d4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
    11d8:	8a e2       	ldi	r24, 0x2A	; 42
    11da:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    11e4:	8e e3       	ldi	r24, 0x3E	; 62
    11e6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0A);
    11ea:	8a e0       	ldi	r24, 0x0A	; 10
    11ec:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    11f0:	8e e3       	ldi	r24, 0x3E	; 62
    11f2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    11f6:	80 e0       	ldi	r24, 0x00	; 0
    11f8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    11fc:	8e e3       	ldi	r24, 0x3E	; 62
    11fe:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x1A);
    1202:	8a e1       	ldi	r24, 0x1A	; 26
    1204:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2E);
    1208:	8e e2       	ldi	r24, 0x2E	; 46
    120a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1214:	8e e3       	ldi	r24, 0x3E	; 62
    1216:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
    121a:	8a e2       	ldi	r24, 0x2A	; 42
    121c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2C);
    1226:	8c e2       	ldi	r24, 0x2C	; 44
    1228:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
    122c:	8a e2       	ldi	r24, 0x2A	; 42
    122e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x1A);
    1232:	8a e1       	ldi	r24, 0x1A	; 26
    1234:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
    123e:	82 e0       	ldi	r24, 0x02	; 2
    1240:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1244:	8e e3       	ldi	r24, 0x3E	; 62
    1246:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
    124a:	82 e0       	ldi	r24, 0x02	; 2
    124c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	for(uint8_t b=0; b<4;b++){
		send_data(0x00);
    1250:	80 e0       	ldi	r24, 0x00	; 0
    1252:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	}
	
}
    1268:	cf 91       	pop	r28
    126a:	08 95       	ret

0000126c <draw_person>:

void draw_person(void){
    126c:	cf 93       	push	r28
    126e:	c3 e1       	ldi	r28, 0x13	; 19
	uint8_t i=0;
	for(i=0;i<19;i++){
		send_data(0x00);
    1270:	80 e0       	ldi	r24, 0x00	; 0
    1272:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    1276:	c1 50       	subi	r28, 0x01	; 1
	
}

void draw_person(void){
	uint8_t i=0;
	for(i=0;i<19;i++){
    1278:	d9 f7       	brne	.-10     	; 0x1270 <draw_person+0x4>
		send_data(0x00);
	}
	send_data(0x3E);
    127a:	8e e3       	ldi	r24, 0x3E	; 62
    127c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0A);
    1280:	8a e0       	ldi	r24, 0x0A	; 10
    1282:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0E);
    1286:	8e e0       	ldi	r24, 0x0E	; 14
    1288:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1292:	8e e3       	ldi	r24, 0x3E	; 62
    1294:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
    1298:	8a e2       	ldi	r24, 0x2A	; 42
    129a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    12a4:	8e e3       	ldi	r24, 0x3E	; 62
    12a6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x1A);
    12aa:	8a e1       	ldi	r24, 0x1A	; 26
    12ac:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2E);
    12b0:	8e e2       	ldi	r24, 0x2E	; 46
    12b2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    12b6:	80 e0       	ldi	r24, 0x00	; 0
    12b8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2C);
    12bc:	8c e2       	ldi	r24, 0x2C	; 44
    12be:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
    12c2:	8a e2       	ldi	r24, 0x2A	; 42
    12c4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x1A);
    12c8:	8a e1       	ldi	r24, 0x1A	; 26
    12ca:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    12d4:	8e e3       	ldi	r24, 0x3E	; 62
    12d6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
    12da:	82 e2       	ldi	r24, 0x22	; 34
    12dc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    12e0:	8e e3       	ldi	r24, 0x3E	; 62
    12e2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    12ec:	8e e3       	ldi	r24, 0x3E	; 62
    12ee:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
    12f2:	84 e0       	ldi	r24, 0x04	; 4
    12f4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
    12f8:	88 e0       	ldi	r24, 0x08	; 8
    12fa:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    12fe:	8e e3       	ldi	r24, 0x3E	; 62
    1300:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    1304:	c6 e1       	ldi	r28, 0x16	; 22
	for(i=0;i<22;i++){
		send_data(0x00);
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    130c:	c1 50       	subi	r28, 0x01	; 1
	send_data(0x00);
	send_data(0x3E);
	send_data(0x04);
	send_data(0x08);
	send_data(0x3E);
	for(i=0;i<22;i++){
    130e:	d9 f7       	brne	.-10     	; 0x1306 <draw_person+0x9a>
		send_data(0x00);
	}
}
    1310:	cf 91       	pop	r28
    1312:	08 95       	ret

00001314 <draw_fixsomething>:

	
void draw_fixsomething(void){
    1314:	cf 93       	push	r28
    1316:	c6 e0       	ldi	r28, 0x06	; 6
	uint8_t i=0;
	for(i=0;i<6;i++){
		send_data(0x00);
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    131e:	c1 50       	subi	r28, 0x01	; 1
}

	
void draw_fixsomething(void){
	uint8_t i=0;
	for(i=0;i<6;i++){
    1320:	d9 f7       	brne	.-10     	; 0x1318 <draw_fixsomething+0x4>
		send_data(0x00);
	}
	send_data(0x3E);
    1322:	8e e3       	ldi	r24, 0x3E	; 62
    1324:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0A);
    1328:	8a e0       	ldi	r24, 0x0A	; 10
    132a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0A);
    132e:	8a e0       	ldi	r24, 0x0A	; 10
    1330:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1334:	80 e0       	ldi	r24, 0x00	; 0
    1336:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    133a:	8e e3       	ldi	r24, 0x3E	; 62
    133c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
    1346:	82 e2       	ldi	r24, 0x22	; 34
    1348:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x14);
    134c:	84 e1       	ldi	r24, 0x14	; 20
    134e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
    1352:	88 e0       	ldi	r24, 0x08	; 8
    1354:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x14);
    1358:	84 e1       	ldi	r24, 0x14	; 20
    135a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
    135e:	82 e2       	ldi	r24, 0x22	; 34
    1360:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    1364:	ca e0       	ldi	r28, 0x0A	; 10
	for(i=0;i<10;i++){
	send_data(0x00);
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    136c:	c1 50       	subi	r28, 0x01	; 1
	send_data(0x22);
	send_data(0x14);
	send_data(0x08);
	send_data(0x14);
	send_data(0x22);
	for(i=0;i<10;i++){
    136e:	d9 f7       	brne	.-10     	; 0x1366 <draw_fixsomething+0x52>
	send_data(0x00);
	}
	send_data(0x2C);
    1370:	8c e2       	ldi	r24, 0x2C	; 44
    1372:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
    1376:	8a e2       	ldi	r24, 0x2A	; 42
    1378:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x1A);
    137c:	8a e1       	ldi	r24, 0x1A	; 26
    137e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1388:	8e e3       	ldi	r24, 0x3E	; 62
    138a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
    138e:	82 e2       	ldi	r24, 0x22	; 34
    1390:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1394:	8e e3       	ldi	r24, 0x3E	; 62
    1396:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    13a0:	8e e3       	ldi	r24, 0x3E	; 62
    13a2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
    13a6:	84 e0       	ldi	r24, 0x04	; 4
    13a8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
    13ac:	88 e0       	ldi	r24, 0x08	; 8
    13ae:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
    13b2:	84 e0       	ldi	r24, 0x04	; 4
    13b4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    13b8:	8e e3       	ldi	r24, 0x3E	; 62
    13ba:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    13be:	80 e0       	ldi	r24, 0x00	; 0
    13c0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    13c4:	8e e3       	ldi	r24, 0x3E	; 62
    13c6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
    13ca:	8a e2       	ldi	r24, 0x2A	; 42
    13cc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    13d0:	80 e0       	ldi	r24, 0x00	; 0
    13d2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
    13d6:	82 e0       	ldi	r24, 0x02	; 2
    13d8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    13dc:	8e e3       	ldi	r24, 0x3E	; 62
    13de:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
    13e2:	82 e0       	ldi	r24, 0x02	; 2
    13e4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    13e8:	80 e0       	ldi	r24, 0x00	; 0
    13ea:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    13ee:	8e e3       	ldi	r24, 0x3E	; 62
    13f0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
    13f4:	88 e0       	ldi	r24, 0x08	; 8
    13f6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    13fa:	8e e3       	ldi	r24, 0x3E	; 62
    13fc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1406:	8e e3       	ldi	r24, 0x3E	; 62
    1408:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    140c:	80 e0       	ldi	r24, 0x00	; 0
    140e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1412:	8e e3       	ldi	r24, 0x3E	; 62
    1414:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
    1418:	84 e0       	ldi	r24, 0x04	; 4
    141a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
    141e:	88 e0       	ldi	r24, 0x08	; 8
    1420:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1424:	8e e3       	ldi	r24, 0x3E	; 62
    1426:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1430:	8e e3       	ldi	r24, 0x3E	; 62
    1432:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
    1436:	82 e2       	ldi	r24, 0x22	; 34
    1438:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3A);
    143c:	8a e3       	ldi	r24, 0x3A	; 58
    143e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    1442:	c5 e0       	ldi	r28, 0x05	; 5

	for(i=0;i<5;i++){
		send_data(0x00);
    1444:	80 e0       	ldi	r24, 0x00	; 0
    1446:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    144a:	c1 50       	subi	r28, 0x01	; 1
	send_data(0x00);
	send_data(0x3E);
	send_data(0x22);
	send_data(0x3A);

	for(i=0;i<5;i++){
    144c:	d9 f7       	brne	.-10     	; 0x1444 <draw_fixsomething+0x130>
		send_data(0x00);
	}
}
    144e:	cf 91       	pop	r28
    1450:	08 95       	ret

00001452 <draw_goto>:
	
void draw_goto(void){
    1452:	cf 93       	push	r28
    1454:	c3 e1       	ldi	r28, 0x13	; 19
	uint8_t i=0;
	for(i=0;i<19;i++){
		send_data(0x00);
    1456:	80 e0       	ldi	r24, 0x00	; 0
    1458:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    145c:	c1 50       	subi	r28, 0x01	; 1
	}
}
	
void draw_goto(void){
	uint8_t i=0;
	for(i=0;i<19;i++){
    145e:	d9 f7       	brne	.-10     	; 0x1456 <draw_goto+0x4>
		send_data(0x00);
	}
	send_data(0x3E);
    1460:	8e e3       	ldi	r24, 0x3E	; 62
    1462:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
    1466:	82 e2       	ldi	r24, 0x22	; 34
    1468:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3A);
    146c:	8a e3       	ldi	r24, 0x3A	; 58
    146e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1472:	80 e0       	ldi	r24, 0x00	; 0
    1474:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1478:	8e e3       	ldi	r24, 0x3E	; 62
    147a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
    147e:	82 e2       	ldi	r24, 0x22	; 34
    1480:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1484:	8e e3       	ldi	r24, 0x3E	; 62
    1486:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    148a:	c6 e0       	ldi	r28, 0x06	; 6
	for(i=0;i<6;i++){
		send_data(0x00);
    148c:	80 e0       	ldi	r24, 0x00	; 0
    148e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    1492:	c1 50       	subi	r28, 0x01	; 1
	send_data(0x3A);
	send_data(0x00);
	send_data(0x3E);
	send_data(0x22);
	send_data(0x3E);
	for(i=0;i<6;i++){
    1494:	d9 f7       	brne	.-10     	; 0x148c <draw_goto+0x3a>
		send_data(0x00);
	}
	send_data(0x02);
    1496:	82 e0       	ldi	r24, 0x02	; 2
    1498:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    149c:	8e e3       	ldi	r24, 0x3E	; 62
    149e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
    14a2:	82 e0       	ldi	r24, 0x02	; 2
    14a4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    14a8:	80 e0       	ldi	r24, 0x00	; 0
    14aa:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    14ae:	8e e3       	ldi	r24, 0x3E	; 62
    14b0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
    14b4:	82 e2       	ldi	r24, 0x22	; 34
    14b6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    14ba:	8e e3       	ldi	r24, 0x3E	; 62
    14bc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    14c0:	c8 e1       	ldi	r28, 0x18	; 24
	for(i=0;i<24;i++){
		send_data(0x00);
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    14c8:	c1 50       	subi	r28, 0x01	; 1
	send_data(0x02);
	send_data(0x00);
	send_data(0x3E);
	send_data(0x22);
	send_data(0x3E);
	for(i=0;i<24;i++){
    14ca:	d9 f7       	brne	.-10     	; 0x14c2 <draw_goto+0x70>
		send_data(0x00);
	}
}
    14cc:	cf 91       	pop	r28
    14ce:	08 95       	ret

000014d0 <draw_getxxxx>:

void draw_deg_e(uint8_t current_or_past){//1=current, 2=past, uses MEHC_order[2] to set nucleus, MEHC_order[4] to vary E/W
	
}
	
void draw_getxxxx(uint8_t current_or_past){ //1=current, 2=past
    14d0:	cf 93       	push	r28
    14d2:	df 93       	push	r29
    14d4:	d8 2f       	mov	r29, r24
    14d6:	c5 e0       	ldi	r28, 0x05	; 5
	uint8_t i=0;
	for(i=0;i<5;i++){
		send_data(0x00);
    14d8:	80 e0       	ldi	r24, 0x00	; 0
    14da:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    14de:	c1 50       	subi	r28, 0x01	; 1
	
}
	
void draw_getxxxx(uint8_t current_or_past){ //1=current, 2=past
	uint8_t i=0;
	for(i=0;i<5;i++){
    14e0:	d9 f7       	brne	.-10     	; 0x14d8 <draw_getxxxx+0x8>
		send_data(0x00);
	}
	send_data(0x3E);
    14e2:	8e e3       	ldi	r24, 0x3E	; 62
    14e4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
    14e8:	82 e2       	ldi	r24, 0x22	; 34
    14ea:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3A);
    14ee:	8a e3       	ldi	r24, 0x3A	; 58
    14f0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    14f4:	80 e0       	ldi	r24, 0x00	; 0
    14f6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    14fa:	8e e3       	ldi	r24, 0x3E	; 62
    14fc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
    1500:	8a e2       	ldi	r24, 0x2A	; 42
    1502:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
    150c:	82 e0       	ldi	r24, 0x02	; 2
    150e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1512:	8e e3       	ldi	r24, 0x3E	; 62
    1514:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
    1518:	82 e0       	ldi	r24, 0x02	; 2
    151a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    151e:	c0 e1       	ldi	r28, 0x10	; 16
	for(i=0;i<16;i++){
		send_data(0x00);
    1520:	80 e0       	ldi	r24, 0x00	; 0
    1522:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    1526:	c1 50       	subi	r28, 0x01	; 1
	send_data(0x2A);
	send_data(0x00);
	send_data(0x02);
	send_data(0x3E);
	send_data(0x02);
	for(i=0;i<16;i++){
    1528:	d9 f7       	brne	.-10     	; 0x1520 <draw_getxxxx+0x50>
		send_data(0x00);
	}
	
	if(current_or_past == 1){//if current
    152a:	d1 30       	cpi	r29, 0x01	; 1
    152c:	09 f0       	breq	.+2      	; 0x1530 <draw_getxxxx+0x60>
    152e:	52 c0       	rjmp	.+164    	; 0x15d4 <draw_getxxxx+0x104>
		draw_letter(current_MEHC_order[2] % 26);
    1530:	80 91 19 01 	lds	r24, 0x0119
    1534:	df e4       	ldi	r29, 0x4F	; 79
    1536:	8d 9f       	mul	r24, r29
    1538:	91 2d       	mov	r25, r1
    153a:	11 24       	eor	r1, r1
    153c:	96 95       	lsr	r25
    153e:	96 95       	lsr	r25
    1540:	96 95       	lsr	r25
    1542:	ca e1       	ldi	r28, 0x1A	; 26
    1544:	9c 9f       	mul	r25, r28
    1546:	80 19       	sub	r24, r0
    1548:	11 24       	eor	r1, r1
    154a:	0e 94 76 04 	call	0x8ec	; 0x8ec <draw_letter>
		send_data(0x00);
    154e:	80 e0       	ldi	r24, 0x00	; 0
    1550:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    155a:	80 e0       	ldi	r24, 0x00	; 0
    155c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		draw_letter(current_MEHC_order[3] % 26);
    1560:	80 91 1a 01 	lds	r24, 0x011A
    1564:	8d 9f       	mul	r24, r29
    1566:	91 2d       	mov	r25, r1
    1568:	11 24       	eor	r1, r1
    156a:	96 95       	lsr	r25
    156c:	96 95       	lsr	r25
    156e:	96 95       	lsr	r25
    1570:	9c 9f       	mul	r25, r28
    1572:	80 19       	sub	r24, r0
    1574:	11 24       	eor	r1, r1
    1576:	0e 94 76 04 	call	0x8ec	; 0x8ec <draw_letter>
		send_data(0x00);
    157a:	80 e0       	ldi	r24, 0x00	; 0
    157c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    1580:	80 e0       	ldi	r24, 0x00	; 0
    1582:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    1586:	80 e0       	ldi	r24, 0x00	; 0
    1588:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		draw_letter(current_MEHC_order[4] % 26);
    158c:	80 91 1b 01 	lds	r24, 0x011B
    1590:	8d 9f       	mul	r24, r29
    1592:	91 2d       	mov	r25, r1
    1594:	11 24       	eor	r1, r1
    1596:	96 95       	lsr	r25
    1598:	96 95       	lsr	r25
    159a:	96 95       	lsr	r25
    159c:	9c 9f       	mul	r25, r28
    159e:	80 19       	sub	r24, r0
    15a0:	11 24       	eor	r1, r1
    15a2:	0e 94 76 04 	call	0x8ec	; 0x8ec <draw_letter>
		send_data(0x00);
    15a6:	80 e0       	ldi	r24, 0x00	; 0
    15a8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    15ac:	80 e0       	ldi	r24, 0x00	; 0
    15ae:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		draw_letter(current_MEHC_order[5] % 26);
    15b8:	80 91 1c 01 	lds	r24, 0x011C
    15bc:	8d 9f       	mul	r24, r29
    15be:	d1 2d       	mov	r29, r1
    15c0:	11 24       	eor	r1, r1
    15c2:	d6 95       	lsr	r29
    15c4:	d6 95       	lsr	r29
    15c6:	d6 95       	lsr	r29
    15c8:	dc 9f       	mul	r29, r28
    15ca:	80 19       	sub	r24, r0
    15cc:	11 24       	eor	r1, r1
    15ce:	0e 94 76 04 	call	0x8ec	; 0x8ec <draw_letter>
    15d2:	54 c0       	rjmp	.+168    	; 0x167c <draw_getxxxx+0x1ac>
	}
	if(current_or_past == 2){//if past
    15d4:	d2 30       	cpi	r29, 0x02	; 2
    15d6:	09 f0       	breq	.+2      	; 0x15da <draw_getxxxx+0x10a>
    15d8:	51 c0       	rjmp	.+162    	; 0x167c <draw_getxxxx+0x1ac>
		draw_letter(previous_MEHC_order[2] % 26);
    15da:	80 91 0f 01 	lds	r24, 0x010F
    15de:	df e4       	ldi	r29, 0x4F	; 79
    15e0:	8d 9f       	mul	r24, r29
    15e2:	91 2d       	mov	r25, r1
    15e4:	11 24       	eor	r1, r1
    15e6:	96 95       	lsr	r25
    15e8:	96 95       	lsr	r25
    15ea:	96 95       	lsr	r25
    15ec:	ca e1       	ldi	r28, 0x1A	; 26
    15ee:	9c 9f       	mul	r25, r28
    15f0:	80 19       	sub	r24, r0
    15f2:	11 24       	eor	r1, r1
    15f4:	0e 94 76 04 	call	0x8ec	; 0x8ec <draw_letter>
		send_data(0x00);
    15f8:	80 e0       	ldi	r24, 0x00	; 0
    15fa:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    1604:	80 e0       	ldi	r24, 0x00	; 0
    1606:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		draw_letter(previous_MEHC_order[3] % 26);
    160a:	80 91 10 01 	lds	r24, 0x0110
    160e:	8d 9f       	mul	r24, r29
    1610:	91 2d       	mov	r25, r1
    1612:	11 24       	eor	r1, r1
    1614:	96 95       	lsr	r25
    1616:	96 95       	lsr	r25
    1618:	96 95       	lsr	r25
    161a:	9c 9f       	mul	r25, r28
    161c:	80 19       	sub	r24, r0
    161e:	11 24       	eor	r1, r1
    1620:	0e 94 76 04 	call	0x8ec	; 0x8ec <draw_letter>
		send_data(0x00);
    1624:	80 e0       	ldi	r24, 0x00	; 0
    1626:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    162a:	80 e0       	ldi	r24, 0x00	; 0
    162c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    1630:	80 e0       	ldi	r24, 0x00	; 0
    1632:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		draw_letter(previous_MEHC_order[4] % 26);
    1636:	80 91 11 01 	lds	r24, 0x0111
    163a:	8d 9f       	mul	r24, r29
    163c:	91 2d       	mov	r25, r1
    163e:	11 24       	eor	r1, r1
    1640:	96 95       	lsr	r25
    1642:	96 95       	lsr	r25
    1644:	96 95       	lsr	r25
    1646:	9c 9f       	mul	r25, r28
    1648:	80 19       	sub	r24, r0
    164a:	11 24       	eor	r1, r1
    164c:	0e 94 76 04 	call	0x8ec	; 0x8ec <draw_letter>
		send_data(0x00);
    1650:	80 e0       	ldi	r24, 0x00	; 0
    1652:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    1656:	80 e0       	ldi	r24, 0x00	; 0
    1658:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		send_data(0x00);
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
		draw_letter(previous_MEHC_order[5] % 26);
    1662:	80 91 12 01 	lds	r24, 0x0112
    1666:	8d 9f       	mul	r24, r29
    1668:	d1 2d       	mov	r29, r1
    166a:	11 24       	eor	r1, r1
    166c:	d6 95       	lsr	r29
    166e:	d6 95       	lsr	r29
    1670:	d6 95       	lsr	r29
    1672:	dc 9f       	mul	r29, r28
    1674:	80 19       	sub	r24, r0
    1676:	11 24       	eor	r1, r1
    1678:	0e 94 76 04 	call	0x8ec	; 0x8ec <draw_letter>
	}
}
    167c:	df 91       	pop	r29
    167e:	cf 91       	pop	r28
    1680:	08 95       	ret

00001682 <draw_changebearing>:
	
	
void draw_changebearing(void){
    1682:	cf 93       	push	r28
	uint8_t i=0;
	for(i=0;i<4;i++){
		send_data(0x00);
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    1690:	80 e0       	ldi	r24, 0x00	; 0
    1692:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	}
	send_data(0x3E);
    169c:	8e e3       	ldi	r24, 0x3E	; 62
    169e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
    16a2:	82 e2       	ldi	r24, 0x22	; 34
    16a4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    16a8:	80 e0       	ldi	r24, 0x00	; 0
    16aa:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    16ae:	8e e3       	ldi	r24, 0x3E	; 62
    16b0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
    16b4:	88 e0       	ldi	r24, 0x08	; 8
    16b6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    16ba:	8e e3       	ldi	r24, 0x3E	; 62
    16bc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    16c6:	8e e3       	ldi	r24, 0x3E	; 62
    16c8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0A);
    16cc:	8a e0       	ldi	r24, 0x0A	; 10
    16ce:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    16d2:	8e e3       	ldi	r24, 0x3E	; 62
    16d4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    16d8:	80 e0       	ldi	r24, 0x00	; 0
    16da:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    16de:	8e e3       	ldi	r24, 0x3E	; 62
    16e0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
    16e4:	84 e0       	ldi	r24, 0x04	; 4
    16e6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
    16ea:	88 e0       	ldi	r24, 0x08	; 8
    16ec:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    16f0:	8e e3       	ldi	r24, 0x3E	; 62
    16f2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    16f6:	80 e0       	ldi	r24, 0x00	; 0
    16f8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    16fc:	8e e3       	ldi	r24, 0x3E	; 62
    16fe:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
    1702:	82 e2       	ldi	r24, 0x22	; 34
    1704:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3A);
    1708:	8a e3       	ldi	r24, 0x3A	; 58
    170a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    170e:	80 e0       	ldi	r24, 0x00	; 0
    1710:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1714:	8e e3       	ldi	r24, 0x3E	; 62
    1716:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
    171a:	8a e2       	ldi	r24, 0x2A	; 42
    171c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    1720:	c8 e0       	ldi	r28, 0x08	; 8
	for(i=0;i<8;i++){
		send_data(0x00);
    1722:	80 e0       	ldi	r24, 0x00	; 0
    1724:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    1728:	c1 50       	subi	r28, 0x01	; 1
	send_data(0x22);
	send_data(0x3A);
	send_data(0x00);
	send_data(0x3E);
	send_data(0x2A);
	for(i=0;i<8;i++){
    172a:	d9 f7       	brne	.-10     	; 0x1722 <draw_changebearing+0xa0>
		send_data(0x00);
	}
	send_data(0x3E);
    172c:	8e e3       	ldi	r24, 0x3E	; 62
    172e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
    1732:	8a e2       	ldi	r24, 0x2A	; 42
    1734:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x14);
    1738:	84 e1       	ldi	r24, 0x14	; 20
    173a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    173e:	80 e0       	ldi	r24, 0x00	; 0
    1740:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1744:	8e e3       	ldi	r24, 0x3E	; 62
    1746:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2A);
    174a:	8a e2       	ldi	r24, 0x2A	; 42
    174c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1750:	80 e0       	ldi	r24, 0x00	; 0
    1752:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1756:	8e e3       	ldi	r24, 0x3E	; 62
    1758:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x0A);
    175c:	8a e0       	ldi	r24, 0x0A	; 10
    175e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1762:	8e e3       	ldi	r24, 0x3E	; 62
    1764:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1768:	80 e0       	ldi	r24, 0x00	; 0
    176a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    176e:	8e e3       	ldi	r24, 0x3E	; 62
    1770:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x1A);
    1774:	8a e1       	ldi	r24, 0x1A	; 26
    1776:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x2E);
    177a:	8e e2       	ldi	r24, 0x2E	; 46
    177c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1786:	8e e3       	ldi	r24, 0x3E	; 62
    1788:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    178c:	80 e0       	ldi	r24, 0x00	; 0
    178e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1792:	8e e3       	ldi	r24, 0x3E	; 62
    1794:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x04);
    1798:	84 e0       	ldi	r24, 0x04	; 4
    179a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x08);
    179e:	88 e0       	ldi	r24, 0x08	; 8
    17a0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    17a4:	8e e3       	ldi	r24, 0x3E	; 62
    17a6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    17aa:	80 e0       	ldi	r24, 0x00	; 0
    17ac:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    17b0:	8e e3       	ldi	r24, 0x3E	; 62
    17b2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
    17b6:	82 e2       	ldi	r24, 0x22	; 34
    17b8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3A);
    17bc:	8a e3       	ldi	r24, 0x3A	; 58
    17be:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    17c2:	c5 e0       	ldi	r28, 0x05	; 5
	for(i=0;i<5;i++){
		send_data(0x00);
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    17ca:	c1 50       	subi	r28, 0x01	; 1
	send_data(0x3E);
	send_data(0x00);
	send_data(0x3E);
	send_data(0x22);
	send_data(0x3A);
	for(i=0;i<5;i++){
    17cc:	d9 f7       	brne	.-10     	; 0x17c4 <draw_changebearing+0x142>
		send_data(0x00);
	}	
}
    17ce:	cf 91       	pop	r28
    17d0:	08 95       	ret

000017d2 <draw_toxx>:
	
void draw_toxx(uint8_t current_or_past){//1=current, 2=past
    17d2:	cf 93       	push	r28
    17d4:	df 93       	push	r29
    17d6:	d8 2f       	mov	r29, r24
    17d8:	cc e0       	ldi	r28, 0x0C	; 12
	uint8_t i=0;
	uint8_t k = 0;
	for(i=0;i<12;i++){
		send_data(0x00);
    17da:	80 e0       	ldi	r24, 0x00	; 0
    17dc:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    17e0:	c1 50       	subi	r28, 0x01	; 1
}
	
void draw_toxx(uint8_t current_or_past){//1=current, 2=past
	uint8_t i=0;
	uint8_t k = 0;
	for(i=0;i<12;i++){
    17e2:	d9 f7       	brne	.-10     	; 0x17da <draw_toxx+0x8>
		send_data(0x00);
	}
	send_data(0x02);
    17e4:	82 e0       	ldi	r24, 0x02	; 2
    17e6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    17ea:	8e e3       	ldi	r24, 0x3E	; 62
    17ec:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x02);
    17f0:	82 e0       	ldi	r24, 0x02	; 2
    17f2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x00);
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    17fc:	8e e3       	ldi	r24, 0x3E	; 62
    17fe:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x22);
    1802:	82 e2       	ldi	r24, 0x22	; 34
    1804:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	send_data(0x3E);
    1808:	8e e3       	ldi	r24, 0x3E	; 62
    180a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    180e:	c1 e1       	ldi	r28, 0x11	; 17
	for(i=0;i<17;i++){
		send_data(0x00);
    1810:	80 e0       	ldi	r24, 0x00	; 0
    1812:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    1816:	c1 50       	subi	r28, 0x01	; 1
	send_data(0x02);
	send_data(0x00);
	send_data(0x3E);
	send_data(0x22);
	send_data(0x3E);
	for(i=0;i<17;i++){
    1818:	d9 f7       	brne	.-10     	; 0x1810 <draw_toxx+0x3e>
		send_data(0x00);
	}
	
	if(current_or_past == 1){ // current
    181a:	d1 30       	cpi	r29, 0x01	; 1
    181c:	09 f0       	breq	.+2      	; 0x1820 <draw_toxx+0x4e>
    181e:	65 c0       	rjmp	.+202    	; 0x18ea <draw_toxx+0x118>
		//N S E W NE NW SE SW go here
		if((current_MEHC_order[2] % 8) == 0){
    1820:	80 91 19 01 	lds	r24, 0x0119
    1824:	87 70       	andi	r24, 0x07	; 7
    1826:	49 f4       	brne	.+18     	; 0x183a <draw_toxx+0x68>
			//n
			draw_letter(13);
    1828:	8d e0       	ldi	r24, 0x0D	; 13
    182a:	0e 94 76 04 	call	0x8ec	; 0x8ec <draw_letter>
    182e:	c6 e0       	ldi	r28, 0x06	; 6
			for(k=0;k<6;k++){
				send_data(0x00);
    1830:	80 e0       	ldi	r24, 0x00	; 0
    1832:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    1836:	c1 50       	subi	r28, 0x01	; 1
	if(current_or_past == 1){ // current
		//N S E W NE NW SE SW go here
		if((current_MEHC_order[2] % 8) == 0){
			//n
			draw_letter(13);
			for(k=0;k<6;k++){
    1838:	d9 f7       	brne	.-10     	; 0x1830 <draw_toxx+0x5e>
				send_data(0x00);
			}
		}
		if((current_MEHC_order[2] % 8) == 1){
    183a:	80 91 19 01 	lds	r24, 0x0119
    183e:	87 70       	andi	r24, 0x07	; 7
    1840:	81 30       	cpi	r24, 0x01	; 1
    1842:	49 f4       	brne	.+18     	; 0x1856 <draw_toxx+0x84>
			//s
			draw_letter(18);
    1844:	82 e1       	ldi	r24, 0x12	; 18
    1846:	0e 94 76 04 	call	0x8ec	; 0x8ec <draw_letter>
    184a:	c6 e0       	ldi	r28, 0x06	; 6
			for(k=0;k<6;k++){
				send_data(0x00);
    184c:	80 e0       	ldi	r24, 0x00	; 0
    184e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    1852:	c1 50       	subi	r28, 0x01	; 1
			}
		}
		if((current_MEHC_order[2] % 8) == 1){
			//s
			draw_letter(18);
			for(k=0;k<6;k++){
    1854:	d9 f7       	brne	.-10     	; 0x184c <draw_toxx+0x7a>
				send_data(0x00);
			}
		}
		if((current_MEHC_order[2] % 8) == 2){
    1856:	80 91 19 01 	lds	r24, 0x0119
    185a:	87 70       	andi	r24, 0x07	; 7
    185c:	82 30       	cpi	r24, 0x02	; 2
    185e:	49 f4       	brne	.+18     	; 0x1872 <draw_toxx+0xa0>
			//e
			draw_letter(4);
    1860:	84 e0       	ldi	r24, 0x04	; 4
    1862:	0e 94 76 04 	call	0x8ec	; 0x8ec <draw_letter>
    1866:	c6 e0       	ldi	r28, 0x06	; 6
			for(k=0;k<6;k++){
				send_data(0x00);
    1868:	80 e0       	ldi	r24, 0x00	; 0
    186a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    186e:	c1 50       	subi	r28, 0x01	; 1
			}
		}
		if((current_MEHC_order[2] % 8) == 2){
			//e
			draw_letter(4);
			for(k=0;k<6;k++){
    1870:	d9 f7       	brne	.-10     	; 0x1868 <draw_toxx+0x96>
				send_data(0x00);
			}
		}
		if((current_MEHC_order[2] % 8) == 3){
    1872:	80 91 19 01 	lds	r24, 0x0119
    1876:	87 70       	andi	r24, 0x07	; 7
    1878:	83 30       	cpi	r24, 0x03	; 3
    187a:	49 f4       	brne	.+18     	; 0x188e <draw_toxx+0xbc>
			//w
			draw_letter(22);
    187c:	86 e1       	ldi	r24, 0x16	; 22
    187e:	0e 94 76 04 	call	0x8ec	; 0x8ec <draw_letter>
    1882:	c6 e0       	ldi	r28, 0x06	; 6
			for(k=0;k<6;k++){
				send_data(0x00);
    1884:	80 e0       	ldi	r24, 0x00	; 0
    1886:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    188a:	c1 50       	subi	r28, 0x01	; 1
			}
		}
		if((current_MEHC_order[2] % 8) == 3){
			//w
			draw_letter(22);
			for(k=0;k<6;k++){
    188c:	d9 f7       	brne	.-10     	; 0x1884 <draw_toxx+0xb2>
				send_data(0x00);
			}
		}
		if((current_MEHC_order[2] % 8) == 4){
    188e:	80 91 19 01 	lds	r24, 0x0119
    1892:	87 70       	andi	r24, 0x07	; 7
    1894:	84 30       	cpi	r24, 0x04	; 4
    1896:	31 f4       	brne	.+12     	; 0x18a4 <draw_toxx+0xd2>
			//ne
			draw_letter(13);
    1898:	8d e0       	ldi	r24, 0x0D	; 13
    189a:	0e 94 76 04 	call	0x8ec	; 0x8ec <draw_letter>
			draw_letter(4);
    189e:	84 e0       	ldi	r24, 0x04	; 4
    18a0:	0e 94 76 04 	call	0x8ec	; 0x8ec <draw_letter>
		}
		if((current_MEHC_order[2] % 8) == 5){
    18a4:	80 91 19 01 	lds	r24, 0x0119
    18a8:	87 70       	andi	r24, 0x07	; 7
    18aa:	85 30       	cpi	r24, 0x05	; 5
    18ac:	31 f4       	brne	.+12     	; 0x18ba <draw_toxx+0xe8>
			//nw
			draw_letter(13);
    18ae:	8d e0       	ldi	r24, 0x0D	; 13
    18b0:	0e 94 76 04 	call	0x8ec	; 0x8ec <draw_letter>
			draw_letter(22);
    18b4:	86 e1       	ldi	r24, 0x16	; 22
    18b6:	0e 94 76 04 	call	0x8ec	; 0x8ec <draw_letter>
		}
		if((current_MEHC_order[2] % 8) == 6){
    18ba:	80 91 19 01 	lds	r24, 0x0119
    18be:	87 70       	andi	r24, 0x07	; 7
    18c0:	86 30       	cpi	r24, 0x06	; 6
    18c2:	31 f4       	brne	.+12     	; 0x18d0 <draw_toxx+0xfe>
			//se
			draw_letter(18);
    18c4:	82 e1       	ldi	r24, 0x12	; 18
    18c6:	0e 94 76 04 	call	0x8ec	; 0x8ec <draw_letter>
			draw_letter(3);
    18ca:	83 e0       	ldi	r24, 0x03	; 3
    18cc:	0e 94 76 04 	call	0x8ec	; 0x8ec <draw_letter>
		}
		if((current_MEHC_order[2] % 8) == 7){
    18d0:	80 91 19 01 	lds	r24, 0x0119
    18d4:	87 70       	andi	r24, 0x07	; 7
    18d6:	87 30       	cpi	r24, 0x07	; 7
    18d8:	09 f0       	breq	.+2      	; 0x18dc <draw_toxx+0x10a>
    18da:	74 c0       	rjmp	.+232    	; 0x19c4 <draw_toxx+0x1f2>
			//sw
			draw_letter(18);
    18dc:	82 e1       	ldi	r24, 0x12	; 18
    18de:	0e 94 76 04 	call	0x8ec	; 0x8ec <draw_letter>
			draw_letter(22);
    18e2:	86 e1       	ldi	r24, 0x16	; 22
    18e4:	0e 94 76 04 	call	0x8ec	; 0x8ec <draw_letter>
    18e8:	6d c0       	rjmp	.+218    	; 0x19c4 <draw_toxx+0x1f2>
		}
	}
	
	if(current_or_past == 2){ //past
    18ea:	d2 30       	cpi	r29, 0x02	; 2
    18ec:	09 f0       	breq	.+2      	; 0x18f0 <draw_toxx+0x11e>
    18ee:	6a c0       	rjmp	.+212    	; 0x19c4 <draw_toxx+0x1f2>
		//N S E W NE NW SE SW go here
		if((previous_MEHC_order[2] % 8) == 0){
    18f0:	80 91 0f 01 	lds	r24, 0x010F
    18f4:	87 70       	andi	r24, 0x07	; 7
    18f6:	49 f4       	brne	.+18     	; 0x190a <draw_toxx+0x138>
			//n
			draw_letter(13);
    18f8:	8d e0       	ldi	r24, 0x0D	; 13
    18fa:	0e 94 76 04 	call	0x8ec	; 0x8ec <draw_letter>
    18fe:	c6 e0       	ldi	r28, 0x06	; 6
			for(k=0;k<6;k++){
				send_data(0x00);
    1900:	80 e0       	ldi	r24, 0x00	; 0
    1902:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    1906:	c1 50       	subi	r28, 0x01	; 1
	if(current_or_past == 2){ //past
		//N S E W NE NW SE SW go here
		if((previous_MEHC_order[2] % 8) == 0){
			//n
			draw_letter(13);
			for(k=0;k<6;k++){
    1908:	d9 f7       	brne	.-10     	; 0x1900 <draw_toxx+0x12e>
				send_data(0x00);
			}
		}
		if((previous_MEHC_order[2] % 8) == 1){
    190a:	80 91 0f 01 	lds	r24, 0x010F
    190e:	87 70       	andi	r24, 0x07	; 7
    1910:	81 30       	cpi	r24, 0x01	; 1
    1912:	49 f4       	brne	.+18     	; 0x1926 <draw_toxx+0x154>
			//s
			draw_letter(18);
    1914:	82 e1       	ldi	r24, 0x12	; 18
    1916:	0e 94 76 04 	call	0x8ec	; 0x8ec <draw_letter>
    191a:	c6 e0       	ldi	r28, 0x06	; 6
			for(k=0;k<6;k++){
				send_data(0x00);
    191c:	80 e0       	ldi	r24, 0x00	; 0
    191e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    1922:	c1 50       	subi	r28, 0x01	; 1
			}
		}
		if((previous_MEHC_order[2] % 8) == 1){
			//s
			draw_letter(18);
			for(k=0;k<6;k++){
    1924:	d9 f7       	brne	.-10     	; 0x191c <draw_toxx+0x14a>
				send_data(0x00);
			}
		}
		if((previous_MEHC_order[2] % 8) == 2){
    1926:	80 91 0f 01 	lds	r24, 0x010F
    192a:	87 70       	andi	r24, 0x07	; 7
    192c:	82 30       	cpi	r24, 0x02	; 2
    192e:	49 f4       	brne	.+18     	; 0x1942 <draw_toxx+0x170>
			//e
			draw_letter(4);
    1930:	84 e0       	ldi	r24, 0x04	; 4
    1932:	0e 94 76 04 	call	0x8ec	; 0x8ec <draw_letter>
    1936:	c6 e0       	ldi	r28, 0x06	; 6
			for(k=0;k<6;k++){
				send_data(0x00);
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    193e:	c1 50       	subi	r28, 0x01	; 1
			}
		}
		if((previous_MEHC_order[2] % 8) == 2){
			//e
			draw_letter(4);
			for(k=0;k<6;k++){
    1940:	d9 f7       	brne	.-10     	; 0x1938 <draw_toxx+0x166>
				send_data(0x00);
			}
		}
		if((previous_MEHC_order[2] % 8) == 3){
    1942:	80 91 0f 01 	lds	r24, 0x010F
    1946:	87 70       	andi	r24, 0x07	; 7
    1948:	83 30       	cpi	r24, 0x03	; 3
    194a:	49 f4       	brne	.+18     	; 0x195e <draw_toxx+0x18c>
			//w
			draw_letter(22);
    194c:	86 e1       	ldi	r24, 0x16	; 22
    194e:	0e 94 76 04 	call	0x8ec	; 0x8ec <draw_letter>
    1952:	c6 e0       	ldi	r28, 0x06	; 6
			for(k=0;k<6;k++){
				send_data(0x00);
    1954:	80 e0       	ldi	r24, 0x00	; 0
    1956:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    195a:	c1 50       	subi	r28, 0x01	; 1
			}
		}
		if((previous_MEHC_order[2] % 8) == 3){
			//w
			draw_letter(22);
			for(k=0;k<6;k++){
    195c:	d9 f7       	brne	.-10     	; 0x1954 <draw_toxx+0x182>
				send_data(0x00);
			}
		}
		if((previous_MEHC_order[2] % 8) == 4){
    195e:	80 91 0f 01 	lds	r24, 0x010F
    1962:	87 70       	andi	r24, 0x07	; 7
    1964:	84 30       	cpi	r24, 0x04	; 4
    1966:	31 f4       	brne	.+12     	; 0x1974 <draw_toxx+0x1a2>
			//ne
			draw_letter(13);
    1968:	8d e0       	ldi	r24, 0x0D	; 13
    196a:	0e 94 76 04 	call	0x8ec	; 0x8ec <draw_letter>
			draw_letter(4);
    196e:	84 e0       	ldi	r24, 0x04	; 4
    1970:	0e 94 76 04 	call	0x8ec	; 0x8ec <draw_letter>
		}
		if((previous_MEHC_order[2] % 8) == 5){
    1974:	80 91 0f 01 	lds	r24, 0x010F
    1978:	87 70       	andi	r24, 0x07	; 7
    197a:	85 30       	cpi	r24, 0x05	; 5
    197c:	31 f4       	brne	.+12     	; 0x198a <draw_toxx+0x1b8>
			//nw
			draw_letter(13);
    197e:	8d e0       	ldi	r24, 0x0D	; 13
    1980:	0e 94 76 04 	call	0x8ec	; 0x8ec <draw_letter>
			draw_letter(22);
    1984:	86 e1       	ldi	r24, 0x16	; 22
    1986:	0e 94 76 04 	call	0x8ec	; 0x8ec <draw_letter>
		}
		if((previous_MEHC_order[2] % 8) == 6){
    198a:	80 91 0f 01 	lds	r24, 0x010F
    198e:	87 70       	andi	r24, 0x07	; 7
    1990:	86 30       	cpi	r24, 0x06	; 6
    1992:	31 f4       	brne	.+12     	; 0x19a0 <draw_toxx+0x1ce>
			//se
			draw_letter(18);
    1994:	82 e1       	ldi	r24, 0x12	; 18
    1996:	0e 94 76 04 	call	0x8ec	; 0x8ec <draw_letter>
			draw_letter(3);
    199a:	83 e0       	ldi	r24, 0x03	; 3
    199c:	0e 94 76 04 	call	0x8ec	; 0x8ec <draw_letter>
		}
		if((previous_MEHC_order[2] % 8) == 7){
    19a0:	80 91 0f 01 	lds	r24, 0x010F
    19a4:	87 70       	andi	r24, 0x07	; 7
    19a6:	87 30       	cpi	r24, 0x07	; 7
    19a8:	69 f4       	brne	.+26     	; 0x19c4 <draw_toxx+0x1f2>
			//sw
			draw_letter(18);
    19aa:	82 e1       	ldi	r24, 0x12	; 18
    19ac:	0e 94 76 04 	call	0x8ec	; 0x8ec <draw_letter>
			draw_letter(22);
    19b0:	86 e1       	ldi	r24, 0x16	; 22
    19b2:	0e 94 76 04 	call	0x8ec	; 0x8ec <draw_letter>
    19b6:	06 c0       	rjmp	.+12     	; 0x19c4 <draw_toxx+0x1f2>
		}
	}
	
	for(i=0;i<16;i++){
		send_data(0x00);
    19b8:	80 e0       	ldi	r24, 0x00	; 0
    19ba:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
    19be:	c1 50       	subi	r28, 0x01	; 1
			draw_letter(18);
			draw_letter(22);
		}
	}
	
	for(i=0;i<16;i++){
    19c0:	d9 f7       	brne	.-10     	; 0x19b8 <draw_toxx+0x1e6>
    19c2:	02 c0       	rjmp	.+4      	; 0x19c8 <draw_toxx+0x1f6>
				send_data(0x00);
			}
		}
		if((previous_MEHC_order[2] % 8) == 3){
			//w
			draw_letter(22);
    19c4:	c0 e1       	ldi	r28, 0x10	; 16
    19c6:	f8 cf       	rjmp	.-16     	; 0x19b8 <draw_toxx+0x1e6>
	}
	
	for(i=0;i<16;i++){
		send_data(0x00);
	}
}
    19c8:	df 91       	pop	r29
    19ca:	cf 91       	pop	r28
    19cc:	08 95       	ret

000019ce <refresh_screen>:
6) Get [ randomly generated 4-letter word ] (GET is chosen because it can mean "become", "obtain", or "comprehend") 
7) Change bearing to (N, S, E, W, NE, NW, SE, SW) until mission is clear 
*/

//void refresh_screen(void); refreshes the screen
void refresh_screen(void){
    19ce:	ef 92       	push	r14
    19d0:	ff 92       	push	r15
    19d2:	1f 93       	push	r17
    19d4:	cf 93       	push	r28
    19d6:	df 93       	push	r29
	uint8_t j=0;
	for(j=0;j<6;j++){
    19d8:	10 e0       	ldi	r17, 0x00	; 0
				//draw_goto();
			}
			if((displayvar == 2) && (previous_MEHC_order[0] == 6)){
				draw_getxxxx(2); //1=current, 2=past
			}
			if((displayvar == 2) && (previous_MEHC_order[0] == 7)){
    19da:	0f 2e       	mov	r0, r31
    19dc:	fd e0       	ldi	r31, 0x0D	; 13
    19de:	ef 2e       	mov	r14, r31
    19e0:	f1 e0       	ldi	r31, 0x01	; 1
    19e2:	ff 2e       	mov	r15, r31
    19e4:	f0 2d       	mov	r31, r0
				//draw_goto();
			}
			if((displayvar == 1) && (current_MEHC_order[0] == 6)){
				draw_getxxxx(1); //1=current, 2=past | oh boy I get to learn about feeding pointers to arrays into functions!!! ^.^ (BUT NOT TODAY JUST MORE KLUDGES)
			}
			if((displayvar == 1) && (current_MEHC_order[0] == 7)){
    19e6:	c7 e1       	ldi	r28, 0x17	; 23
    19e8:	d1 e0       	ldi	r29, 0x01	; 1

//void refresh_screen(void); refreshes the screen
void refresh_screen(void){
	uint8_t j=0;
	for(j=0;j<6;j++){
		send_command(0xB0 | j); //set page address (0xb0 | address)
    19ea:	81 2f       	mov	r24, r17
    19ec:	80 6b       	ori	r24, 0xB0	; 176
    19ee:	0e 94 61 00 	call	0xc2	; 0xc2 <send_command>
		
		uint8_t add = 0x00; //column address
		send_command((0x10|(add>>4))+0x02); //set column address part one
    19f2:	82 e1       	ldi	r24, 0x12	; 18
    19f4:	0e 94 61 00 	call	0xc2	; 0xc2 <send_command>
		send_command((0x0f&add));//set column address part two
    19f8:	80 e0       	ldi	r24, 0x00	; 0
    19fa:	0e 94 61 00 	call	0xc2	; 0xc2 <send_command>
		uint8_t i=0;
		for(i=0;i<64;i++){
			send_data(screenmemory[i+64*j]);
		}
		*/
		if(j == 0){
    19fe:	11 11       	cpse	r17, r1
    1a00:	31 c0       	rjmp	.+98     	; 0x1a64 <refresh_screen+0x96>
			displaytimeunit(AB);
    1a02:	80 91 09 01 	lds	r24, 0x0109
    1a06:	0e 94 55 04 	call	0x8aa	; 0x8aa <displaytimeunit>
			draw_period();
    1a0a:	0e 94 ed 00 	call	0x1da	; 0x1da <draw_period>
			displaytimeunit(CD);
    1a0e:	80 91 08 01 	lds	r24, 0x0108
    1a12:	0e 94 55 04 	call	0x8aa	; 0x8aa <displaytimeunit>
			displaytimeunit(EF);
    1a16:	80 91 07 01 	lds	r24, 0x0107
    1a1a:	0e 94 55 04 	call	0x8aa	; 0x8aa <displaytimeunit>
			displaytimeunit(GH);
    1a1e:	80 91 06 01 	lds	r24, 0x0106
    1a22:	0e 94 55 04 	call	0x8aa	; 0x8aa <displaytimeunit>
			displaytimeunit(IJ);	
    1a26:	80 91 05 01 	lds	r24, 0x0105
    1a2a:	0e 94 55 04 	call	0x8aa	; 0x8aa <displaytimeunit>
			
			for(uint8_t i=0;i<2;i++){
				send_data(0x00);
    1a2e:	80 e0       	ldi	r24, 0x00	; 0
    1a30:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
				send_data(0x00);
    1a34:	80 e0       	ldi	r24, 0x00	; 0
    1a36:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
				send_data(0x00);
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
				send_data(0x00);
    1a40:	80 e0       	ldi	r24, 0x00	; 0
    1a42:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			displaytimeunit(EF);
			displaytimeunit(GH);
			displaytimeunit(IJ);	
			
			for(uint8_t i=0;i<2;i++){
				send_data(0x00);
    1a46:	80 e0       	ldi	r24, 0x00	; 0
    1a48:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
				send_data(0x00);
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
    1a4e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
				send_data(0x00);
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
				send_data(0x00);
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			}
			draw_percent();
    1a5e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <draw_percent>
    1a62:	50 c0       	rjmp	.+160    	; 0x1b04 <refresh_screen+0x136>
		}
		if(j==1){
    1a64:	11 30       	cpi	r17, 0x01	; 1
    1a66:	19 f4       	brne	.+6      	; 0x1a6e <refresh_screen+0xa0>
			draw_timeisrunningout();
    1a68:	0e 94 62 03 	call	0x6c4	; 0x6c4 <draw_timeisrunningout>
    1a6c:	89 c0       	rjmp	.+274    	; 0x1b80 <refresh_screen+0x1b2>
		}
		if(j==2){
    1a6e:	12 30       	cpi	r17, 0x02	; 2
    1a70:	09 f0       	breq	.+2      	; 0x1a74 <refresh_screen+0xa6>
    1a72:	48 c0       	rjmp	.+144    	; 0x1b04 <refresh_screen+0x136>
			displaytimeunit(20);
    1a74:	84 e1       	ldi	r24, 0x14	; 20
    1a76:	0e 94 55 04 	call	0x8aa	; 0x8aa <displaytimeunit>
			displaytimeunit(years);
    1a7a:	80 91 00 01 	lds	r24, 0x0100
    1a7e:	0e 94 55 04 	call	0x8aa	; 0x8aa <displaytimeunit>
			send_data(0x00);
    1a82:	80 e0       	ldi	r24, 0x00	; 0
    1a84:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			send_data(0x08);
    1a88:	88 e0       	ldi	r24, 0x08	; 8
    1a8a:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			send_data(0x08);
    1a8e:	88 e0       	ldi	r24, 0x08	; 8
    1a90:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			displaytimeunit(months);
    1a94:	80 91 01 01 	lds	r24, 0x0101
    1a98:	0e 94 55 04 	call	0x8aa	; 0x8aa <displaytimeunit>
			send_data(0x00);
    1a9c:	80 e0       	ldi	r24, 0x00	; 0
    1a9e:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			send_data(0x08);
    1aa2:	88 e0       	ldi	r24, 0x08	; 8
    1aa4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			send_data(0x08);
    1aa8:	88 e0       	ldi	r24, 0x08	; 8
    1aaa:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			displaytimeunit(days);
    1aae:	80 91 02 01 	lds	r24, 0x0102
    1ab2:	0e 94 55 04 	call	0x8aa	; 0x8aa <displaytimeunit>
			send_data(0x00);
    1ab6:	80 e0       	ldi	r24, 0x00	; 0
    1ab8:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			send_data(0x00);
    1abc:	80 e0       	ldi	r24, 0x00	; 0
    1abe:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			send_data(0x00);
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			send_data(0x00);
    1ac8:	80 e0       	ldi	r24, 0x00	; 0
    1aca:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			send_data(0x00);
    1ace:	80 e0       	ldi	r24, 0x00	; 0
    1ad0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			send_data(0x00);
    1ad4:	80 e0       	ldi	r24, 0x00	; 0
    1ad6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			displaytimeunit(hours);
    1ada:	80 91 03 01 	lds	r24, 0x0103
    1ade:	0e 94 55 04 	call	0x8aa	; 0x8aa <displaytimeunit>
			send_data(0x00);
    1ae2:	80 e0       	ldi	r24, 0x00	; 0
    1ae4:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			send_data(0x38);
    1ae8:	88 e3       	ldi	r24, 0x38	; 56
    1aea:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			send_data(0x10);
    1aee:	80 e1       	ldi	r24, 0x10	; 16
    1af0:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			send_data(0x38);
    1af4:	88 e3       	ldi	r24, 0x38	; 56
    1af6:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
			displaytimeunit(minutes);
    1afa:	80 91 04 01 	lds	r24, 0x0104
    1afe:	0e 94 55 04 	call	0x8aa	; 0x8aa <displaytimeunit>
    1b02:	e9 c0       	rjmp	.+466    	; 0x1cd6 <refresh_screen+0x308>
		}		
		if(j==3){
    1b04:	13 30       	cpi	r17, 0x03	; 3
    1b06:	e1 f5       	brne	.+120    	; 0x1b80 <refresh_screen+0x1b2>
			if((displayvar == 0) && (hours_until_next_MEHC_order > 0)){
    1b08:	80 91 26 01 	lds	r24, 0x0126
    1b0c:	81 11       	cpse	r24, r1
    1b0e:	05 c0       	rjmp	.+10     	; 0x1b1a <refresh_screen+0x14c>
    1b10:	80 91 21 01 	lds	r24, 0x0121
    1b14:	81 11       	cpse	r24, r1
				draw_blankline();
    1b16:	0e 94 98 06 	call	0xd30	; 0xd30 <draw_blankline>
			}
			if((displayvar == 0) && (hours_until_next_MEHC_order == 0)){
    1b1a:	80 91 26 01 	lds	r24, 0x0126
    1b1e:	81 11       	cpse	r24, r1
    1b20:	06 c0       	rjmp	.+12     	; 0x1b2e <refresh_screen+0x160>
    1b22:	80 91 21 01 	lds	r24, 0x0121
    1b26:	81 11       	cpse	r24, r1
    1b28:	02 c0       	rjmp	.+4      	; 0x1b2e <refresh_screen+0x160>
				draw_newordersfrom();
    1b2a:	0e 94 1f 01 	call	0x23e	; 0x23e <draw_newordersfrom>
			}
			if((displayvar == 1) && (current_MEHC_order[0] != 5)){
    1b2e:	80 91 26 01 	lds	r24, 0x0126
    1b32:	81 30       	cpi	r24, 0x01	; 1
    1b34:	29 f4       	brne	.+10     	; 0x1b40 <refresh_screen+0x172>
    1b36:	88 81       	ld	r24, Y
    1b38:	85 30       	cpi	r24, 0x05	; 5
    1b3a:	11 f0       	breq	.+4      	; 0x1b40 <refresh_screen+0x172>
				draw_blankline();
    1b3c:	0e 94 98 06 	call	0xd30	; 0xd30 <draw_blankline>
			}
			if((displayvar == 2) && (previous_MEHC_order[0] != 5)){
    1b40:	80 91 26 01 	lds	r24, 0x0126
    1b44:	82 30       	cpi	r24, 0x02	; 2
    1b46:	31 f4       	brne	.+12     	; 0x1b54 <refresh_screen+0x186>
    1b48:	f7 01       	movw	r30, r14
    1b4a:	80 81       	ld	r24, Z
    1b4c:	85 30       	cpi	r24, 0x05	; 5
    1b4e:	11 f0       	breq	.+4      	; 0x1b54 <refresh_screen+0x186>
				draw_blankline();
    1b50:	0e 94 98 06 	call	0xd30	; 0xd30 <draw_blankline>
			}
			if((displayvar == 1) && (current_MEHC_order[0] == 5)){
    1b54:	80 91 26 01 	lds	r24, 0x0126
    1b58:	81 30       	cpi	r24, 0x01	; 1
    1b5a:	29 f4       	brne	.+10     	; 0x1b66 <refresh_screen+0x198>
    1b5c:	88 81       	ld	r24, Y
    1b5e:	85 30       	cpi	r24, 0x05	; 5
    1b60:	11 f4       	brne	.+4      	; 0x1b66 <refresh_screen+0x198>
				draw_goto();
    1b62:	0e 94 29 0a 	call	0x1452	; 0x1452 <draw_goto>
			}
			if((displayvar == 2) && (previous_MEHC_order[0] == 5)){
    1b66:	80 91 26 01 	lds	r24, 0x0126
    1b6a:	82 30       	cpi	r24, 0x02	; 2
    1b6c:	09 f0       	breq	.+2      	; 0x1b70 <refresh_screen+0x1a2>
    1b6e:	64 c1       	rjmp	.+712    	; 0x1e38 <refresh_screen+0x46a>
    1b70:	f7 01       	movw	r30, r14
    1b72:	80 81       	ld	r24, Z
    1b74:	85 30       	cpi	r24, 0x05	; 5
    1b76:	09 f0       	breq	.+2      	; 0x1b7a <refresh_screen+0x1ac>
    1b78:	5f c1       	rjmp	.+702    	; 0x1e38 <refresh_screen+0x46a>
				draw_goto();
    1b7a:	0e 94 29 0a 	call	0x1452	; 0x1452 <draw_goto>
    1b7e:	5c c1       	rjmp	.+696    	; 0x1e38 <refresh_screen+0x46a>
			}			
		}
		
		if(j==4){
    1b80:	14 30       	cpi	r17, 0x04	; 4
    1b82:	09 f0       	breq	.+2      	; 0x1b86 <refresh_screen+0x1b8>
    1b84:	a8 c0       	rjmp	.+336    	; 0x1cd6 <refresh_screen+0x308>
			if((displayvar == 0) && (hours_until_next_MEHC_order > 0)){
    1b86:	80 91 26 01 	lds	r24, 0x0126
    1b8a:	81 11       	cpse	r24, r1
    1b8c:	05 c0       	rjmp	.+10     	; 0x1b98 <refresh_screen+0x1ca>
    1b8e:	80 91 21 01 	lds	r24, 0x0121
    1b92:	81 11       	cpse	r24, r1
				draw_blankline();
    1b94:	0e 94 98 06 	call	0xd30	; 0xd30 <draw_blankline>
			}
			if((displayvar == 0) && (hours_until_next_MEHC_order == 0)){
    1b98:	80 91 26 01 	lds	r24, 0x0126
    1b9c:	81 11       	cpse	r24, r1
    1b9e:	06 c0       	rjmp	.+12     	; 0x1bac <refresh_screen+0x1de>
    1ba0:	80 91 21 01 	lds	r24, 0x0121
    1ba4:	81 11       	cpse	r24, r1
    1ba6:	02 c0       	rjmp	.+4      	; 0x1bac <refresh_screen+0x1de>
				draw_machineempire();
    1ba8:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <draw_machineempire>
			}
			//current order
			if((displayvar == 1) && (current_MEHC_order[0] == 0)){
    1bac:	80 91 26 01 	lds	r24, 0x0126
    1bb0:	81 30       	cpi	r24, 0x01	; 1
    1bb2:	29 f4       	brne	.+10     	; 0x1bbe <refresh_screen+0x1f0>
    1bb4:	88 81       	ld	r24, Y
    1bb6:	81 11       	cpse	r24, r1
    1bb8:	02 c0       	rjmp	.+4      	; 0x1bbe <refresh_screen+0x1f0>
				draw_stopandmeditate();
    1bba:	0e 94 a1 06 	call	0xd42	; 0xd42 <draw_stopandmeditate>
			}
			if((displayvar == 1) && (current_MEHC_order[0] == 1)){
    1bbe:	80 91 26 01 	lds	r24, 0x0126
    1bc2:	81 30       	cpi	r24, 0x01	; 1
    1bc4:	29 f4       	brne	.+10     	; 0x1bd0 <refresh_screen+0x202>
    1bc6:	88 81       	ld	r24, Y
    1bc8:	81 30       	cpi	r24, 0x01	; 1
    1bca:	11 f4       	brne	.+4      	; 0x1bd0 <refresh_screen+0x202>
				draw_tendself();
    1bcc:	0e 94 62 07 	call	0xec4	; 0xec4 <draw_tendself>
			}
			if((displayvar == 1) && (current_MEHC_order[0] == 2)){
    1bd0:	80 91 26 01 	lds	r24, 0x0126
    1bd4:	81 30       	cpi	r24, 0x01	; 1
    1bd6:	29 f4       	brne	.+10     	; 0x1be2 <refresh_screen+0x214>
    1bd8:	88 81       	ld	r24, Y
    1bda:	82 30       	cpi	r24, 0x02	; 2
    1bdc:	11 f4       	brne	.+4      	; 0x1be2 <refresh_screen+0x214>
				draw_climbmarshill();
    1bde:	0e 94 da 07 	call	0xfb4	; 0xfb4 <draw_climbmarshill>
			}
			if((displayvar == 1) && (current_MEHC_order[0] == 3)){
    1be2:	80 91 26 01 	lds	r24, 0x0126
    1be6:	81 30       	cpi	r24, 0x01	; 1
    1be8:	29 f4       	brne	.+10     	; 0x1bf4 <refresh_screen+0x226>
    1bea:	88 81       	ld	r24, Y
    1bec:	83 30       	cpi	r24, 0x03	; 3
    1bee:	11 f4       	brne	.+4      	; 0x1bf4 <refresh_screen+0x226>
				draw_benefitnearest();
    1bf0:	0e 94 7f 08 	call	0x10fe	; 0x10fe <draw_benefitnearest>
			}
			if((displayvar == 1) && (current_MEHC_order[0] == 4)){
    1bf4:	80 91 26 01 	lds	r24, 0x0126
    1bf8:	81 30       	cpi	r24, 0x01	; 1
    1bfa:	29 f4       	brne	.+10     	; 0x1c06 <refresh_screen+0x238>
    1bfc:	88 81       	ld	r24, Y
    1bfe:	84 30       	cpi	r24, 0x04	; 4
    1c00:	11 f4       	brne	.+4      	; 0x1c06 <refresh_screen+0x238>
				draw_fixsomething();
    1c02:	0e 94 8a 09 	call	0x1314	; 0x1314 <draw_fixsomething>
			}
			if((displayvar == 1) && (current_MEHC_order[0] == 5)){
    1c06:	80 91 26 01 	lds	r24, 0x0126
    1c0a:	81 30       	cpi	r24, 0x01	; 1
    1c0c:	09 f4       	brne	.+2      	; 0x1c10 <refresh_screen+0x242>
    1c0e:	88 81       	ld	r24, Y
				//draw_goto();
			}
			if((displayvar == 1) && (current_MEHC_order[0] == 6)){
    1c10:	80 91 26 01 	lds	r24, 0x0126
    1c14:	81 30       	cpi	r24, 0x01	; 1
    1c16:	31 f4       	brne	.+12     	; 0x1c24 <refresh_screen+0x256>
    1c18:	88 81       	ld	r24, Y
    1c1a:	86 30       	cpi	r24, 0x06	; 6
    1c1c:	19 f4       	brne	.+6      	; 0x1c24 <refresh_screen+0x256>
				draw_getxxxx(1); //1=current, 2=past | oh boy I get to learn about feeding pointers to arrays into functions!!! ^.^ (BUT NOT TODAY JUST MORE KLUDGES)
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <draw_getxxxx>
			}
			if((displayvar == 1) && (current_MEHC_order[0] == 7)){
    1c24:	80 91 26 01 	lds	r24, 0x0126
    1c28:	81 30       	cpi	r24, 0x01	; 1
    1c2a:	29 f4       	brne	.+10     	; 0x1c36 <refresh_screen+0x268>
    1c2c:	88 81       	ld	r24, Y
    1c2e:	87 30       	cpi	r24, 0x07	; 7
    1c30:	11 f4       	brne	.+4      	; 0x1c36 <refresh_screen+0x268>
				draw_changebearing();
    1c32:	0e 94 41 0b 	call	0x1682	; 0x1682 <draw_changebearing>
			}
			//previous order
			if((displayvar == 2) && (previous_MEHC_order[0] == 0)){
    1c36:	80 91 26 01 	lds	r24, 0x0126
    1c3a:	82 30       	cpi	r24, 0x02	; 2
    1c3c:	31 f4       	brne	.+12     	; 0x1c4a <refresh_screen+0x27c>
    1c3e:	f7 01       	movw	r30, r14
    1c40:	80 81       	ld	r24, Z
    1c42:	81 11       	cpse	r24, r1
    1c44:	02 c0       	rjmp	.+4      	; 0x1c4a <refresh_screen+0x27c>
				draw_stopandmeditate();
    1c46:	0e 94 a1 06 	call	0xd42	; 0xd42 <draw_stopandmeditate>
			}
			if((displayvar == 2) && (previous_MEHC_order[0] == 1)){
    1c4a:	80 91 26 01 	lds	r24, 0x0126
    1c4e:	82 30       	cpi	r24, 0x02	; 2
    1c50:	31 f4       	brne	.+12     	; 0x1c5e <refresh_screen+0x290>
    1c52:	f7 01       	movw	r30, r14
    1c54:	80 81       	ld	r24, Z
    1c56:	81 30       	cpi	r24, 0x01	; 1
    1c58:	11 f4       	brne	.+4      	; 0x1c5e <refresh_screen+0x290>
				draw_tendself();
    1c5a:	0e 94 62 07 	call	0xec4	; 0xec4 <draw_tendself>
			}
			if((displayvar == 2) && (previous_MEHC_order[0] == 2)){
    1c5e:	80 91 26 01 	lds	r24, 0x0126
    1c62:	82 30       	cpi	r24, 0x02	; 2
    1c64:	31 f4       	brne	.+12     	; 0x1c72 <refresh_screen+0x2a4>
    1c66:	f7 01       	movw	r30, r14
    1c68:	80 81       	ld	r24, Z
    1c6a:	82 30       	cpi	r24, 0x02	; 2
    1c6c:	11 f4       	brne	.+4      	; 0x1c72 <refresh_screen+0x2a4>
				draw_climbmarshill();
    1c6e:	0e 94 da 07 	call	0xfb4	; 0xfb4 <draw_climbmarshill>
			}
			if((displayvar == 2) && (previous_MEHC_order[0] == 3)){
    1c72:	80 91 26 01 	lds	r24, 0x0126
    1c76:	82 30       	cpi	r24, 0x02	; 2
    1c78:	31 f4       	brne	.+12     	; 0x1c86 <refresh_screen+0x2b8>
    1c7a:	f7 01       	movw	r30, r14
    1c7c:	80 81       	ld	r24, Z
    1c7e:	83 30       	cpi	r24, 0x03	; 3
    1c80:	11 f4       	brne	.+4      	; 0x1c86 <refresh_screen+0x2b8>
				draw_benefitnearest();
    1c82:	0e 94 7f 08 	call	0x10fe	; 0x10fe <draw_benefitnearest>
			}
			if((displayvar == 2) && (previous_MEHC_order[0] == 4)){
    1c86:	80 91 26 01 	lds	r24, 0x0126
    1c8a:	82 30       	cpi	r24, 0x02	; 2
    1c8c:	31 f4       	brne	.+12     	; 0x1c9a <refresh_screen+0x2cc>
    1c8e:	f7 01       	movw	r30, r14
    1c90:	80 81       	ld	r24, Z
    1c92:	84 30       	cpi	r24, 0x04	; 4
    1c94:	11 f4       	brne	.+4      	; 0x1c9a <refresh_screen+0x2cc>
				draw_fixsomething();
    1c96:	0e 94 8a 09 	call	0x1314	; 0x1314 <draw_fixsomething>
			}
			if((displayvar == 2) && (previous_MEHC_order[0] == 5)){
    1c9a:	80 91 26 01 	lds	r24, 0x0126
    1c9e:	82 30       	cpi	r24, 0x02	; 2
    1ca0:	11 f4       	brne	.+4      	; 0x1ca6 <refresh_screen+0x2d8>
    1ca2:	f7 01       	movw	r30, r14
    1ca4:	80 81       	ld	r24, Z
				//draw_goto();
			}
			if((displayvar == 2) && (previous_MEHC_order[0] == 6)){
    1ca6:	80 91 26 01 	lds	r24, 0x0126
    1caa:	82 30       	cpi	r24, 0x02	; 2
    1cac:	39 f4       	brne	.+14     	; 0x1cbc <refresh_screen+0x2ee>
    1cae:	f7 01       	movw	r30, r14
    1cb0:	80 81       	ld	r24, Z
    1cb2:	86 30       	cpi	r24, 0x06	; 6
    1cb4:	19 f4       	brne	.+6      	; 0x1cbc <refresh_screen+0x2ee>
				draw_getxxxx(2); //1=current, 2=past
    1cb6:	82 e0       	ldi	r24, 0x02	; 2
    1cb8:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <draw_getxxxx>
			}
			if((displayvar == 2) && (previous_MEHC_order[0] == 7)){
    1cbc:	80 91 26 01 	lds	r24, 0x0126
    1cc0:	82 30       	cpi	r24, 0x02	; 2
    1cc2:	09 f0       	breq	.+2      	; 0x1cc6 <refresh_screen+0x2f8>
    1cc4:	be c0       	rjmp	.+380    	; 0x1e42 <refresh_screen+0x474>
    1cc6:	f7 01       	movw	r30, r14
    1cc8:	80 81       	ld	r24, Z
    1cca:	87 30       	cpi	r24, 0x07	; 7
    1ccc:	09 f0       	breq	.+2      	; 0x1cd0 <refresh_screen+0x302>
    1cce:	b9 c0       	rjmp	.+370    	; 0x1e42 <refresh_screen+0x474>
				draw_changebearing();
    1cd0:	0e 94 41 0b 	call	0x1682	; 0x1682 <draw_changebearing>
    1cd4:	b6 c0       	rjmp	.+364    	; 0x1e42 <refresh_screen+0x474>
			}
		}
		
		if(j==5){
    1cd6:	15 30       	cpi	r17, 0x05	; 5
    1cd8:	09 f0       	breq	.+2      	; 0x1cdc <refresh_screen+0x30e>
    1cda:	ae c0       	rjmp	.+348    	; 0x1e38 <refresh_screen+0x46a>
			
			if((displayvar == 0) && (hours_until_next_MEHC_order > 0)){
    1cdc:	80 91 26 01 	lds	r24, 0x0126
    1ce0:	81 11       	cpse	r24, r1
    1ce2:	05 c0       	rjmp	.+10     	; 0x1cee <refresh_screen+0x320>
    1ce4:	80 91 21 01 	lds	r24, 0x0121
    1ce8:	81 11       	cpse	r24, r1
				draw_blankline();
    1cea:	0e 94 98 06 	call	0xd30	; 0xd30 <draw_blankline>
			}
			if((displayvar == 0) && (hours_until_next_MEHC_order == 0)){
    1cee:	80 91 26 01 	lds	r24, 0x0126
    1cf2:	81 11       	cpse	r24, r1
    1cf4:	06 c0       	rjmp	.+12     	; 0x1d02 <refresh_screen+0x334>
    1cf6:	80 91 21 01 	lds	r24, 0x0121
    1cfa:	81 11       	cpse	r24, r1
    1cfc:	02 c0       	rjmp	.+4      	; 0x1d02 <refresh_screen+0x334>
				draw_highcommand();
    1cfe:	0e 94 a1 02 	call	0x542	; 0x542 <draw_highcommand>
			}
			//current order
			if((displayvar == 1) && (current_MEHC_order[0] == 0)){
    1d02:	80 91 26 01 	lds	r24, 0x0126
    1d06:	81 30       	cpi	r24, 0x01	; 1
    1d08:	31 f4       	brne	.+12     	; 0x1d16 <refresh_screen+0x348>
    1d0a:	80 91 17 01 	lds	r24, 0x0117
    1d0e:	81 11       	cpse	r24, r1
    1d10:	02 c0       	rjmp	.+4      	; 0x1d16 <refresh_screen+0x348>
				draw_blankline();
    1d12:	0e 94 98 06 	call	0xd30	; 0xd30 <draw_blankline>
			}
			if((displayvar == 1) && (current_MEHC_order[0] == 1)){
    1d16:	80 91 26 01 	lds	r24, 0x0126
    1d1a:	81 30       	cpi	r24, 0x01	; 1
    1d1c:	31 f4       	brne	.+12     	; 0x1d2a <refresh_screen+0x35c>
    1d1e:	80 91 17 01 	lds	r24, 0x0117
    1d22:	81 30       	cpi	r24, 0x01	; 1
    1d24:	11 f4       	brne	.+4      	; 0x1d2a <refresh_screen+0x35c>
				draw_blankline();
    1d26:	0e 94 98 06 	call	0xd30	; 0xd30 <draw_blankline>
			}
			if((displayvar == 1) && (current_MEHC_order[0] == 2)){
    1d2a:	80 91 26 01 	lds	r24, 0x0126
    1d2e:	81 30       	cpi	r24, 0x01	; 1
    1d30:	31 f4       	brne	.+12     	; 0x1d3e <refresh_screen+0x370>
    1d32:	80 91 17 01 	lds	r24, 0x0117
    1d36:	82 30       	cpi	r24, 0x02	; 2
    1d38:	11 f4       	brne	.+4      	; 0x1d3e <refresh_screen+0x370>
				draw_blankline();
    1d3a:	0e 94 98 06 	call	0xd30	; 0xd30 <draw_blankline>
			}
			if((displayvar == 1) && (current_MEHC_order[0] == 3)){
    1d3e:	80 91 26 01 	lds	r24, 0x0126
    1d42:	81 30       	cpi	r24, 0x01	; 1
    1d44:	31 f4       	brne	.+12     	; 0x1d52 <refresh_screen+0x384>
    1d46:	80 91 17 01 	lds	r24, 0x0117
    1d4a:	83 30       	cpi	r24, 0x03	; 3
    1d4c:	11 f4       	brne	.+4      	; 0x1d52 <refresh_screen+0x384>
				draw_person();
    1d4e:	0e 94 36 09 	call	0x126c	; 0x126c <draw_person>
			}
			if((displayvar == 1) && (current_MEHC_order[0] == 4)){
    1d52:	80 91 26 01 	lds	r24, 0x0126
    1d56:	81 30       	cpi	r24, 0x01	; 1
    1d58:	31 f4       	brne	.+12     	; 0x1d66 <refresh_screen+0x398>
    1d5a:	80 91 17 01 	lds	r24, 0x0117
    1d5e:	84 30       	cpi	r24, 0x04	; 4
    1d60:	11 f4       	brne	.+4      	; 0x1d66 <refresh_screen+0x398>
				draw_blankline();
    1d62:	0e 94 98 06 	call	0xd30	; 0xd30 <draw_blankline>
			}
			if((displayvar == 1) && (current_MEHC_order[0] == 5)){
    1d66:	80 91 26 01 	lds	r24, 0x0126
    1d6a:	81 30       	cpi	r24, 0x01	; 1
    1d6c:	11 f4       	brne	.+4      	; 0x1d72 <refresh_screen+0x3a4>
    1d6e:	80 91 17 01 	lds	r24, 0x0117
				//draw_goto();
			}
			if((displayvar == 1) && (current_MEHC_order[0] == 6)){
    1d72:	80 91 26 01 	lds	r24, 0x0126
    1d76:	81 30       	cpi	r24, 0x01	; 1
    1d78:	31 f4       	brne	.+12     	; 0x1d86 <refresh_screen+0x3b8>
    1d7a:	80 91 17 01 	lds	r24, 0x0117
    1d7e:	86 30       	cpi	r24, 0x06	; 6
    1d80:	11 f4       	brne	.+4      	; 0x1d86 <refresh_screen+0x3b8>
				draw_blankline();
    1d82:	0e 94 98 06 	call	0xd30	; 0xd30 <draw_blankline>
			}
			if((displayvar == 1) && (current_MEHC_order[0] == 7)){
    1d86:	80 91 26 01 	lds	r24, 0x0126
    1d8a:	81 30       	cpi	r24, 0x01	; 1
    1d8c:	39 f4       	brne	.+14     	; 0x1d9c <refresh_screen+0x3ce>
    1d8e:	80 91 17 01 	lds	r24, 0x0117
    1d92:	87 30       	cpi	r24, 0x07	; 7
    1d94:	19 f4       	brne	.+6      	; 0x1d9c <refresh_screen+0x3ce>
				draw_toxx(1);
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <draw_toxx>
			}
			//previous order
			if((displayvar == 2) && (previous_MEHC_order[0] == 0)){
    1d9c:	80 91 26 01 	lds	r24, 0x0126
    1da0:	82 30       	cpi	r24, 0x02	; 2
    1da2:	31 f4       	brne	.+12     	; 0x1db0 <refresh_screen+0x3e2>
    1da4:	80 91 0d 01 	lds	r24, 0x010D
    1da8:	81 11       	cpse	r24, r1
    1daa:	02 c0       	rjmp	.+4      	; 0x1db0 <refresh_screen+0x3e2>
				draw_blankline();
    1dac:	0e 94 98 06 	call	0xd30	; 0xd30 <draw_blankline>
			}
			if((displayvar == 2) && (previous_MEHC_order[0] == 1)){
    1db0:	80 91 26 01 	lds	r24, 0x0126
    1db4:	82 30       	cpi	r24, 0x02	; 2
    1db6:	31 f4       	brne	.+12     	; 0x1dc4 <refresh_screen+0x3f6>
    1db8:	80 91 0d 01 	lds	r24, 0x010D
    1dbc:	81 30       	cpi	r24, 0x01	; 1
    1dbe:	11 f4       	brne	.+4      	; 0x1dc4 <refresh_screen+0x3f6>
				draw_blankline();
    1dc0:	0e 94 98 06 	call	0xd30	; 0xd30 <draw_blankline>
			}
			if((displayvar == 2) && (previous_MEHC_order[0] == 2)){
    1dc4:	80 91 26 01 	lds	r24, 0x0126
    1dc8:	82 30       	cpi	r24, 0x02	; 2
    1dca:	31 f4       	brne	.+12     	; 0x1dd8 <refresh_screen+0x40a>
    1dcc:	80 91 0d 01 	lds	r24, 0x010D
    1dd0:	82 30       	cpi	r24, 0x02	; 2
    1dd2:	11 f4       	brne	.+4      	; 0x1dd8 <refresh_screen+0x40a>
				draw_blankline();
    1dd4:	0e 94 98 06 	call	0xd30	; 0xd30 <draw_blankline>
			}
			if((displayvar == 2) && (previous_MEHC_order[0] == 3)){
    1dd8:	80 91 26 01 	lds	r24, 0x0126
    1ddc:	82 30       	cpi	r24, 0x02	; 2
    1dde:	31 f4       	brne	.+12     	; 0x1dec <refresh_screen+0x41e>
    1de0:	80 91 0d 01 	lds	r24, 0x010D
    1de4:	83 30       	cpi	r24, 0x03	; 3
    1de6:	11 f4       	brne	.+4      	; 0x1dec <refresh_screen+0x41e>
				draw_person();
    1de8:	0e 94 36 09 	call	0x126c	; 0x126c <draw_person>
			}
			if((displayvar == 2) && (previous_MEHC_order[0] == 4)){
    1dec:	80 91 26 01 	lds	r24, 0x0126
    1df0:	82 30       	cpi	r24, 0x02	; 2
    1df2:	31 f4       	brne	.+12     	; 0x1e00 <refresh_screen+0x432>
    1df4:	80 91 0d 01 	lds	r24, 0x010D
    1df8:	84 30       	cpi	r24, 0x04	; 4
    1dfa:	11 f4       	brne	.+4      	; 0x1e00 <refresh_screen+0x432>
				draw_blankline();
    1dfc:	0e 94 98 06 	call	0xd30	; 0xd30 <draw_blankline>
			}
			if((displayvar == 2) && (previous_MEHC_order[0] == 5)){
    1e00:	80 91 26 01 	lds	r24, 0x0126
    1e04:	82 30       	cpi	r24, 0x02	; 2
    1e06:	11 f4       	brne	.+4      	; 0x1e0c <refresh_screen+0x43e>
    1e08:	80 91 0d 01 	lds	r24, 0x010D
				//draw_goto();
			}
			if((displayvar == 2) && (previous_MEHC_order[0] == 6)){
    1e0c:	80 91 26 01 	lds	r24, 0x0126
    1e10:	82 30       	cpi	r24, 0x02	; 2
    1e12:	31 f4       	brne	.+12     	; 0x1e20 <refresh_screen+0x452>
    1e14:	80 91 0d 01 	lds	r24, 0x010D
    1e18:	86 30       	cpi	r24, 0x06	; 6
    1e1a:	11 f4       	brne	.+4      	; 0x1e20 <refresh_screen+0x452>
				draw_blankline();
    1e1c:	0e 94 98 06 	call	0xd30	; 0xd30 <draw_blankline>
			}
			if((displayvar == 2) && (previous_MEHC_order[0] == 7)){
    1e20:	80 91 26 01 	lds	r24, 0x0126
    1e24:	82 30       	cpi	r24, 0x02	; 2
    1e26:	79 f4       	brne	.+30     	; 0x1e46 <refresh_screen+0x478>
    1e28:	80 91 0d 01 	lds	r24, 0x010D
    1e2c:	87 30       	cpi	r24, 0x07	; 7
    1e2e:	59 f4       	brne	.+22     	; 0x1e46 <refresh_screen+0x478>
				draw_toxx(2);
    1e30:	82 e0       	ldi	r24, 0x02	; 2
    1e32:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <draw_toxx>
    1e36:	07 c0       	rjmp	.+14     	; 0x1e46 <refresh_screen+0x478>
*/

//void refresh_screen(void); refreshes the screen
void refresh_screen(void){
	uint8_t j=0;
	for(j=0;j<6;j++){
    1e38:	1f 5f       	subi	r17, 0xFF	; 255
    1e3a:	16 30       	cpi	r17, 0x06	; 6
    1e3c:	09 f0       	breq	.+2      	; 0x1e40 <refresh_screen+0x472>
    1e3e:	d5 cd       	rjmp	.-1110   	; 0x19ea <refresh_screen+0x1c>
    1e40:	02 c0       	rjmp	.+4      	; 0x1e46 <refresh_screen+0x478>
    1e42:	1f 5f       	subi	r17, 0xFF	; 255
    1e44:	d2 cd       	rjmp	.-1116   	; 0x19ea <refresh_screen+0x1c>
			}
			
		}
		//---
	}
}
    1e46:	df 91       	pop	r29
    1e48:	cf 91       	pop	r28
    1e4a:	1f 91       	pop	r17
    1e4c:	ff 90       	pop	r15
    1e4e:	ef 90       	pop	r14
    1e50:	08 95       	ret

00001e52 <__vector_5>:

//INTERRUPT SERVICE ROUTINE FOR PIN CHANGE (BUTTON PRESS)
ISR(PCINT2_vect) {
    1e52:	1f 92       	push	r1
    1e54:	0f 92       	push	r0
    1e56:	0f b6       	in	r0, 0x3f	; 63
    1e58:	0f 92       	push	r0
    1e5a:	11 24       	eor	r1, r1
	
	number_of_frames_displayed = 0;
    1e5c:	10 92 0c 01 	sts	0x010C, r1
	//resetting this variable to zero causes the screen to be turned on for a bit while it's re-incremented
}
    1e60:	0f 90       	pop	r0
    1e62:	0f be       	out	0x3f, r0	; 63
    1e64:	0f 90       	pop	r0
    1e66:	1f 90       	pop	r1
    1e68:	18 95       	reti

00001e6a <RTCInit>:

//Timer2 init according to datasheet
void RTCInit(void){
	//Disable timer2 interrupts
	TIMSK2  = 0;
    1e6a:	10 92 70 00 	sts	0x0070, r1
	//Enable asynchronous mode
	ASSR  = (1<<AS2);
    1e6e:	80 e2       	ldi	r24, 0x20	; 32
    1e70:	80 93 b6 00 	sts	0x00B6, r24
	//set initial counter value
	TCNT2=0;
    1e74:	10 92 b2 00 	sts	0x00B2, r1
	//set prescaler 32 (update every 1/4 second)
	TCCR2B |= (1<<CS21)|(1<<CS00);
    1e78:	e1 eb       	ldi	r30, 0xB1	; 177
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	80 81       	ld	r24, Z
    1e7e:	83 60       	ori	r24, 0x03	; 3
    1e80:	80 83       	st	Z, r24
	//wait for registers update
	while (ASSR & ((1<<TCN2UB)|(1<<TCR2BUB)));
    1e82:	e6 eb       	ldi	r30, 0xB6	; 182
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	81 71       	andi	r24, 0x11	; 17
    1e8a:	e9 f7       	brne	.-6      	; 0x1e86 <RTCInit+0x1c>
	//clear interrupt flags
	TIFR2  = (1<<TOV2);
    1e8c:	81 e0       	ldi	r24, 0x01	; 1
    1e8e:	87 bb       	out	0x17, r24	; 23
	//enable TOV2 interrupt
	TIMSK2  = (1<<TOIE2);
    1e90:	80 93 70 00 	sts	0x0070, r24
    1e94:	08 95       	ret

00001e96 <__vector_9>:
}

//Overflow ISR
ISR(TIMER2_OVF_vect){
    1e96:	1f 92       	push	r1
    1e98:	0f 92       	push	r0
    1e9a:	0f b6       	in	r0, 0x3f	; 63
    1e9c:	0f 92       	push	r0
    1e9e:	11 24       	eor	r1, r1
    1ea0:	2f 93       	push	r18
    1ea2:	3f 93       	push	r19
    1ea4:	4f 93       	push	r20
    1ea6:	5f 93       	push	r21
    1ea8:	6f 93       	push	r22
    1eaa:	7f 93       	push	r23
    1eac:	8f 93       	push	r24
    1eae:	9f 93       	push	r25
    1eb0:	af 93       	push	r26
    1eb2:	bf 93       	push	r27
    1eb4:	ef 93       	push	r30
    1eb6:	ff 93       	push	r31
	uint8_t frames_until_turnoff = 35;
	
	if(((PIND & 0x02) == 0x02) && (hours_until_next_MEHC_order == 0)){ //whatever trigger condition for order entry mode goes here
    1eb8:	49 9b       	sbis	0x09, 1	; 9
    1eba:	09 c0       	rjmp	.+18     	; 0x1ece <__vector_9+0x38>
    1ebc:	80 91 21 01 	lds	r24, 0x0121
    1ec0:	81 11       	cpse	r24, r1
    1ec2:	05 c0       	rjmp	.+10     	; 0x1ece <__vector_9+0x38>
		order_array_index = 0;
    1ec4:	10 92 22 01 	sts	0x0122, r1
		order_entry_mode_flag = 1;
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	80 93 25 01 	sts	0x0125, r24
		
//		sleep_disable();
	}
	
	if(((PIND & 0x08) == 0x08) && (order_entry_mode_flag == 0)){
    1ece:	4b 9b       	sbis	0x09, 3	; 9
    1ed0:	0f c0       	rjmp	.+30     	; 0x1ef0 <__vector_9+0x5a>
    1ed2:	80 91 25 01 	lds	r24, 0x0125
    1ed6:	81 11       	cpse	r24, r1
    1ed8:	0b c0       	rjmp	.+22     	; 0x1ef0 <__vector_9+0x5a>
		displayvar++;
    1eda:	80 91 26 01 	lds	r24, 0x0126
    1ede:	8f 5f       	subi	r24, 0xFF	; 255
    1ee0:	80 93 26 01 	sts	0x0126, r24
		if(displayvar >= 3){
    1ee4:	80 91 26 01 	lds	r24, 0x0126
    1ee8:	83 30       	cpi	r24, 0x03	; 3
    1eea:	10 f0       	brcs	.+4      	; 0x1ef0 <__vector_9+0x5a>
			displayvar = 0;
    1eec:	10 92 26 01 	sts	0x0126, r1
		}
	}
	
	
	if((rand_int_loaded == 1) && (order_entry_mode_flag == 1)){
    1ef0:	80 91 23 01 	lds	r24, 0x0123
    1ef4:	81 30       	cpi	r24, 0x01	; 1
    1ef6:	e9 f5       	brne	.+122    	; 0x1f72 <__vector_9+0xdc>
    1ef8:	80 91 25 01 	lds	r24, 0x0125
    1efc:	81 30       	cpi	r24, 0x01	; 1
    1efe:	c9 f5       	brne	.+114    	; 0x1f72 <__vector_9+0xdc>
		if(order_array_index == 0){
    1f00:	80 91 22 01 	lds	r24, 0x0122
    1f04:	81 11       	cpse	r24, r1
    1f06:	1c c0       	rjmp	.+56     	; 0x1f40 <__vector_9+0xaa>
    1f08:	80 e0       	ldi	r24, 0x00	; 0
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
			uint8_t r = 0;
			for(r=0;r<10;r++){
				previous_MEHC_order[r] = current_MEHC_order[r];
    1f0c:	fc 01       	movw	r30, r24
    1f0e:	e9 5e       	subi	r30, 0xE9	; 233
    1f10:	fe 4f       	sbci	r31, 0xFE	; 254
    1f12:	20 81       	ld	r18, Z
    1f14:	fc 01       	movw	r30, r24
    1f16:	e3 5f       	subi	r30, 0xF3	; 243
    1f18:	fe 4f       	sbci	r31, 0xFE	; 254
    1f1a:	20 83       	st	Z, r18
    1f1c:	01 96       	adiw	r24, 0x01	; 1
	
	
	if((rand_int_loaded == 1) && (order_entry_mode_flag == 1)){
		if(order_array_index == 0){
			uint8_t r = 0;
			for(r=0;r<10;r++){
    1f1e:	8a 30       	cpi	r24, 0x0A	; 10
    1f20:	91 05       	cpc	r25, r1
    1f22:	a1 f7       	brne	.-24     	; 0x1f0c <__vector_9+0x76>
				previous_MEHC_order[r] = current_MEHC_order[r];
			}			
		current_MEHC_order[order_array_index] = (rand_int_locked % 8);
    1f24:	e0 91 22 01 	lds	r30, 0x0122
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	80 91 24 01 	lds	r24, 0x0124
    1f2e:	87 70       	andi	r24, 0x07	; 7
    1f30:	e9 5e       	subi	r30, 0xE9	; 233
    1f32:	fe 4f       	sbci	r31, 0xFE	; 254
    1f34:	80 83       	st	Z, r24
		order_array_index++;
    1f36:	80 91 22 01 	lds	r24, 0x0122
    1f3a:	8f 5f       	subi	r24, 0xFF	; 255
    1f3c:	80 93 22 01 	sts	0x0122, r24
		}
		if(order_array_index > 0){
    1f40:	80 91 22 01 	lds	r24, 0x0122
    1f44:	88 23       	and	r24, r24
    1f46:	69 f0       	breq	.+26     	; 0x1f62 <__vector_9+0xcc>
			current_MEHC_order[order_array_index] = rand_int_locked;
    1f48:	e0 91 22 01 	lds	r30, 0x0122
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	80 91 24 01 	lds	r24, 0x0124
    1f52:	e9 5e       	subi	r30, 0xE9	; 233
    1f54:	fe 4f       	sbci	r31, 0xFE	; 254
    1f56:	80 83       	st	Z, r24
			order_array_index++;
    1f58:	80 91 22 01 	lds	r24, 0x0122
    1f5c:	8f 5f       	subi	r24, 0xFF	; 255
    1f5e:	80 93 22 01 	sts	0x0122, r24
		if(order_array_index >= 7){
			hours_until_next_MEHC_order = current_MEHC_order[6];			
		}
		//uncommenting the above snippet sets timer to actually delay orders*/
		
		if(order_array_index >= 8){ 
    1f62:	80 91 22 01 	lds	r24, 0x0122
    1f66:	88 30       	cpi	r24, 0x08	; 8
    1f68:	10 f0       	brcs	.+4      	; 0x1f6e <__vector_9+0xd8>
			//this was a 5 before, but it caused me to write outside of the array and mess up the variable hours_until_next_MEHC_order...
			//so I've kludgily extended the array size to work around the effect
			order_entry_mode_flag = 0;
    1f6a:	10 92 25 01 	sts	0x0125, r1
		}
		rand_int_loaded = 0;
    1f6e:	10 92 23 01 	sts	0x0123, r1
	}
	
	if(number_of_frames_displayed == 0){
    1f72:	80 91 0c 01 	lds	r24, 0x010C
    1f76:	81 11       	cpse	r24, r1
    1f78:	03 c0       	rjmp	.+6      	; 0x1f80 <__vector_9+0xea>
		send_command(0xAF); //turn the display on
    1f7a:	8f ea       	ldi	r24, 0xAF	; 175
    1f7c:	0e 94 61 00 	call	0xc2	; 0xc2 <send_command>
	}	
	if(number_of_frames_displayed < frames_until_turnoff){
    1f80:	80 91 0c 01 	lds	r24, 0x010C
    1f84:	83 32       	cpi	r24, 0x23	; 35
    1f86:	40 f4       	brcc	.+16     	; 0x1f98 <__vector_9+0x102>
		refresh_screen();
    1f88:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <refresh_screen>
		number_of_frames_displayed++;
    1f8c:	80 91 0c 01 	lds	r24, 0x010C
    1f90:	8f 5f       	subi	r24, 0xFF	; 255
    1f92:	80 93 0c 01 	sts	0x010C, r24
    1f96:	0b c0       	rjmp	.+22     	; 0x1fae <__vector_9+0x118>
	}else if((number_of_frames_displayed >= frames_until_turnoff) && (order_entry_mode_flag == 0)){
    1f98:	80 91 0c 01 	lds	r24, 0x010C
    1f9c:	83 32       	cpi	r24, 0x23	; 35
    1f9e:	38 f0       	brcs	.+14     	; 0x1fae <__vector_9+0x118>
    1fa0:	80 91 25 01 	lds	r24, 0x0125
    1fa4:	81 11       	cpse	r24, r1
    1fa6:	03 c0       	rjmp	.+6      	; 0x1fae <__vector_9+0x118>
		send_command(0xAE); //display off command
    1fa8:	8e ea       	ldi	r24, 0xAE	; 174
    1faa:	0e 94 61 00 	call	0xc2	; 0xc2 <send_command>
	}
	
	IJ--;
    1fae:	80 91 05 01 	lds	r24, 0x0105
    1fb2:	81 50       	subi	r24, 0x01	; 1
    1fb4:	80 93 05 01 	sts	0x0105, r24
	if(IJ == 255){
    1fb8:	80 91 05 01 	lds	r24, 0x0105
    1fbc:	8f 3f       	cpi	r24, 0xFF	; 255
    1fbe:	61 f5       	brne	.+88     	; 0x2018 <__vector_9+0x182>
		IJ = 99;
    1fc0:	83 e6       	ldi	r24, 0x63	; 99
    1fc2:	80 93 05 01 	sts	0x0105, r24
		GH--;
    1fc6:	80 91 06 01 	lds	r24, 0x0106
    1fca:	81 50       	subi	r24, 0x01	; 1
    1fcc:	80 93 06 01 	sts	0x0106, r24
		if(GH == 255){
    1fd0:	80 91 06 01 	lds	r24, 0x0106
    1fd4:	8f 3f       	cpi	r24, 0xFF	; 255
    1fd6:	01 f5       	brne	.+64     	; 0x2018 <__vector_9+0x182>
			GH = 99;
    1fd8:	83 e6       	ldi	r24, 0x63	; 99
    1fda:	80 93 06 01 	sts	0x0106, r24
			EF--;
    1fde:	80 91 07 01 	lds	r24, 0x0107
    1fe2:	81 50       	subi	r24, 0x01	; 1
    1fe4:	80 93 07 01 	sts	0x0107, r24
			if(EF == 255){
    1fe8:	80 91 07 01 	lds	r24, 0x0107
    1fec:	8f 3f       	cpi	r24, 0xFF	; 255
    1fee:	a1 f4       	brne	.+40     	; 0x2018 <__vector_9+0x182>
				EF = 99;
    1ff0:	83 e6       	ldi	r24, 0x63	; 99
    1ff2:	80 93 07 01 	sts	0x0107, r24
				CD--;
    1ff6:	80 91 08 01 	lds	r24, 0x0108
    1ffa:	81 50       	subi	r24, 0x01	; 1
    1ffc:	80 93 08 01 	sts	0x0108, r24
				if(CD == 255){
    2000:	80 91 08 01 	lds	r24, 0x0108
    2004:	8f 3f       	cpi	r24, 0xFF	; 255
    2006:	41 f4       	brne	.+16     	; 0x2018 <__vector_9+0x182>
					CD = 99;
    2008:	83 e6       	ldi	r24, 0x63	; 99
    200a:	80 93 08 01 	sts	0x0108, r24
					AB--; //I should be dead by the time this function breaks
    200e:	80 91 09 01 	lds	r24, 0x0109
    2012:	81 50       	subi	r24, 0x01	; 1
    2014:	80 93 09 01 	sts	0x0109, r24
			}
		}
	}
	
	
	num_overflows++; //overflows happen every quarter second
    2018:	80 91 0b 01 	lds	r24, 0x010B
    201c:	8f 5f       	subi	r24, 0xFF	; 255
    201e:	80 93 0b 01 	sts	0x010B, r24
	if(num_overflows % 4 == 0){
    2022:	80 91 0b 01 	lds	r24, 0x010B
    2026:	83 70       	andi	r24, 0x03	; 3
    2028:	09 f0       	breq	.+2      	; 0x202c <__vector_9+0x196>
    202a:	76 c0       	rjmp	.+236    	; 0x2118 <__vector_9+0x282>
		seconds++;
    202c:	80 91 0a 01 	lds	r24, 0x010A
    2030:	8f 5f       	subi	r24, 0xFF	; 255
    2032:	80 93 0a 01 	sts	0x010A, r24
		if(seconds == 60){
    2036:	80 91 0a 01 	lds	r24, 0x010A
    203a:	8c 33       	cpi	r24, 0x3C	; 60
    203c:	09 f0       	breq	.+2      	; 0x2040 <__vector_9+0x1aa>
    203e:	6c c0       	rjmp	.+216    	; 0x2118 <__vector_9+0x282>
			seconds = 0;
    2040:	10 92 0a 01 	sts	0x010A, r1
			minutes++;
    2044:	80 91 04 01 	lds	r24, 0x0104
    2048:	8f 5f       	subi	r24, 0xFF	; 255
    204a:	80 93 04 01 	sts	0x0104, r24
			if(minutes == 60){
    204e:	80 91 04 01 	lds	r24, 0x0104
    2052:	8c 33       	cpi	r24, 0x3C	; 60
    2054:	09 f0       	breq	.+2      	; 0x2058 <__vector_9+0x1c2>
    2056:	60 c0       	rjmp	.+192    	; 0x2118 <__vector_9+0x282>
				minutes = 0;
    2058:	10 92 04 01 	sts	0x0104, r1
				hours++;
    205c:	80 91 03 01 	lds	r24, 0x0103
    2060:	8f 5f       	subi	r24, 0xFF	; 255
    2062:	80 93 03 01 	sts	0x0103, r24
				if(hours_until_next_MEHC_order != 0){
    2066:	80 91 21 01 	lds	r24, 0x0121
    206a:	88 23       	and	r24, r24
    206c:	29 f0       	breq	.+10     	; 0x2078 <__vector_9+0x1e2>
					hours_until_next_MEHC_order--;
    206e:	80 91 21 01 	lds	r24, 0x0121
    2072:	81 50       	subi	r24, 0x01	; 1
    2074:	80 93 21 01 	sts	0x0121, r24
				}				
				if(hours == 24){
    2078:	80 91 03 01 	lds	r24, 0x0103
    207c:	88 31       	cpi	r24, 0x18	; 24
    207e:	09 f0       	breq	.+2      	; 0x2082 <__vector_9+0x1ec>
    2080:	4b c0       	rjmp	.+150    	; 0x2118 <__vector_9+0x282>
					hours = 0;
    2082:	10 92 03 01 	sts	0x0103, r1
					days++;
    2086:	80 91 02 01 	lds	r24, 0x0102
    208a:	8f 5f       	subi	r24, 0xFF	; 255
    208c:	80 93 02 01 	sts	0x0102, r24
					if((days == 32) || 
    2090:	80 91 02 01 	lds	r24, 0x0102
    2094:	80 32       	cpi	r24, 0x20	; 32
    2096:	61 f1       	breq	.+88     	; 0x20f0 <__vector_9+0x25a>
					((days == 31) && ((months == 4) || (months == 6) || (months == 9) || (months == 11))) ||
    2098:	80 91 02 01 	lds	r24, 0x0102
					hours_until_next_MEHC_order--;
				}				
				if(hours == 24){
					hours = 0;
					days++;
					if((days == 32) || 
    209c:	8f 31       	cpi	r24, 0x1F	; 31
    209e:	81 f4       	brne	.+32     	; 0x20c0 <__vector_9+0x22a>
					((days == 31) && ((months == 4) || (months == 6) || (months == 9) || (months == 11))) ||
    20a0:	80 91 01 01 	lds	r24, 0x0101
    20a4:	84 30       	cpi	r24, 0x04	; 4
    20a6:	21 f1       	breq	.+72     	; 0x20f0 <__vector_9+0x25a>
    20a8:	80 91 01 01 	lds	r24, 0x0101
    20ac:	86 30       	cpi	r24, 0x06	; 6
    20ae:	01 f1       	breq	.+64     	; 0x20f0 <__vector_9+0x25a>
    20b0:	80 91 01 01 	lds	r24, 0x0101
    20b4:	89 30       	cpi	r24, 0x09	; 9
    20b6:	e1 f0       	breq	.+56     	; 0x20f0 <__vector_9+0x25a>
    20b8:	80 91 01 01 	lds	r24, 0x0101
    20bc:	8b 30       	cpi	r24, 0x0B	; 11
    20be:	c1 f0       	breq	.+48     	; 0x20f0 <__vector_9+0x25a>
					((months == 2) && (days == 29) && ((years % 4) != 0)) ||
    20c0:	80 91 01 01 	lds	r24, 0x0101
				}				
				if(hours == 24){
					hours = 0;
					days++;
					if((days == 32) || 
					((days == 31) && ((months == 4) || (months == 6) || (months == 9) || (months == 11))) ||
    20c4:	82 30       	cpi	r24, 0x02	; 2
    20c6:	41 f4       	brne	.+16     	; 0x20d8 <__vector_9+0x242>
					((months == 2) && (days == 29) && ((years % 4) != 0)) ||
    20c8:	80 91 02 01 	lds	r24, 0x0102
    20cc:	8d 31       	cpi	r24, 0x1D	; 29
    20ce:	21 f4       	brne	.+8      	; 0x20d8 <__vector_9+0x242>
    20d0:	80 91 00 01 	lds	r24, 0x0100
    20d4:	83 70       	andi	r24, 0x03	; 3
    20d6:	61 f4       	brne	.+24     	; 0x20f0 <__vector_9+0x25a>
					((months == 2) && (days == 30) && (years % 4 == 0))){ // note that this code only checks if year % 4 == 0. I should be dead before it breaks.
    20d8:	80 91 01 01 	lds	r24, 0x0101
				if(hours == 24){
					hours = 0;
					days++;
					if((days == 32) || 
					((days == 31) && ((months == 4) || (months == 6) || (months == 9) || (months == 11))) ||
					((months == 2) && (days == 29) && ((years % 4) != 0)) ||
    20dc:	82 30       	cpi	r24, 0x02	; 2
    20de:	e1 f4       	brne	.+56     	; 0x2118 <__vector_9+0x282>
					((months == 2) && (days == 30) && (years % 4 == 0))){ // note that this code only checks if year % 4 == 0. I should be dead before it breaks.
    20e0:	80 91 02 01 	lds	r24, 0x0102
    20e4:	8e 31       	cpi	r24, 0x1E	; 30
    20e6:	c1 f4       	brne	.+48     	; 0x2118 <__vector_9+0x282>
    20e8:	80 91 00 01 	lds	r24, 0x0100
    20ec:	83 70       	andi	r24, 0x03	; 3
    20ee:	a1 f4       	brne	.+40     	; 0x2118 <__vector_9+0x282>
						days = 1;
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	80 93 02 01 	sts	0x0102, r24
						months ++;
    20f6:	80 91 01 01 	lds	r24, 0x0101
    20fa:	8f 5f       	subi	r24, 0xFF	; 255
    20fc:	80 93 01 01 	sts	0x0101, r24
						if(months == 13){
    2100:	80 91 01 01 	lds	r24, 0x0101
    2104:	8d 30       	cpi	r24, 0x0D	; 13
    2106:	41 f4       	brne	.+16     	; 0x2118 <__vector_9+0x282>
							months = 1;
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	80 93 01 01 	sts	0x0101, r24
							years++;
    210e:	80 91 00 01 	lds	r24, 0x0100
    2112:	8f 5f       	subi	r24, 0xFF	; 255
    2114:	80 93 00 01 	sts	0x0100, r24
					}					
				}
			}
		}
	}
}
    2118:	ff 91       	pop	r31
    211a:	ef 91       	pop	r30
    211c:	bf 91       	pop	r27
    211e:	af 91       	pop	r26
    2120:	9f 91       	pop	r25
    2122:	8f 91       	pop	r24
    2124:	7f 91       	pop	r23
    2126:	6f 91       	pop	r22
    2128:	5f 91       	pop	r21
    212a:	4f 91       	pop	r20
    212c:	3f 91       	pop	r19
    212e:	2f 91       	pop	r18
    2130:	0f 90       	pop	r0
    2132:	0f be       	out	0x3f, r0	; 63
    2134:	0f 90       	pop	r0
    2136:	1f 90       	pop	r1
    2138:	18 95       	reti

0000213a <main>:

int main(void){
	DDRB = 0x2F; //Set D/C, RST#, CS#, MOSI, SCK as Output
    213a:	8f e2       	ldi	r24, 0x2F	; 47
    213c:	84 b9       	out	0x04, r24	; 4
	DDRD = 0x00; //PIND3=BUTTON_A, PIND2=BUTTON_B, PIND3=BUTTIONC
    213e:	1a b8       	out	0x0a, r1	; 10
	
	RTCInit();
    2140:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <RTCInit>
	// Turn interrupts on.
	sei();
    2144:	78 94       	sei
	
	//set sleep mode to minimum power while allowing interrupt
	set_sleep_mode(SLEEP_MODE_PWR_SAVE);
    2146:	83 b7       	in	r24, 0x33	; 51
    2148:	81 7f       	andi	r24, 0xF1	; 241
    214a:	86 60       	ori	r24, 0x06	; 6
    214c:	83 bf       	out	0x33, r24	; 51
	PCICR |= _BV(PCIE2); //PIN CHANGE INTERRUPT CONTROL REGISTER (PIN BLOC PCINT16-23)
    214e:	e8 e6       	ldi	r30, 0x68	; 104
    2150:	f0 e0       	ldi	r31, 0x00	; 0
    2152:	80 81       	ld	r24, Z
    2154:	84 60       	ori	r24, 0x04	; 4
    2156:	80 83       	st	Z, r24
	PCMSK2 |= _BV(PCINT18); //PIN CHANGE interrupt MASK activate pin for BUTTON_B
    2158:	ed e6       	ldi	r30, 0x6D	; 109
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	80 81       	ld	r24, Z
    215e:	84 60       	ori	r24, 0x04	; 4
    2160:	80 83       	st	Z, r24
	
	//initialize master SPI
	SPIMasterInit();
    2162:	0e 94 53 00 	call	0xa6	; 0xa6 <SPIMasterInit>

	// Display reset routine (before initialization)
	PORTB |= 0x02;	// Initially set RST HIGH
    2166:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2168:	81 ee       	ldi	r24, 0xE1	; 225
    216a:	94 e0       	ldi	r25, 0x04	; 4
    216c:	01 97       	sbiw	r24, 0x01	; 1
    216e:	f1 f7       	brne	.-4      	; 0x216c <main+0x32>
    2170:	00 c0       	rjmp	.+0      	; 0x2172 <main+0x38>
    2172:	00 00       	nop
	_delay_ms(5);	// VDD (3.3V) goes high at start, lets just chill for 5 ms
	PORTB &= 0xFC;	// Bring RST low, reset the display
    2174:	85 b1       	in	r24, 0x05	; 5
    2176:	8c 7f       	andi	r24, 0xFC	; 252
    2178:	85 b9       	out	0x05, r24	; 5
    217a:	83 ec       	ldi	r24, 0xC3	; 195
    217c:	99 e0       	ldi	r25, 0x09	; 9
    217e:	01 97       	sbiw	r24, 0x01	; 1
    2180:	f1 f7       	brne	.-4      	; 0x217e <main+0x44>
    2182:	00 c0       	rjmp	.+0      	; 0x2184 <main+0x4a>
    2184:	00 00       	nop
	_delay_ms(10);	// wait 10ms
	PORTB |= 0x02;	// Set RST HIGH, bring out of reset
    2186:	29 9a       	sbi	0x05, 1	; 5
	
	
	// Display initialization routine (after reset)
	send_command(0x8D); //set charge pump
    2188:	8d e8       	ldi	r24, 0x8D	; 141
    218a:	0e 94 61 00 	call	0xc2	; 0xc2 <send_command>
	send_command(0x14); //to some setting that's default in the sparkfun arduino library
    218e:	84 e1       	ldi	r24, 0x14	; 20
    2190:	0e 94 61 00 	call	0xc2	; 0xc2 <send_command>
	
	send_command(0xAF); //turn the display on
    2194:	8f ea       	ldi	r24, 0xAF	; 175
    2196:	0e 94 61 00 	call	0xc2	; 0xc2 <send_command>
	
	send_command(0xB0); // sets to memory page 0 (0xB0 | desired page number)
    219a:	80 eb       	ldi	r24, 0xB0	; 176
    219c:	0e 94 61 00 	call	0xc2	; 0xc2 <send_command>
	
	uint8_t j=0;
	for(j=0;j<6;j++){
    21a0:	d0 e0       	ldi	r29, 0x00	; 0
	send_command(0xB0 | j);
	uint8_t i=0;
	for(i=0;i<128;i++){
    21a2:	10 e0       	ldi	r17, 0x00	; 0
	
	send_command(0xB0); // sets to memory page 0 (0xB0 | desired page number)
	
	uint8_t j=0;
	for(j=0;j<6;j++){
	send_command(0xB0 | j);
    21a4:	8d 2f       	mov	r24, r29
    21a6:	80 6b       	ori	r24, 0xB0	; 176
    21a8:	0e 94 61 00 	call	0xc2	; 0xc2 <send_command>
	uint8_t i=0;
	for(i=0;i<128;i++){
    21ac:	c1 2f       	mov	r28, r17
	send_data(i%16);
    21ae:	8c 2f       	mov	r24, r28
    21b0:	8f 70       	andi	r24, 0x0F	; 15
    21b2:	0e 94 66 00 	call	0xcc	; 0xcc <send_data>
	
	uint8_t j=0;
	for(j=0;j<6;j++){
	send_command(0xB0 | j);
	uint8_t i=0;
	for(i=0;i<128;i++){
    21b6:	cf 5f       	subi	r28, 0xFF	; 255
    21b8:	c0 38       	cpi	r28, 0x80	; 128
    21ba:	c9 f7       	brne	.-14     	; 0x21ae <main+0x74>
	send_command(0xAF); //turn the display on
	
	send_command(0xB0); // sets to memory page 0 (0xB0 | desired page number)
	
	uint8_t j=0;
	for(j=0;j<6;j++){
    21bc:	df 5f       	subi	r29, 0xFF	; 255
    21be:	d6 30       	cpi	r29, 0x06	; 6
    21c0:	89 f7       	brne	.-30     	; 0x21a4 <main+0x6a>
    21c2:	90 e0       	ldi	r25, 0x00	; 0
	send_data(i%16);
	}
	}
	
	while(1){
			uint8_t rand_int = 0;
    21c4:	20 e0       	ldi	r18, 0x00	; 0
			while(order_entry_mode_flag == 1){
				rand_int++;
				if(((PIND & 0x08) == 0x08) && (rand_int_loaded == 0)){
					rand_int_locked = rand_int;
					rand_int = 0;
					rand_int_loaded = 1;
    21c6:	31 e0       	ldi	r19, 0x01	; 1
    21c8:	0e c0       	rjmp	.+28     	; 0x21e6 <main+0xac>
	
	while(1){
			uint8_t rand_int = 0;
			
			while(order_entry_mode_flag == 1){
				rand_int++;
    21ca:	9f 5f       	subi	r25, 0xFF	; 255
				if(((PIND & 0x08) == 0x08) && (rand_int_loaded == 0)){
    21cc:	4b 9b       	sbis	0x09, 3	; 9
    21ce:	0b c0       	rjmp	.+22     	; 0x21e6 <main+0xac>
    21d0:	80 91 23 01 	lds	r24, 0x0123
    21d4:	81 11       	cpse	r24, r1
    21d6:	07 c0       	rjmp	.+14     	; 0x21e6 <main+0xac>
					rand_int_locked = rand_int;
    21d8:	90 93 24 01 	sts	0x0124, r25
					rand_int = 0;
					rand_int_loaded = 1;
    21dc:	30 93 23 01 	sts	0x0123, r19
			
			while(order_entry_mode_flag == 1){
				rand_int++;
				if(((PIND & 0x08) == 0x08) && (rand_int_loaded == 0)){
					rand_int_locked = rand_int;
					rand_int = 0;
    21e0:	92 2f       	mov	r25, r18
    21e2:	01 c0       	rjmp	.+2      	; 0x21e6 <main+0xac>
	send_data(i%16);
	}
	}
	
	while(1){
			uint8_t rand_int = 0;
    21e4:	92 2f       	mov	r25, r18
			
			while(order_entry_mode_flag == 1){
    21e6:	80 91 25 01 	lds	r24, 0x0125
    21ea:	81 30       	cpi	r24, 0x01	; 1
    21ec:	71 f3       	breq	.-36     	; 0x21ca <main+0x90>
					rand_int_loaded = 1;
				}
			}


			if(order_entry_mode_flag == 0){
    21ee:	80 91 25 01 	lds	r24, 0x0125
    21f2:	81 11       	cpse	r24, r1
    21f4:	f7 cf       	rjmp	.-18     	; 0x21e4 <main+0xaa>
				sleep_mode();
    21f6:	83 b7       	in	r24, 0x33	; 51
    21f8:	81 60       	ori	r24, 0x01	; 1
    21fa:	83 bf       	out	0x33, r24	; 51
    21fc:	88 95       	sleep
    21fe:	83 b7       	in	r24, 0x33	; 51
    2200:	8e 7f       	andi	r24, 0xFE	; 254
    2202:	83 bf       	out	0x33, r24	; 51
	send_data(i%16);
	}
	}
	
	while(1){
			uint8_t rand_int = 0;
    2204:	92 2f       	mov	r25, r18
    2206:	ef cf       	rjmp	.-34     	; 0x21e6 <main+0xac>

00002208 <__divmodhi4>:
    2208:	97 fb       	bst	r25, 7
    220a:	07 2e       	mov	r0, r23
    220c:	16 f4       	brtc	.+4      	; 0x2212 <__divmodhi4+0xa>
    220e:	00 94       	com	r0
    2210:	07 d0       	rcall	.+14     	; 0x2220 <__divmodhi4_neg1>
    2212:	77 fd       	sbrc	r23, 7
    2214:	09 d0       	rcall	.+18     	; 0x2228 <__divmodhi4_neg2>
    2216:	0e 94 18 11 	call	0x2230	; 0x2230 <__udivmodhi4>
    221a:	07 fc       	sbrc	r0, 7
    221c:	05 d0       	rcall	.+10     	; 0x2228 <__divmodhi4_neg2>
    221e:	3e f4       	brtc	.+14     	; 0x222e <__divmodhi4_exit>

00002220 <__divmodhi4_neg1>:
    2220:	90 95       	com	r25
    2222:	81 95       	neg	r24
    2224:	9f 4f       	sbci	r25, 0xFF	; 255
    2226:	08 95       	ret

00002228 <__divmodhi4_neg2>:
    2228:	70 95       	com	r23
    222a:	61 95       	neg	r22
    222c:	7f 4f       	sbci	r23, 0xFF	; 255

0000222e <__divmodhi4_exit>:
    222e:	08 95       	ret

00002230 <__udivmodhi4>:
    2230:	aa 1b       	sub	r26, r26
    2232:	bb 1b       	sub	r27, r27
    2234:	51 e1       	ldi	r21, 0x11	; 17
    2236:	07 c0       	rjmp	.+14     	; 0x2246 <__udivmodhi4_ep>

00002238 <__udivmodhi4_loop>:
    2238:	aa 1f       	adc	r26, r26
    223a:	bb 1f       	adc	r27, r27
    223c:	a6 17       	cp	r26, r22
    223e:	b7 07       	cpc	r27, r23
    2240:	10 f0       	brcs	.+4      	; 0x2246 <__udivmodhi4_ep>
    2242:	a6 1b       	sub	r26, r22
    2244:	b7 0b       	sbc	r27, r23

00002246 <__udivmodhi4_ep>:
    2246:	88 1f       	adc	r24, r24
    2248:	99 1f       	adc	r25, r25
    224a:	5a 95       	dec	r21
    224c:	a9 f7       	brne	.-22     	; 0x2238 <__udivmodhi4_loop>
    224e:	80 95       	com	r24
    2250:	90 95       	com	r25
    2252:	bc 01       	movw	r22, r24
    2254:	cd 01       	movw	r24, r26
    2256:	08 95       	ret

00002258 <_exit>:
    2258:	f8 94       	cli

0000225a <__stop_program>:
    225a:	ff cf       	rjmp	.-2      	; 0x225a <__stop_program>
